schema {
  query: Query
  subscription: Subscription
}
scalar BigDecimal
scalar BigInt
scalar Bytes
type ATokenBalanceHistoryItem {
  """
  userReserve + txHash
  """
  id: ID!
  userReserve: UserReserve!
  timestamp: Int!
  scaledATokenBalance: BigInt!
  currentATokenBalance: BigInt!
  index: BigInt!
}
type BackUnbacked {
  id: ID!
  pool: Pool!
  reserve: Reserve!
  userReserve: UserReserve!
  backer: User!
  amount: BigInt!
  fee: BigInt!
  lpFee: BigInt!
  protocolFee: BigInt!
  timestamp: Int!
}
type Borrow implements UserTransaction {
  """
  tx hash
  """
  id: ID!
  txHash: Bytes!
  action: Action!
  pool: Pool!
  user: User!
  caller: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  borrowRate: BigInt!
  borrowRateMode: Int!
  referrer: Referrer
  timestamp: Int!
  stableTokenDebt: BigInt!
  variableTokenDebt: BigInt!
  assetPriceUSD: BigDecimal!
}
type ChainlinkAggregator {
  id: ID!
  oracleAsset: PriceOracleAsset!
}
type ClaimRewardsCall implements UserTransaction {
  id: ID!
  txHash: Bytes!
  user: User!
  to: User!
  amount: BigInt!
  caller: User!
  rewardsController: RewardsController!
  action: Action!
  timestamp: Int!
}
type ContractToPoolMapping {
  id: ID!
  pool: Pool!
}
type EModeCategory {
  """
  id: categoryId
  """
  id: ID!
  ltv: BigInt!
  liquidationThreshold: BigInt!
  liquidationBonus: BigInt!
  oracle: Bytes!
  label: String!
}
type FlashLoan {
  """
  tx hash
  """
  id: ID!
  pool: Pool!
  reserve: Reserve!
  target: Bytes!
  amount: BigInt!
  totalFee: BigInt!
  lpFee: BigInt!
  protocolFee: BigInt!
  initiator: User!
  timestamp: Int!
  assetPriceUSD: BigDecimal!
}
type IsolationModeTotalDebtUpdated {
  """
  tx hash
  """
  id: ID!
  pool: Pool!
  reserve: Reserve!
  isolatedDebt: BigInt!
  timestamp: Int!
}
type LiquidationCall implements UserTransaction {
  """
  tx hash
  """
  id: ID!
  txHash: Bytes!
  action: Action!
  pool: Pool!
  user: User!
  collateralReserve: Reserve!
  collateralUserReserve: UserReserve!
  collateralAmount: BigInt!
  principalReserve: Reserve!
  principalUserReserve: UserReserve!
  principalAmount: BigInt!
  liquidator: Bytes!
  timestamp: Int!
  collateralAssetPriceUSD: BigDecimal!
  borrowAssetPriceUSD: BigDecimal!
}
type MapAssetPool {
  """
  address of a /s /v token
  """
  id: ID!
  pool: String!
  underlyingAsset: Bytes!
}
type MintUnbacked {
  id: ID!
  pool: Pool!
  user: User!
  caller: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  referral: Int!
  timestamp: Int!
}
type MintedToTreasury {
  id: ID!
  pool: Pool!
  reserve: Reserve!
  amount: BigInt!
  timestamp: Int!
}
type Pool {
  id: ID!
  addressProviderId: BigInt!
  protocol: Protocol!
  pool: Bytes
  poolCollateralManager: Bytes
  poolConfiguratorImpl: Bytes
  poolImpl: Bytes
  poolDataProviderImpl: Bytes
  poolConfigurator: Bytes
  proxyPriceProvider: Bytes
  lastUpdateTimestamp: Int!
  bridgeProtocolFee: BigInt
  flashloanPremiumTotal: BigInt
  flashloanPremiumToProtocol: BigInt
  reserves(
    skip: Int = 0
    first: Int = 100
    orderBy: Reserve_orderBy
    orderDirection: OrderDirection
    where: Reserve_filter
  ): [Reserve!]!
  supplyHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Supply_orderBy
    orderDirection: OrderDirection
    where: Supply_filter
  ): [Supply!]!
  mintUnbackedHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: MintUnbacked_orderBy
    orderDirection: OrderDirection
    where: MintUnbacked_filter
  ): [MintUnbacked!]!
  backUnbackedHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: BackUnbacked_orderBy
    orderDirection: OrderDirection
    where: BackUnbacked_filter
  ): [BackUnbacked!]!
  mintedToTreasuryHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: MintedToTreasury_orderBy
    orderDirection: OrderDirection
    where: MintedToTreasury_filter
  ): [MintedToTreasury!]!
  isolationModeTotalDebtUpdatedHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: IsolationModeTotalDebtUpdated_orderBy
    orderDirection: OrderDirection
    where: IsolationModeTotalDebtUpdated_filter
  ): [IsolationModeTotalDebtUpdated!]!
  redeemUnderlyingHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: RedeemUnderlying_orderBy
    orderDirection: OrderDirection
    where: RedeemUnderlying_filter
  ): [RedeemUnderlying!]!
  borrowHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Borrow_orderBy
    orderDirection: OrderDirection
    where: Borrow_filter
  ): [Borrow!]!
  swapHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapBorrowRate_orderBy
    orderDirection: OrderDirection
    where: SwapBorrowRate_filter
  ): [SwapBorrowRate!]!
  usageAsCollateralHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageAsCollateral_orderBy
    orderDirection: OrderDirection
    where: UsageAsCollateral_filter
  ): [UsageAsCollateral!]!
  rebalanceStableBorrowRateHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: RebalanceStableBorrowRate_orderBy
    orderDirection: OrderDirection
    where: RebalanceStableBorrowRate_filter
  ): [RebalanceStableBorrowRate!]!
  repayHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Repay_orderBy
    orderDirection: OrderDirection
    where: Repay_filter
  ): [Repay!]!
  flashLoanHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: FlashLoan_orderBy
    orderDirection: OrderDirection
    where: FlashLoan_filter
  ): [FlashLoan!]!
  liquidationCallHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidationCall_orderBy
    orderDirection: OrderDirection
    where: LiquidationCall_filter
  ): [LiquidationCall!]!
  active: Boolean!
  paused: Boolean!
}
type PriceHistoryItem {
  id: ID!
  asset: PriceOracleAsset!
  price: BigInt!
  timestamp: Int!
}
type PriceOracle {
  id: ID!
  proxyPriceProvider: Bytes!
  usdPriceEth: BigInt!
  usdPriceEthMainSource: Bytes!
  usdPriceEthFallbackRequired: Boolean!
  usdDependentAssets(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceOracleAsset_orderBy
    orderDirection: OrderDirection
    where: PriceOracleAsset_filter
  ): [PriceOracleAsset!]!
  fallbackPriceOracle: Bytes!
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceOracleAsset_orderBy
    orderDirection: OrderDirection
    where: PriceOracleAsset_filter
  ): [PriceOracleAsset!]!
  usdPriceEthHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: UsdEthPriceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: UsdEthPriceHistoryItem_filter
  ): [UsdEthPriceHistoryItem!]!
  tokensWithFallback(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceOracleAsset_orderBy
    orderDirection: OrderDirection
    where: PriceOracleAsset_filter
  ): [PriceOracleAsset!]!
  lastUpdateTimestamp: Int!
  version: Int!
  baseCurrency: Bytes!
  baseCurrencyUnit: BigInt!
}
type PriceOracleAsset {
  id: ID!
  oracle: PriceOracle!
  priceInEth: BigInt!
  priceSource: Bytes!
  isFallbackRequired: Boolean!
  type: PriceOracleAssetType!
  platform: PriceOracleAssetPlatform!
  dependentAssets(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceOracleAsset_orderBy
    orderDirection: OrderDirection
    where: PriceOracleAsset_filter
  ): [PriceOracleAsset!]!
  lastUpdateTimestamp: Int!
  priceHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: PriceHistoryItem_filter
  ): [PriceHistoryItem!]!
  fromChainlinkSourcesRegistry: Boolean!
}
type Protocol {
  id: ID!
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
  ): [Pool!]!
}
type Query {
  protocol(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  contractToPoolMapping(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ContractToPoolMapping
  contractToPoolMappings(
    skip: Int = 0
    first: Int = 100
    orderBy: ContractToPoolMapping_orderBy
    orderDirection: OrderDirection
    where: ContractToPoolMapping_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ContractToPoolMapping!]!
  pool(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  priceHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceHistoryItem
  priceHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: PriceHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PriceHistoryItem!]!
  usdEthPriceHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsdEthPriceHistoryItem
  usdEthPriceHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: UsdEthPriceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: UsdEthPriceHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsdEthPriceHistoryItem!]!
  chainlinkAggregator(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ChainlinkAggregator
  chainlinkAggregators(
    skip: Int = 0
    first: Int = 100
    orderBy: ChainlinkAggregator_orderBy
    orderDirection: OrderDirection
    where: ChainlinkAggregator_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ChainlinkAggregator!]!
  priceOracleAsset(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceOracleAsset
  priceOracleAssets(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceOracleAsset_orderBy
    orderDirection: OrderDirection
    where: PriceOracleAsset_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PriceOracleAsset!]!
  priceOracle(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceOracle
  priceOracles(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceOracle_orderBy
    orderDirection: OrderDirection
    where: PriceOracle_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PriceOracle!]!
  subToken(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubToken
  subTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: SubToken_orderBy
    orderDirection: OrderDirection
    where: SubToken_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubToken!]!
  referrer(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Referrer
  referrers(
    skip: Int = 0
    first: Int = 100
    orderBy: Referrer_orderBy
    orderDirection: OrderDirection
    where: Referrer_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Referrer!]!
  supply(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Supply
  supplies(
    skip: Int = 0
    first: Int = 100
    orderBy: Supply_orderBy
    orderDirection: OrderDirection
    where: Supply_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Supply!]!
  redeemUnderlying(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RedeemUnderlying
  redeemUnderlyings(
    skip: Int = 0
    first: Int = 100
    orderBy: RedeemUnderlying_orderBy
    orderDirection: OrderDirection
    where: RedeemUnderlying_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RedeemUnderlying!]!
  borrow(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Borrow
  borrows(
    skip: Int = 0
    first: Int = 100
    orderBy: Borrow_orderBy
    orderDirection: OrderDirection
    where: Borrow_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Borrow!]!
  swapBorrowRate(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapBorrowRate
  swapBorrowRates(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapBorrowRate_orderBy
    orderDirection: OrderDirection
    where: SwapBorrowRate_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapBorrowRate!]!
  usageAsCollateral(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageAsCollateral
  usageAsCollaterals(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageAsCollateral_orderBy
    orderDirection: OrderDirection
    where: UsageAsCollateral_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageAsCollateral!]!
  rebalanceStableBorrowRate(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RebalanceStableBorrowRate
  rebalanceStableBorrowRates(
    skip: Int = 0
    first: Int = 100
    orderBy: RebalanceStableBorrowRate_orderBy
    orderDirection: OrderDirection
    where: RebalanceStableBorrowRate_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RebalanceStableBorrowRate!]!
  repay(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Repay
  repays(
    skip: Int = 0
    first: Int = 100
    orderBy: Repay_orderBy
    orderDirection: OrderDirection
    where: Repay_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Repay!]!
  isolationModeTotalDebtUpdated(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IsolationModeTotalDebtUpdated
  isolationModeTotalDebtUpdateds(
    skip: Int = 0
    first: Int = 100
    orderBy: IsolationModeTotalDebtUpdated_orderBy
    orderDirection: OrderDirection
    where: IsolationModeTotalDebtUpdated_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IsolationModeTotalDebtUpdated!]!
  flashLoan(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FlashLoan
  flashLoans(
    skip: Int = 0
    first: Int = 100
    orderBy: FlashLoan_orderBy
    orderDirection: OrderDirection
    where: FlashLoan_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FlashLoan!]!
  liquidationCall(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidationCall
  liquidationCalls(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidationCall_orderBy
    orderDirection: OrderDirection
    where: LiquidationCall_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidationCall!]!
  mintUnbacked(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MintUnbacked
  mintUnbackeds(
    skip: Int = 0
    first: Int = 100
    orderBy: MintUnbacked_orderBy
    orderDirection: OrderDirection
    where: MintUnbacked_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MintUnbacked!]!
  backUnbacked(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BackUnbacked
  backUnbackeds(
    skip: Int = 0
    first: Int = 100
    orderBy: BackUnbacked_orderBy
    orderDirection: OrderDirection
    where: BackUnbacked_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BackUnbacked!]!
  mintedToTreasury(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MintedToTreasury
  mintedToTreasuries(
    skip: Int = 0
    first: Int = 100
    orderBy: MintedToTreasury_orderBy
    orderDirection: OrderDirection
    where: MintedToTreasury_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MintedToTreasury!]!
  userEModeSet(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserEModeSet
  userEModeSets(
    skip: Int = 0
    first: Int = 100
    orderBy: UserEModeSet_orderBy
    orderDirection: OrderDirection
    where: UserEModeSet_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserEModeSet!]!
  reserveConfigurationHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReserveConfigurationHistoryItem
  reserveConfigurationHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: ReserveConfigurationHistoryItem_orderBy
    orderDirection: OrderDirection
    where: ReserveConfigurationHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReserveConfigurationHistoryItem!]!
  reserveParamsHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReserveParamsHistoryItem
  reserveParamsHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: ReserveParamsHistoryItem_orderBy
    orderDirection: OrderDirection
    where: ReserveParamsHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReserveParamsHistoryItem!]!
  rewardFeedOracle(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardFeedOracle
  rewardFeedOracles(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardFeedOracle_orderBy
    orderDirection: OrderDirection
    where: RewardFeedOracle_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardFeedOracle!]!
  reward(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reward
  rewards(
    skip: Int = 0
    first: Int = 100
    orderBy: Reward_orderBy
    orderDirection: OrderDirection
    where: Reward_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Reward!]!
  userReward(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserReward
  userRewards(
    skip: Int = 0
    first: Int = 100
    orderBy: UserReward_orderBy
    orderDirection: OrderDirection
    where: UserReward_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserReward!]!
  rewardsController(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardsController
  rewardsControllers(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardsController_orderBy
    orderDirection: OrderDirection
    where: RewardsController_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardsController!]!
  rewardedAction(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardedAction
  rewardedActions(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardedAction_orderBy
    orderDirection: OrderDirection
    where: RewardedAction_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardedAction!]!
  claimRewardsCall(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimRewardsCall
  claimRewardsCalls(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimRewardsCall_orderBy
    orderDirection: OrderDirection
    where: ClaimRewardsCall_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimRewardsCall!]!
  emodeCategory(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EModeCategory
  emodeCategories(
    skip: Int = 0
    first: Int = 100
    orderBy: EModeCategory_orderBy
    orderDirection: OrderDirection
    where: EModeCategory_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EModeCategory!]!
  mapAssetPool(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MapAssetPool
  mapAssetPools(
    skip: Int = 0
    first: Int = 100
    orderBy: MapAssetPool_orderBy
    orderDirection: OrderDirection
    where: MapAssetPool_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MapAssetPool!]!
  reserve(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reserve
  reserves(
    skip: Int = 0
    first: Int = 100
    orderBy: Reserve_orderBy
    orderDirection: OrderDirection
    where: Reserve_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Reserve!]!
  atokenBalanceHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ATokenBalanceHistoryItem
  atokenBalanceHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: ATokenBalanceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: ATokenBalanceHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ATokenBalanceHistoryItem!]!
  vtokenBalanceHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VTokenBalanceHistoryItem
  vtokenBalanceHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: VTokenBalanceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: VTokenBalanceHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VTokenBalanceHistoryItem!]!
  stokenBalanceHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): STokenBalanceHistoryItem
  stokenBalanceHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: STokenBalanceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: STokenBalanceHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [STokenBalanceHistoryItem!]!
  stableTokenDelegatedAllowance(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StableTokenDelegatedAllowance
  stableTokenDelegatedAllowances(
    skip: Int = 0
    first: Int = 100
    orderBy: StableTokenDelegatedAllowance_orderBy
    orderDirection: OrderDirection
    where: StableTokenDelegatedAllowance_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StableTokenDelegatedAllowance!]!
  variableTokenDelegatedAllowance(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VariableTokenDelegatedAllowance
  variableTokenDelegatedAllowances(
    skip: Int = 0
    first: Int = 100
    orderBy: VariableTokenDelegatedAllowance_orderBy
    orderDirection: OrderDirection
    where: VariableTokenDelegatedAllowance_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VariableTokenDelegatedAllowance!]!
  userReserve(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserReserve
  userReserves(
    skip: Int = 0
    first: Int = 100
    orderBy: UserReserve_orderBy
    orderDirection: OrderDirection
    where: UserReserve_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserReserve!]!
  user(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  swapHistory(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapHistory
  swapHistories(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapHistory_orderBy
    orderDirection: OrderDirection
    where: SwapHistory_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapHistory!]!
  userTransaction(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserTransaction
  userTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: UserTransaction_orderBy
    orderDirection: OrderDirection
    where: UserTransaction_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserTransaction!]!
  "Access to subgraph metadata"
  _meta(block: Block_height): _Meta_
}
type RebalanceStableBorrowRate implements UserTransaction {
  """
  tx hash
  """
  id: ID!
  txHash: Bytes!
  action: Action!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  borrowRateFrom: BigInt!
  borrowRateTo: BigInt!
  timestamp: Int!
}
type RedeemUnderlying implements UserTransaction {
  """
  tx hash
  """
  id: ID!
  txHash: Bytes!
  action: Action!
  pool: Pool!
  user: User!
  to: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  timestamp: Int!
  assetPriceUSD: BigDecimal!
}
type Referrer {
  id: ID!
  supplies(
    skip: Int = 0
    first: Int = 100
    orderBy: Supply_orderBy
    orderDirection: OrderDirection
    where: Supply_filter
  ): [Supply!]!
  borrows(
    skip: Int = 0
    first: Int = 100
    orderBy: Borrow_orderBy
    orderDirection: OrderDirection
    where: Borrow_filter
  ): [Borrow!]!
}
type Repay implements UserTransaction {
  """
  tx hash
  """
  id: ID!
  txHash: Bytes!
  action: Action!
  pool: Pool!
  user: User!
  repayer: User!
  reserve: Reserve!
  userReserve: UserReserve!
  amount: BigInt!
  timestamp: Int!
  useATokens: Boolean!
  assetPriceUSD: BigDecimal!
}
type Reserve {
  """
  Reserve address
  """
  id: ID!
  underlyingAsset: Bytes!
  pool: Pool!
  symbol: String!
  name: String!
  decimals: Int!
  usageAsCollateralEnabled: Boolean!
  borrowingEnabled: Boolean!
  stableBorrowRateEnabled: Boolean!
  isActive: Boolean!
  isFrozen: Boolean!
  price: PriceOracleAsset!
  reserveInterestRateStrategy: Bytes!
  optimalUtilisationRate: BigInt!
  variableRateSlope1: BigInt!
  variableRateSlope2: BigInt!
  stableRateSlope1: BigInt!
  stableRateSlope2: BigInt!
  baseVariableBorrowRate: BigInt!
  baseLTVasCollateral: BigInt!
  reserveLiquidationThreshold: BigInt!
  reserveLiquidationBonus: BigInt!
  utilizationRate: BigDecimal!
  totalLiquidity: BigInt!
  totalATokenSupply: BigInt!
  totalLiquidityAsCollateral: BigInt!
  availableLiquidity: BigInt!
  totalPrincipalStableDebt: BigInt!
  totalScaledVariableDebt: BigInt!
  totalCurrentVariableDebt: BigInt!
  totalSupplies: BigInt!
  liquidityRate: BigInt!
  accruedToTreasury: BigInt!
  averageStableRate: BigInt!
  variableBorrowRate: BigInt!
  stableBorrowRate: BigInt!
  liquidityIndex: BigInt!
  variableBorrowIndex: BigInt!
  aToken: SubToken!
  vToken: SubToken!
  sToken: SubToken!
  reserveFactor: BigInt!
  lastUpdateTimestamp: Int!
  stableDebtLastUpdateTimestamp: Int!
  isPaused: Boolean!
  isDropped: Boolean!
  borrowCap: BigInt
  supplyCap: BigInt
  debtCeiling: BigInt
  unbackedMintCap: BigInt
  liquidationProtocolFee: BigInt
  borrowableInIsolation: Boolean
  eMode: EModeCategory
  siloedBorrowing: Boolean!
  lifetimeLiquidity: BigInt!
  lifetimePrincipalStableDebt: BigInt!
  lifetimeScaledVariableDebt: BigInt!
  lifetimeCurrentVariableDebt: BigInt!
  lifetimeRepayments: BigInt!
  lifetimeWithdrawals: BigInt!
  lifetimeBorrows: BigInt!
  lifetimeLiquidated: BigInt!
  lifetimeFlashLoans: BigInt!
  lifetimeFlashLoanPremium: BigInt!
  lifetimeFlashLoanLPPremium: BigInt!
  lifetimeFlashLoanProtocolPremium: BigInt!
  lifetimePortalLPFee: BigInt!
  lifetimePortalProtocolFee: BigInt!
  lifetimeSuppliersInterestEarned: BigInt!
  lifetimeReserveFactorAccrued: BigInt!
  userReserves(
    skip: Int = 0
    first: Int = 100
    orderBy: UserReserve_orderBy
    orderDirection: OrderDirection
    where: UserReserve_filter
  ): [UserReserve!]!
  supplyHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Supply_orderBy
    orderDirection: OrderDirection
    where: Supply_filter
  ): [Supply!]!
  mintUnbackedHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: MintUnbacked_orderBy
    orderDirection: OrderDirection
    where: MintUnbacked_filter
  ): [MintUnbacked!]!
  backUnbackedHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: BackUnbacked_orderBy
    orderDirection: OrderDirection
    where: BackUnbacked_filter
  ): [BackUnbacked!]!
  mintedToTreasuryHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: MintedToTreasury_orderBy
    orderDirection: OrderDirection
    where: MintedToTreasury_filter
  ): [MintedToTreasury!]!
  isolationModeTotalDebtUpdatedHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: IsolationModeTotalDebtUpdated_orderBy
    orderDirection: OrderDirection
    where: IsolationModeTotalDebtUpdated_filter
  ): [IsolationModeTotalDebtUpdated!]!
  redeemUnderlyingHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: RedeemUnderlying_orderBy
    orderDirection: OrderDirection
    where: RedeemUnderlying_filter
  ): [RedeemUnderlying!]!
  borrowHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Borrow_orderBy
    orderDirection: OrderDirection
    where: Borrow_filter
  ): [Borrow!]!
  usageAsCollateralHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageAsCollateral_orderBy
    orderDirection: OrderDirection
    where: UsageAsCollateral_filter
  ): [UsageAsCollateral!]!
  swapHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapBorrowRate_orderBy
    orderDirection: OrderDirection
    where: SwapBorrowRate_filter
  ): [SwapBorrowRate!]!
  rebalanceStableBorrowRateHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: RebalanceStableBorrowRate_orderBy
    orderDirection: OrderDirection
    where: RebalanceStableBorrowRate_filter
  ): [RebalanceStableBorrowRate!]!
  repayHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Repay_orderBy
    orderDirection: OrderDirection
    where: Repay_filter
  ): [Repay!]!
  flashLoanHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: FlashLoan_orderBy
    orderDirection: OrderDirection
    where: FlashLoan_filter
  ): [FlashLoan!]!
  liquidationCallHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidationCall_orderBy
    orderDirection: OrderDirection
    where: LiquidationCall_filter
  ): [LiquidationCall!]!
  paramsHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: ReserveParamsHistoryItem_orderBy
    orderDirection: OrderDirection
    where: ReserveParamsHistoryItem_filter
  ): [ReserveParamsHistoryItem!]!
  configurationHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: ReserveConfigurationHistoryItem_orderBy
    orderDirection: OrderDirection
    where: ReserveConfigurationHistoryItem_filter
  ): [ReserveConfigurationHistoryItem!]!
  supplies(
    skip: Int = 0
    first: Int = 100
    orderBy: Supply_orderBy
    orderDirection: OrderDirection
    where: Supply_filter
  ): [Supply!]!
}
type ReserveConfigurationHistoryItem {
  """
  tx hash
  """
  id: ID!
  reserve: Reserve!
  usageAsCollateralEnabled: Boolean!
  borrowingEnabled: Boolean!
  stableBorrowRateEnabled: Boolean!
  isActive: Boolean!
  isFrozen: Boolean!
  reserveInterestRateStrategy: Bytes!
  baseLTVasCollateral: BigInt!
  reserveLiquidationThreshold: BigInt!
  reserveLiquidationBonus: BigInt!
  timestamp: Int!
}
type ReserveParamsHistoryItem {
  """
  tx hash
  """
  id: ID!
  reserve: Reserve!
  variableBorrowRate: BigInt!
  variableBorrowIndex: BigInt!
  utilizationRate: BigDecimal!
  stableBorrowRate: BigInt!
  averageStableBorrowRate: BigInt!
  liquidityIndex: BigInt!
  liquidityRate: BigInt!
  totalLiquidity: BigInt!
  totalATokenSupply: BigInt!
  totalLiquidityAsCollateral: BigInt!
  availableLiquidity: BigInt!
  priceInEth: BigInt!
  priceInUsd: BigDecimal!
  timestamp: Int!
  accruedToTreasury: BigInt!
  totalScaledVariableDebt: BigInt!
  totalCurrentVariableDebt: BigInt!
  totalPrincipalStableDebt: BigInt!
  lifetimePrincipalStableDebt: BigInt!
  lifetimeScaledVariableDebt: BigInt!
  lifetimeCurrentVariableDebt: BigInt!
  lifetimeLiquidity: BigInt!
  lifetimeRepayments: BigInt!
  lifetimeWithdrawals: BigInt!
  lifetimeBorrows: BigInt!
  lifetimeLiquidated: BigInt!
  lifetimeFlashLoans: BigInt!
  lifetimeFlashLoanPremium: BigInt!
  lifetimeFlashLoanLPPremium: BigInt!
  lifetimeFlashLoanProtocolPremium: BigInt!
  lifetimeReserveFactorAccrued: BigInt!
  lifetimePortalLPFee: BigInt!
  lifetimePortalProtocolFee: BigInt!
  lifetimeSuppliersInterestEarned: BigInt!
}
type Reward {
  """
  address of ic:asset:reward
  """
  id: ID!
  rewardToken: Bytes!
  asset: SubToken!
  rewardTokenDecimals: Int!
  rewardFeedOracle: RewardFeedOracle!
  rewardTokenSymbol: String!
  index: BigInt!
  precision: Int!
  distributionEnd: Int!
  emissionsPerSecond: BigInt!
  rewardsController: RewardsController!
  createdAt: Int!
  updatedAt: Int!
}
type RewardFeedOracle {
  """
  address of reward
  """
  id: ID!
  rewardFeedAddress: Bytes!
  createdAt: Int!
  updatedAt: Int!
}
type RewardedAction {
  """
  txHash
  """
  id: ID!
  rewardsController: RewardsController!
  user: User!
  amount: BigInt!
}
type RewardsController {
  """
  address of the incentives controller
  """
  id: ID!
  rewards(
    skip: Int = 0
    first: Int = 100
    orderBy: Reward_orderBy
    orderDirection: OrderDirection
    where: Reward_filter
  ): [Reward!]!
  rewardedActions(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardedAction_orderBy
    orderDirection: OrderDirection
    where: RewardedAction_filter
  ): [RewardedAction!]!
  claimIncentives(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimRewardsCall_orderBy
    orderDirection: OrderDirection
    where: ClaimRewardsCall_filter
  ): [ClaimRewardsCall!]!
}
type STokenBalanceHistoryItem {
  """
  userReserve + txHash
  """
  id: ID!
  userReserve: UserReserve!
  principalStableDebt: BigInt!
  currentStableDebt: BigInt!
  timestamp: Int!
  avgStableBorrowRate: BigInt!
}
type StableTokenDelegatedAllowance {
  """
  stable + fromuser address + touser address+ reserve address
  """
  id: ID!
  fromUser: User!
  toUser: User!
  amountAllowed: BigInt!
  userReserve: UserReserve!
}
type SubToken {
  """
  SubToken address
  """
  id: ID!
  pool: Pool!
  tokenContractImpl: Bytes
  underlyingAssetAddress: Bytes!
  underlyingAssetDecimals: Int!
  rewards(
    skip: Int = 0
    first: Int = 100
    orderBy: Reward_orderBy
    orderDirection: OrderDirection
    where: Reward_filter
  ): [Reward!]!
}
type Subscription {
  protocol(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    skip: Int = 0
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    where: Protocol_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Protocol!]!
  contractToPoolMapping(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ContractToPoolMapping
  contractToPoolMappings(
    skip: Int = 0
    first: Int = 100
    orderBy: ContractToPoolMapping_orderBy
    orderDirection: OrderDirection
    where: ContractToPoolMapping_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ContractToPoolMapping!]!
  pool(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  priceHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceHistoryItem
  priceHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: PriceHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PriceHistoryItem!]!
  usdEthPriceHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsdEthPriceHistoryItem
  usdEthPriceHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: UsdEthPriceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: UsdEthPriceHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsdEthPriceHistoryItem!]!
  chainlinkAggregator(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ChainlinkAggregator
  chainlinkAggregators(
    skip: Int = 0
    first: Int = 100
    orderBy: ChainlinkAggregator_orderBy
    orderDirection: OrderDirection
    where: ChainlinkAggregator_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ChainlinkAggregator!]!
  priceOracleAsset(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceOracleAsset
  priceOracleAssets(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceOracleAsset_orderBy
    orderDirection: OrderDirection
    where: PriceOracleAsset_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PriceOracleAsset!]!
  priceOracle(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PriceOracle
  priceOracles(
    skip: Int = 0
    first: Int = 100
    orderBy: PriceOracle_orderBy
    orderDirection: OrderDirection
    where: PriceOracle_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PriceOracle!]!
  subToken(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubToken
  subTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: SubToken_orderBy
    orderDirection: OrderDirection
    where: SubToken_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubToken!]!
  referrer(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Referrer
  referrers(
    skip: Int = 0
    first: Int = 100
    orderBy: Referrer_orderBy
    orderDirection: OrderDirection
    where: Referrer_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Referrer!]!
  supply(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Supply
  supplies(
    skip: Int = 0
    first: Int = 100
    orderBy: Supply_orderBy
    orderDirection: OrderDirection
    where: Supply_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Supply!]!
  redeemUnderlying(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RedeemUnderlying
  redeemUnderlyings(
    skip: Int = 0
    first: Int = 100
    orderBy: RedeemUnderlying_orderBy
    orderDirection: OrderDirection
    where: RedeemUnderlying_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RedeemUnderlying!]!
  borrow(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Borrow
  borrows(
    skip: Int = 0
    first: Int = 100
    orderBy: Borrow_orderBy
    orderDirection: OrderDirection
    where: Borrow_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Borrow!]!
  swapBorrowRate(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapBorrowRate
  swapBorrowRates(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapBorrowRate_orderBy
    orderDirection: OrderDirection
    where: SwapBorrowRate_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapBorrowRate!]!
  usageAsCollateral(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UsageAsCollateral
  usageAsCollaterals(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageAsCollateral_orderBy
    orderDirection: OrderDirection
    where: UsageAsCollateral_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UsageAsCollateral!]!
  rebalanceStableBorrowRate(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RebalanceStableBorrowRate
  rebalanceStableBorrowRates(
    skip: Int = 0
    first: Int = 100
    orderBy: RebalanceStableBorrowRate_orderBy
    orderDirection: OrderDirection
    where: RebalanceStableBorrowRate_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RebalanceStableBorrowRate!]!
  repay(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Repay
  repays(
    skip: Int = 0
    first: Int = 100
    orderBy: Repay_orderBy
    orderDirection: OrderDirection
    where: Repay_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Repay!]!
  isolationModeTotalDebtUpdated(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): IsolationModeTotalDebtUpdated
  isolationModeTotalDebtUpdateds(
    skip: Int = 0
    first: Int = 100
    orderBy: IsolationModeTotalDebtUpdated_orderBy
    orderDirection: OrderDirection
    where: IsolationModeTotalDebtUpdated_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [IsolationModeTotalDebtUpdated!]!
  flashLoan(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FlashLoan
  flashLoans(
    skip: Int = 0
    first: Int = 100
    orderBy: FlashLoan_orderBy
    orderDirection: OrderDirection
    where: FlashLoan_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FlashLoan!]!
  liquidationCall(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidationCall
  liquidationCalls(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidationCall_orderBy
    orderDirection: OrderDirection
    where: LiquidationCall_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidationCall!]!
  mintUnbacked(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MintUnbacked
  mintUnbackeds(
    skip: Int = 0
    first: Int = 100
    orderBy: MintUnbacked_orderBy
    orderDirection: OrderDirection
    where: MintUnbacked_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MintUnbacked!]!
  backUnbacked(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BackUnbacked
  backUnbackeds(
    skip: Int = 0
    first: Int = 100
    orderBy: BackUnbacked_orderBy
    orderDirection: OrderDirection
    where: BackUnbacked_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BackUnbacked!]!
  mintedToTreasury(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MintedToTreasury
  mintedToTreasuries(
    skip: Int = 0
    first: Int = 100
    orderBy: MintedToTreasury_orderBy
    orderDirection: OrderDirection
    where: MintedToTreasury_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MintedToTreasury!]!
  userEModeSet(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserEModeSet
  userEModeSets(
    skip: Int = 0
    first: Int = 100
    orderBy: UserEModeSet_orderBy
    orderDirection: OrderDirection
    where: UserEModeSet_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserEModeSet!]!
  reserveConfigurationHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReserveConfigurationHistoryItem
  reserveConfigurationHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: ReserveConfigurationHistoryItem_orderBy
    orderDirection: OrderDirection
    where: ReserveConfigurationHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReserveConfigurationHistoryItem!]!
  reserveParamsHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReserveParamsHistoryItem
  reserveParamsHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: ReserveParamsHistoryItem_orderBy
    orderDirection: OrderDirection
    where: ReserveParamsHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReserveParamsHistoryItem!]!
  rewardFeedOracle(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardFeedOracle
  rewardFeedOracles(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardFeedOracle_orderBy
    orderDirection: OrderDirection
    where: RewardFeedOracle_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardFeedOracle!]!
  reward(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reward
  rewards(
    skip: Int = 0
    first: Int = 100
    orderBy: Reward_orderBy
    orderDirection: OrderDirection
    where: Reward_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Reward!]!
  userReward(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserReward
  userRewards(
    skip: Int = 0
    first: Int = 100
    orderBy: UserReward_orderBy
    orderDirection: OrderDirection
    where: UserReward_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserReward!]!
  rewardsController(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardsController
  rewardsControllers(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardsController_orderBy
    orderDirection: OrderDirection
    where: RewardsController_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardsController!]!
  rewardedAction(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RewardedAction
  rewardedActions(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardedAction_orderBy
    orderDirection: OrderDirection
    where: RewardedAction_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RewardedAction!]!
  claimRewardsCall(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ClaimRewardsCall
  claimRewardsCalls(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimRewardsCall_orderBy
    orderDirection: OrderDirection
    where: ClaimRewardsCall_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ClaimRewardsCall!]!
  emodeCategory(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): EModeCategory
  emodeCategories(
    skip: Int = 0
    first: Int = 100
    orderBy: EModeCategory_orderBy
    orderDirection: OrderDirection
    where: EModeCategory_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [EModeCategory!]!
  mapAssetPool(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MapAssetPool
  mapAssetPools(
    skip: Int = 0
    first: Int = 100
    orderBy: MapAssetPool_orderBy
    orderDirection: OrderDirection
    where: MapAssetPool_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MapAssetPool!]!
  reserve(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reserve
  reserves(
    skip: Int = 0
    first: Int = 100
    orderBy: Reserve_orderBy
    orderDirection: OrderDirection
    where: Reserve_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Reserve!]!
  atokenBalanceHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ATokenBalanceHistoryItem
  atokenBalanceHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: ATokenBalanceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: ATokenBalanceHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ATokenBalanceHistoryItem!]!
  vtokenBalanceHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VTokenBalanceHistoryItem
  vtokenBalanceHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: VTokenBalanceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: VTokenBalanceHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VTokenBalanceHistoryItem!]!
  stokenBalanceHistoryItem(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): STokenBalanceHistoryItem
  stokenBalanceHistoryItems(
    skip: Int = 0
    first: Int = 100
    orderBy: STokenBalanceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: STokenBalanceHistoryItem_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [STokenBalanceHistoryItem!]!
  stableTokenDelegatedAllowance(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StableTokenDelegatedAllowance
  stableTokenDelegatedAllowances(
    skip: Int = 0
    first: Int = 100
    orderBy: StableTokenDelegatedAllowance_orderBy
    orderDirection: OrderDirection
    where: StableTokenDelegatedAllowance_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StableTokenDelegatedAllowance!]!
  variableTokenDelegatedAllowance(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): VariableTokenDelegatedAllowance
  variableTokenDelegatedAllowances(
    skip: Int = 0
    first: Int = 100
    orderBy: VariableTokenDelegatedAllowance_orderBy
    orderDirection: OrderDirection
    where: VariableTokenDelegatedAllowance_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [VariableTokenDelegatedAllowance!]!
  userReserve(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserReserve
  userReserves(
    skip: Int = 0
    first: Int = 100
    orderBy: UserReserve_orderBy
    orderDirection: OrderDirection
    where: UserReserve_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserReserve!]!
  user(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  swapHistory(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SwapHistory
  swapHistories(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapHistory_orderBy
    orderDirection: OrderDirection
    where: SwapHistory_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SwapHistory!]!
  userTransaction(
    id: ID!
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UserTransaction
  userTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: UserTransaction_orderBy
    orderDirection: OrderDirection
    where: UserTransaction_filter
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UserTransaction!]!
  "Access to subgraph metadata"
  _meta(block: Block_height): _Meta_
}
type Supply implements UserTransaction {
  """
  tx hash
  """
  id: ID!
  txHash: Bytes!
  action: Action!
  pool: Pool!
  user: User!
  caller: User!
  reserve: Reserve!
  referrer: Referrer
  userReserve: UserReserve!
  amount: BigInt!
  timestamp: Int!
  assetPriceUSD: BigDecimal!
}
type SwapBorrowRate implements UserTransaction {
  """
  tx hash
  """
  id: ID!
  txHash: Bytes!
  action: Action!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  borrowRateModeFrom: Int!
  borrowRateModeTo: Int!
  stableBorrowRate: BigInt!
  variableBorrowRate: BigInt!
  timestamp: Int!
}
type SwapHistory {
  """
  tx hash
  """
  id: ID!
  fromAsset: String!
  toAsset: String!
  fromAmount: BigInt!
  receivedAmount: BigInt!
  swapType: String!
}
type UsageAsCollateral implements UserTransaction {
  """
  tx hash
  """
  id: ID!
  txHash: Bytes!
  action: Action!
  pool: Pool!
  user: User!
  reserve: Reserve!
  userReserve: UserReserve!
  fromState: Boolean!
  toState: Boolean!
  timestamp: Int!
}
type UsdEthPriceHistoryItem {
  id: ID!
  oracle: PriceOracle!
  price: BigInt!
  timestamp: Int!
}
type User {
  """
  user address
  """
  id: ID!
  borrowedReservesCount: Int!
  unclaimedRewards: BigInt!
  lifetimeRewards: BigInt!
  rewardsLastUpdated: Int!
  rewards(
    skip: Int = 0
    first: Int = 100
    orderBy: UserReward_orderBy
    orderDirection: OrderDirection
    where: UserReward_filter
  ): [UserReward!]!
  eModeCategoryId: EModeCategory
  reserves(
    skip: Int = 0
    first: Int = 100
    orderBy: UserReserve_orderBy
    orderDirection: OrderDirection
    where: UserReserve_filter
  ): [UserReserve!]!
  supplyHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Supply_orderBy
    orderDirection: OrderDirection
    where: Supply_filter
  ): [Supply!]!
  mintUnbackedHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: MintUnbacked_orderBy
    orderDirection: OrderDirection
    where: MintUnbacked_filter
  ): [MintUnbacked!]!
  backUnbackedHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: BackUnbacked_orderBy
    orderDirection: OrderDirection
    where: BackUnbacked_filter
  ): [BackUnbacked!]!
  userEmodeSetHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: UserEModeSet_orderBy
    orderDirection: OrderDirection
    where: UserEModeSet_filter
  ): [UserEModeSet!]!
  redeemUnderlyingHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: RedeemUnderlying_orderBy
    orderDirection: OrderDirection
    where: RedeemUnderlying_filter
  ): [RedeemUnderlying!]!
  usageAsCollateralHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageAsCollateral_orderBy
    orderDirection: OrderDirection
    where: UsageAsCollateral_filter
  ): [UsageAsCollateral!]!
  borrowHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Borrow_orderBy
    orderDirection: OrderDirection
    where: Borrow_filter
  ): [Borrow!]!
  swapHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapBorrowRate_orderBy
    orderDirection: OrderDirection
    where: SwapBorrowRate_filter
  ): [SwapBorrowRate!]!
  rebalanceStableBorrowRateHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: RebalanceStableBorrowRate_orderBy
    orderDirection: OrderDirection
    where: RebalanceStableBorrowRate_filter
  ): [RebalanceStableBorrowRate!]!
  repayHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Repay_orderBy
    orderDirection: OrderDirection
    where: Repay_filter
  ): [Repay!]!
  liquidationCallHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidationCall_orderBy
    orderDirection: OrderDirection
    where: LiquidationCall_filter
  ): [LiquidationCall!]!
  rewardedActions(
    skip: Int = 0
    first: Int = 100
    orderBy: RewardedAction_orderBy
    orderDirection: OrderDirection
    where: RewardedAction_filter
  ): [RewardedAction!]!
  claimRewards(
    skip: Int = 0
    first: Int = 100
    orderBy: ClaimRewardsCall_orderBy
    orderDirection: OrderDirection
    where: ClaimRewardsCall_filter
  ): [ClaimRewardsCall!]!
}
type UserEModeSet implements UserTransaction {
  id: ID!
  txHash: Bytes!
  action: Action!
  user: User!
  timestamp: Int!
  categoryId: Int!
}
type UserReserve {
  """
  user address + reserve address
  """
  id: ID!
  pool: Pool!
  reserve: Reserve!
  user: User!
  usageAsCollateralEnabledOnUser: Boolean!
  scaledATokenBalance: BigInt!
  currentATokenBalance: BigInt!
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  principalStableDebt: BigInt!
  currentStableDebt: BigInt!
  currentTotalDebt: BigInt!
  stableBorrowRate: BigInt!
  oldStableBorrowRate: BigInt!
  liquidityRate: BigInt!
  stableBorrowLastUpdateTimestamp: Int!
  variableBorrowIndex: BigInt!
  """
  Amount in currency units included as fee
  """
  lastUpdateTimestamp: Int!
  stableTokenDelegatedAllowances(
    skip: Int = 0
    first: Int = 100
    orderBy: StableTokenDelegatedAllowance_orderBy
    orderDirection: OrderDirection
    where: StableTokenDelegatedAllowance_filter
  ): [StableTokenDelegatedAllowance!]!
  variableTokenDelegatedAllowances(
    skip: Int = 0
    first: Int = 100
    orderBy: VariableTokenDelegatedAllowance_orderBy
    orderDirection: OrderDirection
    where: VariableTokenDelegatedAllowance_filter
  ): [VariableTokenDelegatedAllowance!]!
  aTokenBalanceHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: ATokenBalanceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: ATokenBalanceHistoryItem_filter
  ): [ATokenBalanceHistoryItem!]!
  vTokenBalanceHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: VTokenBalanceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: VTokenBalanceHistoryItem_filter
  ): [VTokenBalanceHistoryItem!]!
  sTokenBalanceHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: STokenBalanceHistoryItem_orderBy
    orderDirection: OrderDirection
    where: STokenBalanceHistoryItem_filter
  ): [STokenBalanceHistoryItem!]!
  usageAsCollateralHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: UsageAsCollateral_orderBy
    orderDirection: OrderDirection
    where: UsageAsCollateral_filter
  ): [UsageAsCollateral!]!
  supplyHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Supply_orderBy
    orderDirection: OrderDirection
    where: Supply_filter
  ): [Supply!]!
  mintUnbackedHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: MintUnbacked_orderBy
    orderDirection: OrderDirection
    where: MintUnbacked_filter
  ): [MintUnbacked!]!
  backUnbackedHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: BackUnbacked_orderBy
    orderDirection: OrderDirection
    where: BackUnbacked_filter
  ): [BackUnbacked!]!
  redeemUnderlyingHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: RedeemUnderlying_orderBy
    orderDirection: OrderDirection
    where: RedeemUnderlying_filter
  ): [RedeemUnderlying!]!
  borrowHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Borrow_orderBy
    orderDirection: OrderDirection
    where: Borrow_filter
  ): [Borrow!]!
  swapHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: SwapBorrowRate_orderBy
    orderDirection: OrderDirection
    where: SwapBorrowRate_filter
  ): [SwapBorrowRate!]!
  rebalanceStableBorrowRateHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: RebalanceStableBorrowRate_orderBy
    orderDirection: OrderDirection
    where: RebalanceStableBorrowRate_filter
  ): [RebalanceStableBorrowRate!]!
  repayHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: Repay_orderBy
    orderDirection: OrderDirection
    where: Repay_filter
  ): [Repay!]!
  liquidationCallHistory(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidationCall_orderBy
    orderDirection: OrderDirection
    where: LiquidationCall_filter
  ): [LiquidationCall!]!
}
type UserReward {
  """
  id: ic:asset:reward:user
  """
  id: ID!
  user: User!
  index: BigInt!
  reward: Reward!
  createdAt: Int!
  updatedAt: Int!
}
type VTokenBalanceHistoryItem {
  """
  userReserve + txHash
  """
  id: ID!
  userReserve: UserReserve!
  scaledVariableDebt: BigInt!
  currentVariableDebt: BigInt!
  timestamp: Int!
  index: BigInt!
}
type VariableTokenDelegatedAllowance {
  """
  variable + fromuser address + touser address+ reserve address
  """
  id: ID!
  fromUser: User!
  toUser: User!
  amountAllowed: BigInt!
  userReserve: UserReserve!
}
type _Block_ {
  "The hash of the block"
  hash: Bytes
  "The block number"
  number: Int!
}
"The type for the top-level _meta field"
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  """
  block: _Block_!
  "The deployment ID"
  deployment: String!
  "If `true`, the subgraph encountered indexing errors at some past block"
  hasIndexingErrors: Boolean!
}
interface UserTransaction {
  id: ID!
  txHash: Bytes!
  action: Action!
  user: User!
  timestamp: Int!
}
enum ATokenBalanceHistoryItem_orderBy {
  id
  userReserve
  timestamp
  scaledATokenBalance
  currentATokenBalance
  index
}
enum Action {
  Supply
  RedeemUnderlying
  Repay
  Borrow
  SwapBorrowRate
  UsageAsCollateral
  RebalanceStableBorrowRate
  LiquidationCall
  UserEModeSet
  ClaimRewardsCall
}
enum BackUnbacked_orderBy {
  id
  pool
  reserve
  userReserve
  backer
  amount
  fee
  lpFee
  protocolFee
  timestamp
}
enum Borrow_orderBy {
  id
  txHash
  action
  pool
  user
  caller
  reserve
  userReserve
  amount
  borrowRate
  borrowRateMode
  referrer
  timestamp
  stableTokenDebt
  variableTokenDebt
  assetPriceUSD
}
enum ChainlinkAggregator_orderBy {
  id
  oracleAsset
}
enum ClaimRewardsCall_orderBy {
  id
  txHash
  user
  to
  amount
  caller
  rewardsController
  action
  timestamp
}
enum ContractToPoolMapping_orderBy {
  id
  pool
}
enum EModeCategory_orderBy {
  id
  ltv
  liquidationThreshold
  liquidationBonus
  oracle
  label
}
enum FlashLoan_orderBy {
  id
  pool
  reserve
  target
  amount
  totalFee
  lpFee
  protocolFee
  initiator
  timestamp
  assetPriceUSD
}
enum IsolationModeTotalDebtUpdated_orderBy {
  id
  pool
  reserve
  isolatedDebt
  timestamp
}
enum LiquidationCall_orderBy {
  id
  txHash
  action
  pool
  user
  collateralReserve
  collateralUserReserve
  collateralAmount
  principalReserve
  principalUserReserve
  principalAmount
  liquidator
  timestamp
  collateralAssetPriceUSD
  borrowAssetPriceUSD
}
enum MapAssetPool_orderBy {
  id
  pool
  underlyingAsset
}
enum MintUnbacked_orderBy {
  id
  pool
  user
  caller
  reserve
  userReserve
  amount
  referral
  timestamp
}
enum MintedToTreasury_orderBy {
  id
  pool
  reserve
  amount
  timestamp
}
"Defines the order direction, either ascending or descending"
enum OrderDirection {
  asc
  desc
}
enum Pool_orderBy {
  id
  addressProviderId
  protocol
  pool
  poolCollateralManager
  poolConfiguratorImpl
  poolImpl
  poolDataProviderImpl
  poolConfigurator
  proxyPriceProvider
  lastUpdateTimestamp
  bridgeProtocolFee
  flashloanPremiumTotal
  flashloanPremiumToProtocol
  reserves
  supplyHistory
  mintUnbackedHistory
  backUnbackedHistory
  mintedToTreasuryHistory
  isolationModeTotalDebtUpdatedHistory
  redeemUnderlyingHistory
  borrowHistory
  swapHistory
  usageAsCollateralHistory
  rebalanceStableBorrowRateHistory
  repayHistory
  flashLoanHistory
  liquidationCallHistory
  active
  paused
}
enum PriceHistoryItem_orderBy {
  id
  asset
  price
  timestamp
}
enum PriceOracleAssetPlatform {
  Simple
  Uniswap
}
enum PriceOracleAssetType {
  Simple
  Composite
}
enum PriceOracleAsset_orderBy {
  id
  oracle
  priceInEth
  priceSource
  isFallbackRequired
  type
  platform
  dependentAssets
  lastUpdateTimestamp
  priceHistory
  fromChainlinkSourcesRegistry
}
enum PriceOracle_orderBy {
  id
  proxyPriceProvider
  usdPriceEth
  usdPriceEthMainSource
  usdPriceEthFallbackRequired
  usdDependentAssets
  fallbackPriceOracle
  tokens
  usdPriceEthHistory
  tokensWithFallback
  lastUpdateTimestamp
  version
  baseCurrency
  baseCurrencyUnit
}
enum Protocol_orderBy {
  id
  pools
}
enum RebalanceStableBorrowRate_orderBy {
  id
  txHash
  action
  pool
  user
  reserve
  userReserve
  borrowRateFrom
  borrowRateTo
  timestamp
}
enum RedeemUnderlying_orderBy {
  id
  txHash
  action
  pool
  user
  to
  reserve
  userReserve
  amount
  timestamp
  assetPriceUSD
}
enum Referrer_orderBy {
  id
  supplies
  borrows
}
enum Repay_orderBy {
  id
  txHash
  action
  pool
  user
  repayer
  reserve
  userReserve
  amount
  timestamp
  useATokens
  assetPriceUSD
}
enum ReserveConfigurationHistoryItem_orderBy {
  id
  reserve
  usageAsCollateralEnabled
  borrowingEnabled
  stableBorrowRateEnabled
  isActive
  isFrozen
  reserveInterestRateStrategy
  baseLTVasCollateral
  reserveLiquidationThreshold
  reserveLiquidationBonus
  timestamp
}
enum ReserveParamsHistoryItem_orderBy {
  id
  reserve
  variableBorrowRate
  variableBorrowIndex
  utilizationRate
  stableBorrowRate
  averageStableBorrowRate
  liquidityIndex
  liquidityRate
  totalLiquidity
  totalATokenSupply
  totalLiquidityAsCollateral
  availableLiquidity
  priceInEth
  priceInUsd
  timestamp
  accruedToTreasury
  totalScaledVariableDebt
  totalCurrentVariableDebt
  totalPrincipalStableDebt
  lifetimePrincipalStableDebt
  lifetimeScaledVariableDebt
  lifetimeCurrentVariableDebt
  lifetimeLiquidity
  lifetimeRepayments
  lifetimeWithdrawals
  lifetimeBorrows
  lifetimeLiquidated
  lifetimeFlashLoans
  lifetimeFlashLoanPremium
  lifetimeFlashLoanLPPremium
  lifetimeFlashLoanProtocolPremium
  lifetimeReserveFactorAccrued
  lifetimePortalLPFee
  lifetimePortalProtocolFee
  lifetimeSuppliersInterestEarned
}
enum Reserve_orderBy {
  id
  underlyingAsset
  pool
  symbol
  name
  decimals
  usageAsCollateralEnabled
  borrowingEnabled
  stableBorrowRateEnabled
  isActive
  isFrozen
  price
  reserveInterestRateStrategy
  optimalUtilisationRate
  variableRateSlope1
  variableRateSlope2
  stableRateSlope1
  stableRateSlope2
  baseVariableBorrowRate
  baseLTVasCollateral
  reserveLiquidationThreshold
  reserveLiquidationBonus
  utilizationRate
  totalLiquidity
  totalATokenSupply
  totalLiquidityAsCollateral
  availableLiquidity
  totalPrincipalStableDebt
  totalScaledVariableDebt
  totalCurrentVariableDebt
  totalSupplies
  liquidityRate
  accruedToTreasury
  averageStableRate
  variableBorrowRate
  stableBorrowRate
  liquidityIndex
  variableBorrowIndex
  aToken
  vToken
  sToken
  reserveFactor
  lastUpdateTimestamp
  stableDebtLastUpdateTimestamp
  isPaused
  isDropped
  borrowCap
  supplyCap
  debtCeiling
  unbackedMintCap
  liquidationProtocolFee
  borrowableInIsolation
  eMode
  siloedBorrowing
  lifetimeLiquidity
  lifetimePrincipalStableDebt
  lifetimeScaledVariableDebt
  lifetimeCurrentVariableDebt
  lifetimeRepayments
  lifetimeWithdrawals
  lifetimeBorrows
  lifetimeLiquidated
  lifetimeFlashLoans
  lifetimeFlashLoanPremium
  lifetimeFlashLoanLPPremium
  lifetimeFlashLoanProtocolPremium
  lifetimePortalLPFee
  lifetimePortalProtocolFee
  lifetimeSuppliersInterestEarned
  lifetimeReserveFactorAccrued
  userReserves
  supplyHistory
  mintUnbackedHistory
  backUnbackedHistory
  mintedToTreasuryHistory
  isolationModeTotalDebtUpdatedHistory
  redeemUnderlyingHistory
  borrowHistory
  usageAsCollateralHistory
  swapHistory
  rebalanceStableBorrowRateHistory
  repayHistory
  flashLoanHistory
  liquidationCallHistory
  paramsHistory
  configurationHistory
  supplies
}
enum RewardFeedOracle_orderBy {
  id
  rewardFeedAddress
  createdAt
  updatedAt
}
enum Reward_orderBy {
  id
  rewardToken
  asset
  rewardTokenDecimals
  rewardFeedOracle
  rewardTokenSymbol
  index
  precision
  distributionEnd
  emissionsPerSecond
  rewardsController
  createdAt
  updatedAt
}
enum RewardedAction_orderBy {
  id
  rewardsController
  user
  amount
}
enum RewardsController_orderBy {
  id
  rewards
  rewardedActions
  claimIncentives
}
enum STokenBalanceHistoryItem_orderBy {
  id
  userReserve
  principalStableDebt
  currentStableDebt
  timestamp
  avgStableBorrowRate
}
enum StableTokenDelegatedAllowance_orderBy {
  id
  fromUser
  toUser
  amountAllowed
  userReserve
}
enum SubToken_orderBy {
  id
  pool
  tokenContractImpl
  underlyingAssetAddress
  underlyingAssetDecimals
  rewards
}
enum Supply_orderBy {
  id
  txHash
  action
  pool
  user
  caller
  reserve
  referrer
  userReserve
  amount
  timestamp
  assetPriceUSD
}
enum SwapBorrowRate_orderBy {
  id
  txHash
  action
  pool
  user
  reserve
  userReserve
  borrowRateModeFrom
  borrowRateModeTo
  stableBorrowRate
  variableBorrowRate
  timestamp
}
enum SwapHistory_orderBy {
  id
  fromAsset
  toAsset
  fromAmount
  receivedAmount
  swapType
}
enum UsageAsCollateral_orderBy {
  id
  txHash
  action
  pool
  user
  reserve
  userReserve
  fromState
  toState
  timestamp
}
enum UsdEthPriceHistoryItem_orderBy {
  id
  oracle
  price
  timestamp
}
enum UserEModeSet_orderBy {
  id
  txHash
  action
  user
  timestamp
  categoryId
}
enum UserReserve_orderBy {
  id
  pool
  reserve
  user
  usageAsCollateralEnabledOnUser
  scaledATokenBalance
  currentATokenBalance
  scaledVariableDebt
  currentVariableDebt
  principalStableDebt
  currentStableDebt
  currentTotalDebt
  stableBorrowRate
  oldStableBorrowRate
  liquidityRate
  stableBorrowLastUpdateTimestamp
  variableBorrowIndex
  lastUpdateTimestamp
  stableTokenDelegatedAllowances
  variableTokenDelegatedAllowances
  aTokenBalanceHistory
  vTokenBalanceHistory
  sTokenBalanceHistory
  usageAsCollateralHistory
  supplyHistory
  mintUnbackedHistory
  backUnbackedHistory
  redeemUnderlyingHistory
  borrowHistory
  swapHistory
  rebalanceStableBorrowRateHistory
  repayHistory
  liquidationCallHistory
}
enum UserReward_orderBy {
  id
  user
  index
  reward
  createdAt
  updatedAt
}
enum UserTransaction_orderBy {
  id
  txHash
  action
  user
  timestamp
}
enum User_orderBy {
  id
  borrowedReservesCount
  unclaimedRewards
  lifetimeRewards
  rewardsLastUpdated
  rewards
  eModeCategoryId
  reserves
  supplyHistory
  mintUnbackedHistory
  backUnbackedHistory
  userEmodeSetHistory
  redeemUnderlyingHistory
  usageAsCollateralHistory
  borrowHistory
  swapHistory
  rebalanceStableBorrowRateHistory
  repayHistory
  liquidationCallHistory
  rewardedActions
  claimRewards
}
enum VTokenBalanceHistoryItem_orderBy {
  id
  userReserve
  scaledVariableDebt
  currentVariableDebt
  timestamp
  index
}
enum VariableTokenDelegatedAllowance_orderBy {
  id
  fromUser
  toUser
  amountAllowed
  userReserve
}
enum _SubgraphErrorPolicy_ {
  "Data will be returned even if the subgraph has indexing errors"
  allow
  "If the subgraph has indexing errors, data will be omitted. The default."
  deny
}
input ATokenBalanceHistoryItem_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  scaledATokenBalance: BigInt
  scaledATokenBalance_not: BigInt
  scaledATokenBalance_gt: BigInt
  scaledATokenBalance_lt: BigInt
  scaledATokenBalance_gte: BigInt
  scaledATokenBalance_lte: BigInt
  scaledATokenBalance_in: [BigInt!]
  scaledATokenBalance_not_in: [BigInt!]
  currentATokenBalance: BigInt
  currentATokenBalance_not: BigInt
  currentATokenBalance_gt: BigInt
  currentATokenBalance_lt: BigInt
  currentATokenBalance_gte: BigInt
  currentATokenBalance_lte: BigInt
  currentATokenBalance_in: [BigInt!]
  currentATokenBalance_not_in: [BigInt!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input BackUnbacked_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  backer: String
  backer_not: String
  backer_gt: String
  backer_lt: String
  backer_gte: String
  backer_lte: String
  backer_in: [String!]
  backer_not_in: [String!]
  backer_contains: String
  backer_contains_nocase: String
  backer_not_contains: String
  backer_not_contains_nocase: String
  backer_starts_with: String
  backer_starts_with_nocase: String
  backer_not_starts_with: String
  backer_not_starts_with_nocase: String
  backer_ends_with: String
  backer_ends_with_nocase: String
  backer_not_ends_with: String
  backer_not_ends_with_nocase: String
  backer_: User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  lpFee: BigInt
  lpFee_not: BigInt
  lpFee_gt: BigInt
  lpFee_lt: BigInt
  lpFee_gte: BigInt
  lpFee_lte: BigInt
  lpFee_in: [BigInt!]
  lpFee_not_in: [BigInt!]
  protocolFee: BigInt
  protocolFee_not: BigInt
  protocolFee_gt: BigInt
  protocolFee_lt: BigInt
  protocolFee_gte: BigInt
  protocolFee_lte: BigInt
  protocolFee_in: [BigInt!]
  protocolFee_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input BlockChangedFilter {
  number_gte: Int!
}
input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}
input Borrow_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  action: Action
  action_not: Action
  action_in: [Action!]
  action_not_in: [Action!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  caller: String
  caller_not: String
  caller_gt: String
  caller_lt: String
  caller_gte: String
  caller_lte: String
  caller_in: [String!]
  caller_not_in: [String!]
  caller_contains: String
  caller_contains_nocase: String
  caller_not_contains: String
  caller_not_contains_nocase: String
  caller_starts_with: String
  caller_starts_with_nocase: String
  caller_not_starts_with: String
  caller_not_starts_with_nocase: String
  caller_ends_with: String
  caller_ends_with_nocase: String
  caller_not_ends_with: String
  caller_not_ends_with_nocase: String
  caller_: User_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  borrowRate: BigInt
  borrowRate_not: BigInt
  borrowRate_gt: BigInt
  borrowRate_lt: BigInt
  borrowRate_gte: BigInt
  borrowRate_lte: BigInt
  borrowRate_in: [BigInt!]
  borrowRate_not_in: [BigInt!]
  borrowRateMode: Int
  borrowRateMode_not: Int
  borrowRateMode_gt: Int
  borrowRateMode_lt: Int
  borrowRateMode_gte: Int
  borrowRateMode_lte: Int
  borrowRateMode_in: [Int!]
  borrowRateMode_not_in: [Int!]
  referrer: String
  referrer_not: String
  referrer_gt: String
  referrer_lt: String
  referrer_gte: String
  referrer_lte: String
  referrer_in: [String!]
  referrer_not_in: [String!]
  referrer_contains: String
  referrer_contains_nocase: String
  referrer_not_contains: String
  referrer_not_contains_nocase: String
  referrer_starts_with: String
  referrer_starts_with_nocase: String
  referrer_not_starts_with: String
  referrer_not_starts_with_nocase: String
  referrer_ends_with: String
  referrer_ends_with_nocase: String
  referrer_not_ends_with: String
  referrer_not_ends_with_nocase: String
  referrer_: Referrer_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  stableTokenDebt: BigInt
  stableTokenDebt_not: BigInt
  stableTokenDebt_gt: BigInt
  stableTokenDebt_lt: BigInt
  stableTokenDebt_gte: BigInt
  stableTokenDebt_lte: BigInt
  stableTokenDebt_in: [BigInt!]
  stableTokenDebt_not_in: [BigInt!]
  variableTokenDebt: BigInt
  variableTokenDebt_not: BigInt
  variableTokenDebt_gt: BigInt
  variableTokenDebt_lt: BigInt
  variableTokenDebt_gte: BigInt
  variableTokenDebt_lte: BigInt
  variableTokenDebt_in: [BigInt!]
  variableTokenDebt_not_in: [BigInt!]
  assetPriceUSD: BigDecimal
  assetPriceUSD_not: BigDecimal
  assetPriceUSD_gt: BigDecimal
  assetPriceUSD_lt: BigDecimal
  assetPriceUSD_gte: BigDecimal
  assetPriceUSD_lte: BigDecimal
  assetPriceUSD_in: [BigDecimal!]
  assetPriceUSD_not_in: [BigDecimal!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input ChainlinkAggregator_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  oracleAsset: String
  oracleAsset_not: String
  oracleAsset_gt: String
  oracleAsset_lt: String
  oracleAsset_gte: String
  oracleAsset_lte: String
  oracleAsset_in: [String!]
  oracleAsset_not_in: [String!]
  oracleAsset_contains: String
  oracleAsset_contains_nocase: String
  oracleAsset_not_contains: String
  oracleAsset_not_contains_nocase: String
  oracleAsset_starts_with: String
  oracleAsset_starts_with_nocase: String
  oracleAsset_not_starts_with: String
  oracleAsset_not_starts_with_nocase: String
  oracleAsset_ends_with: String
  oracleAsset_ends_with_nocase: String
  oracleAsset_not_ends_with: String
  oracleAsset_not_ends_with_nocase: String
  oracleAsset_: PriceOracleAsset_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input ClaimRewardsCall_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  caller: String
  caller_not: String
  caller_gt: String
  caller_lt: String
  caller_gte: String
  caller_lte: String
  caller_in: [String!]
  caller_not_in: [String!]
  caller_contains: String
  caller_contains_nocase: String
  caller_not_contains: String
  caller_not_contains_nocase: String
  caller_starts_with: String
  caller_starts_with_nocase: String
  caller_not_starts_with: String
  caller_not_starts_with_nocase: String
  caller_ends_with: String
  caller_ends_with_nocase: String
  caller_not_ends_with: String
  caller_not_ends_with_nocase: String
  caller_: User_filter
  rewardsController: String
  rewardsController_not: String
  rewardsController_gt: String
  rewardsController_lt: String
  rewardsController_gte: String
  rewardsController_lte: String
  rewardsController_in: [String!]
  rewardsController_not_in: [String!]
  rewardsController_contains: String
  rewardsController_contains_nocase: String
  rewardsController_not_contains: String
  rewardsController_not_contains_nocase: String
  rewardsController_starts_with: String
  rewardsController_starts_with_nocase: String
  rewardsController_not_starts_with: String
  rewardsController_not_starts_with_nocase: String
  rewardsController_ends_with: String
  rewardsController_ends_with_nocase: String
  rewardsController_not_ends_with: String
  rewardsController_not_ends_with_nocase: String
  rewardsController_: RewardsController_filter
  action: Action
  action_not: Action
  action_in: [Action!]
  action_not_in: [Action!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input ContractToPoolMapping_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input EModeCategory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ltv: BigInt
  ltv_not: BigInt
  ltv_gt: BigInt
  ltv_lt: BigInt
  ltv_gte: BigInt
  ltv_lte: BigInt
  ltv_in: [BigInt!]
  ltv_not_in: [BigInt!]
  liquidationThreshold: BigInt
  liquidationThreshold_not: BigInt
  liquidationThreshold_gt: BigInt
  liquidationThreshold_lt: BigInt
  liquidationThreshold_gte: BigInt
  liquidationThreshold_lte: BigInt
  liquidationThreshold_in: [BigInt!]
  liquidationThreshold_not_in: [BigInt!]
  liquidationBonus: BigInt
  liquidationBonus_not: BigInt
  liquidationBonus_gt: BigInt
  liquidationBonus_lt: BigInt
  liquidationBonus_gte: BigInt
  liquidationBonus_lte: BigInt
  liquidationBonus_in: [BigInt!]
  liquidationBonus_not_in: [BigInt!]
  oracle: Bytes
  oracle_not: Bytes
  oracle_in: [Bytes!]
  oracle_not_in: [Bytes!]
  oracle_contains: Bytes
  oracle_not_contains: Bytes
  label: String
  label_not: String
  label_gt: String
  label_lt: String
  label_gte: String
  label_lte: String
  label_in: [String!]
  label_not_in: [String!]
  label_contains: String
  label_contains_nocase: String
  label_not_contains: String
  label_not_contains_nocase: String
  label_starts_with: String
  label_starts_with_nocase: String
  label_not_starts_with: String
  label_not_starts_with_nocase: String
  label_ends_with: String
  label_ends_with_nocase: String
  label_not_ends_with: String
  label_not_ends_with_nocase: String
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input FlashLoan_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  target: Bytes
  target_not: Bytes
  target_in: [Bytes!]
  target_not_in: [Bytes!]
  target_contains: Bytes
  target_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  totalFee: BigInt
  totalFee_not: BigInt
  totalFee_gt: BigInt
  totalFee_lt: BigInt
  totalFee_gte: BigInt
  totalFee_lte: BigInt
  totalFee_in: [BigInt!]
  totalFee_not_in: [BigInt!]
  lpFee: BigInt
  lpFee_not: BigInt
  lpFee_gt: BigInt
  lpFee_lt: BigInt
  lpFee_gte: BigInt
  lpFee_lte: BigInt
  lpFee_in: [BigInt!]
  lpFee_not_in: [BigInt!]
  protocolFee: BigInt
  protocolFee_not: BigInt
  protocolFee_gt: BigInt
  protocolFee_lt: BigInt
  protocolFee_gte: BigInt
  protocolFee_lte: BigInt
  protocolFee_in: [BigInt!]
  protocolFee_not_in: [BigInt!]
  initiator: String
  initiator_not: String
  initiator_gt: String
  initiator_lt: String
  initiator_gte: String
  initiator_lte: String
  initiator_in: [String!]
  initiator_not_in: [String!]
  initiator_contains: String
  initiator_contains_nocase: String
  initiator_not_contains: String
  initiator_not_contains_nocase: String
  initiator_starts_with: String
  initiator_starts_with_nocase: String
  initiator_not_starts_with: String
  initiator_not_starts_with_nocase: String
  initiator_ends_with: String
  initiator_ends_with_nocase: String
  initiator_not_ends_with: String
  initiator_not_ends_with_nocase: String
  initiator_: User_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  assetPriceUSD: BigDecimal
  assetPriceUSD_not: BigDecimal
  assetPriceUSD_gt: BigDecimal
  assetPriceUSD_lt: BigDecimal
  assetPriceUSD_gte: BigDecimal
  assetPriceUSD_lte: BigDecimal
  assetPriceUSD_in: [BigDecimal!]
  assetPriceUSD_not_in: [BigDecimal!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input IsolationModeTotalDebtUpdated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  isolatedDebt: BigInt
  isolatedDebt_not: BigInt
  isolatedDebt_gt: BigInt
  isolatedDebt_lt: BigInt
  isolatedDebt_gte: BigInt
  isolatedDebt_lte: BigInt
  isolatedDebt_in: [BigInt!]
  isolatedDebt_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input LiquidationCall_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  action: Action
  action_not: Action
  action_in: [Action!]
  action_not_in: [Action!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  collateralReserve: String
  collateralReserve_not: String
  collateralReserve_gt: String
  collateralReserve_lt: String
  collateralReserve_gte: String
  collateralReserve_lte: String
  collateralReserve_in: [String!]
  collateralReserve_not_in: [String!]
  collateralReserve_contains: String
  collateralReserve_contains_nocase: String
  collateralReserve_not_contains: String
  collateralReserve_not_contains_nocase: String
  collateralReserve_starts_with: String
  collateralReserve_starts_with_nocase: String
  collateralReserve_not_starts_with: String
  collateralReserve_not_starts_with_nocase: String
  collateralReserve_ends_with: String
  collateralReserve_ends_with_nocase: String
  collateralReserve_not_ends_with: String
  collateralReserve_not_ends_with_nocase: String
  collateralReserve_: Reserve_filter
  collateralUserReserve: String
  collateralUserReserve_not: String
  collateralUserReserve_gt: String
  collateralUserReserve_lt: String
  collateralUserReserve_gte: String
  collateralUserReserve_lte: String
  collateralUserReserve_in: [String!]
  collateralUserReserve_not_in: [String!]
  collateralUserReserve_contains: String
  collateralUserReserve_contains_nocase: String
  collateralUserReserve_not_contains: String
  collateralUserReserve_not_contains_nocase: String
  collateralUserReserve_starts_with: String
  collateralUserReserve_starts_with_nocase: String
  collateralUserReserve_not_starts_with: String
  collateralUserReserve_not_starts_with_nocase: String
  collateralUserReserve_ends_with: String
  collateralUserReserve_ends_with_nocase: String
  collateralUserReserve_not_ends_with: String
  collateralUserReserve_not_ends_with_nocase: String
  collateralUserReserve_: UserReserve_filter
  collateralAmount: BigInt
  collateralAmount_not: BigInt
  collateralAmount_gt: BigInt
  collateralAmount_lt: BigInt
  collateralAmount_gte: BigInt
  collateralAmount_lte: BigInt
  collateralAmount_in: [BigInt!]
  collateralAmount_not_in: [BigInt!]
  principalReserve: String
  principalReserve_not: String
  principalReserve_gt: String
  principalReserve_lt: String
  principalReserve_gte: String
  principalReserve_lte: String
  principalReserve_in: [String!]
  principalReserve_not_in: [String!]
  principalReserve_contains: String
  principalReserve_contains_nocase: String
  principalReserve_not_contains: String
  principalReserve_not_contains_nocase: String
  principalReserve_starts_with: String
  principalReserve_starts_with_nocase: String
  principalReserve_not_starts_with: String
  principalReserve_not_starts_with_nocase: String
  principalReserve_ends_with: String
  principalReserve_ends_with_nocase: String
  principalReserve_not_ends_with: String
  principalReserve_not_ends_with_nocase: String
  principalReserve_: Reserve_filter
  principalUserReserve: String
  principalUserReserve_not: String
  principalUserReserve_gt: String
  principalUserReserve_lt: String
  principalUserReserve_gte: String
  principalUserReserve_lte: String
  principalUserReserve_in: [String!]
  principalUserReserve_not_in: [String!]
  principalUserReserve_contains: String
  principalUserReserve_contains_nocase: String
  principalUserReserve_not_contains: String
  principalUserReserve_not_contains_nocase: String
  principalUserReserve_starts_with: String
  principalUserReserve_starts_with_nocase: String
  principalUserReserve_not_starts_with: String
  principalUserReserve_not_starts_with_nocase: String
  principalUserReserve_ends_with: String
  principalUserReserve_ends_with_nocase: String
  principalUserReserve_not_ends_with: String
  principalUserReserve_not_ends_with_nocase: String
  principalUserReserve_: UserReserve_filter
  principalAmount: BigInt
  principalAmount_not: BigInt
  principalAmount_gt: BigInt
  principalAmount_lt: BigInt
  principalAmount_gte: BigInt
  principalAmount_lte: BigInt
  principalAmount_in: [BigInt!]
  principalAmount_not_in: [BigInt!]
  liquidator: Bytes
  liquidator_not: Bytes
  liquidator_in: [Bytes!]
  liquidator_not_in: [Bytes!]
  liquidator_contains: Bytes
  liquidator_not_contains: Bytes
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  collateralAssetPriceUSD: BigDecimal
  collateralAssetPriceUSD_not: BigDecimal
  collateralAssetPriceUSD_gt: BigDecimal
  collateralAssetPriceUSD_lt: BigDecimal
  collateralAssetPriceUSD_gte: BigDecimal
  collateralAssetPriceUSD_lte: BigDecimal
  collateralAssetPriceUSD_in: [BigDecimal!]
  collateralAssetPriceUSD_not_in: [BigDecimal!]
  borrowAssetPriceUSD: BigDecimal
  borrowAssetPriceUSD_not: BigDecimal
  borrowAssetPriceUSD_gt: BigDecimal
  borrowAssetPriceUSD_lt: BigDecimal
  borrowAssetPriceUSD_gte: BigDecimal
  borrowAssetPriceUSD_lte: BigDecimal
  borrowAssetPriceUSD_in: [BigDecimal!]
  borrowAssetPriceUSD_not_in: [BigDecimal!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input MapAssetPool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  underlyingAsset: Bytes
  underlyingAsset_not: Bytes
  underlyingAsset_in: [Bytes!]
  underlyingAsset_not_in: [Bytes!]
  underlyingAsset_contains: Bytes
  underlyingAsset_not_contains: Bytes
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input MintUnbacked_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  caller: String
  caller_not: String
  caller_gt: String
  caller_lt: String
  caller_gte: String
  caller_lte: String
  caller_in: [String!]
  caller_not_in: [String!]
  caller_contains: String
  caller_contains_nocase: String
  caller_not_contains: String
  caller_not_contains_nocase: String
  caller_starts_with: String
  caller_starts_with_nocase: String
  caller_not_starts_with: String
  caller_not_starts_with_nocase: String
  caller_ends_with: String
  caller_ends_with_nocase: String
  caller_not_ends_with: String
  caller_not_ends_with_nocase: String
  caller_: User_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  referral: Int
  referral_not: Int
  referral_gt: Int
  referral_lt: Int
  referral_gte: Int
  referral_lte: Int
  referral_in: [Int!]
  referral_not_in: [Int!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input MintedToTreasury_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input Pool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  addressProviderId: BigInt
  addressProviderId_not: BigInt
  addressProviderId_gt: BigInt
  addressProviderId_lt: BigInt
  addressProviderId_gte: BigInt
  addressProviderId_lte: BigInt
  addressProviderId_in: [BigInt!]
  addressProviderId_not_in: [BigInt!]
  protocol: String
  protocol_not: String
  protocol_gt: String
  protocol_lt: String
  protocol_gte: String
  protocol_lte: String
  protocol_in: [String!]
  protocol_not_in: [String!]
  protocol_contains: String
  protocol_contains_nocase: String
  protocol_not_contains: String
  protocol_not_contains_nocase: String
  protocol_starts_with: String
  protocol_starts_with_nocase: String
  protocol_not_starts_with: String
  protocol_not_starts_with_nocase: String
  protocol_ends_with: String
  protocol_ends_with_nocase: String
  protocol_not_ends_with: String
  protocol_not_ends_with_nocase: String
  protocol_: Protocol_filter
  pool: Bytes
  pool_not: Bytes
  pool_in: [Bytes!]
  pool_not_in: [Bytes!]
  pool_contains: Bytes
  pool_not_contains: Bytes
  poolCollateralManager: Bytes
  poolCollateralManager_not: Bytes
  poolCollateralManager_in: [Bytes!]
  poolCollateralManager_not_in: [Bytes!]
  poolCollateralManager_contains: Bytes
  poolCollateralManager_not_contains: Bytes
  poolConfiguratorImpl: Bytes
  poolConfiguratorImpl_not: Bytes
  poolConfiguratorImpl_in: [Bytes!]
  poolConfiguratorImpl_not_in: [Bytes!]
  poolConfiguratorImpl_contains: Bytes
  poolConfiguratorImpl_not_contains: Bytes
  poolImpl: Bytes
  poolImpl_not: Bytes
  poolImpl_in: [Bytes!]
  poolImpl_not_in: [Bytes!]
  poolImpl_contains: Bytes
  poolImpl_not_contains: Bytes
  poolDataProviderImpl: Bytes
  poolDataProviderImpl_not: Bytes
  poolDataProviderImpl_in: [Bytes!]
  poolDataProviderImpl_not_in: [Bytes!]
  poolDataProviderImpl_contains: Bytes
  poolDataProviderImpl_not_contains: Bytes
  poolConfigurator: Bytes
  poolConfigurator_not: Bytes
  poolConfigurator_in: [Bytes!]
  poolConfigurator_not_in: [Bytes!]
  poolConfigurator_contains: Bytes
  poolConfigurator_not_contains: Bytes
  proxyPriceProvider: Bytes
  proxyPriceProvider_not: Bytes
  proxyPriceProvider_in: [Bytes!]
  proxyPriceProvider_not_in: [Bytes!]
  proxyPriceProvider_contains: Bytes
  proxyPriceProvider_not_contains: Bytes
  lastUpdateTimestamp: Int
  lastUpdateTimestamp_not: Int
  lastUpdateTimestamp_gt: Int
  lastUpdateTimestamp_lt: Int
  lastUpdateTimestamp_gte: Int
  lastUpdateTimestamp_lte: Int
  lastUpdateTimestamp_in: [Int!]
  lastUpdateTimestamp_not_in: [Int!]
  bridgeProtocolFee: BigInt
  bridgeProtocolFee_not: BigInt
  bridgeProtocolFee_gt: BigInt
  bridgeProtocolFee_lt: BigInt
  bridgeProtocolFee_gte: BigInt
  bridgeProtocolFee_lte: BigInt
  bridgeProtocolFee_in: [BigInt!]
  bridgeProtocolFee_not_in: [BigInt!]
  flashloanPremiumTotal: BigInt
  flashloanPremiumTotal_not: BigInt
  flashloanPremiumTotal_gt: BigInt
  flashloanPremiumTotal_lt: BigInt
  flashloanPremiumTotal_gte: BigInt
  flashloanPremiumTotal_lte: BigInt
  flashloanPremiumTotal_in: [BigInt!]
  flashloanPremiumTotal_not_in: [BigInt!]
  flashloanPremiumToProtocol: BigInt
  flashloanPremiumToProtocol_not: BigInt
  flashloanPremiumToProtocol_gt: BigInt
  flashloanPremiumToProtocol_lt: BigInt
  flashloanPremiumToProtocol_gte: BigInt
  flashloanPremiumToProtocol_lte: BigInt
  flashloanPremiumToProtocol_in: [BigInt!]
  flashloanPremiumToProtocol_not_in: [BigInt!]
  reserves_: Reserve_filter
  supplyHistory_: Supply_filter
  mintUnbackedHistory_: MintUnbacked_filter
  backUnbackedHistory_: BackUnbacked_filter
  mintedToTreasuryHistory_: MintedToTreasury_filter
  isolationModeTotalDebtUpdatedHistory_: IsolationModeTotalDebtUpdated_filter
  redeemUnderlyingHistory_: RedeemUnderlying_filter
  borrowHistory_: Borrow_filter
  swapHistory_: SwapBorrowRate_filter
  usageAsCollateralHistory_: UsageAsCollateral_filter
  rebalanceStableBorrowRateHistory_: RebalanceStableBorrowRate_filter
  repayHistory_: Repay_filter
  flashLoanHistory_: FlashLoan_filter
  liquidationCallHistory_: LiquidationCall_filter
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  paused: Boolean
  paused_not: Boolean
  paused_in: [Boolean!]
  paused_not_in: [Boolean!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input PriceHistoryItem_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: PriceOracleAsset_filter
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input PriceOracleAsset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  oracle: String
  oracle_not: String
  oracle_gt: String
  oracle_lt: String
  oracle_gte: String
  oracle_lte: String
  oracle_in: [String!]
  oracle_not_in: [String!]
  oracle_contains: String
  oracle_contains_nocase: String
  oracle_not_contains: String
  oracle_not_contains_nocase: String
  oracle_starts_with: String
  oracle_starts_with_nocase: String
  oracle_not_starts_with: String
  oracle_not_starts_with_nocase: String
  oracle_ends_with: String
  oracle_ends_with_nocase: String
  oracle_not_ends_with: String
  oracle_not_ends_with_nocase: String
  oracle_: PriceOracle_filter
  priceInEth: BigInt
  priceInEth_not: BigInt
  priceInEth_gt: BigInt
  priceInEth_lt: BigInt
  priceInEth_gte: BigInt
  priceInEth_lte: BigInt
  priceInEth_in: [BigInt!]
  priceInEth_not_in: [BigInt!]
  priceSource: Bytes
  priceSource_not: Bytes
  priceSource_in: [Bytes!]
  priceSource_not_in: [Bytes!]
  priceSource_contains: Bytes
  priceSource_not_contains: Bytes
  isFallbackRequired: Boolean
  isFallbackRequired_not: Boolean
  isFallbackRequired_in: [Boolean!]
  isFallbackRequired_not_in: [Boolean!]
  type: PriceOracleAssetType
  type_not: PriceOracleAssetType
  type_in: [PriceOracleAssetType!]
  type_not_in: [PriceOracleAssetType!]
  platform: PriceOracleAssetPlatform
  platform_not: PriceOracleAssetPlatform
  platform_in: [PriceOracleAssetPlatform!]
  platform_not_in: [PriceOracleAssetPlatform!]
  dependentAssets: [String!]
  dependentAssets_not: [String!]
  dependentAssets_contains: [String!]
  dependentAssets_contains_nocase: [String!]
  dependentAssets_not_contains: [String!]
  dependentAssets_not_contains_nocase: [String!]
  dependentAssets_: PriceOracleAsset_filter
  lastUpdateTimestamp: Int
  lastUpdateTimestamp_not: Int
  lastUpdateTimestamp_gt: Int
  lastUpdateTimestamp_lt: Int
  lastUpdateTimestamp_gte: Int
  lastUpdateTimestamp_lte: Int
  lastUpdateTimestamp_in: [Int!]
  lastUpdateTimestamp_not_in: [Int!]
  priceHistory_: PriceHistoryItem_filter
  fromChainlinkSourcesRegistry: Boolean
  fromChainlinkSourcesRegistry_not: Boolean
  fromChainlinkSourcesRegistry_in: [Boolean!]
  fromChainlinkSourcesRegistry_not_in: [Boolean!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input PriceOracle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  proxyPriceProvider: Bytes
  proxyPriceProvider_not: Bytes
  proxyPriceProvider_in: [Bytes!]
  proxyPriceProvider_not_in: [Bytes!]
  proxyPriceProvider_contains: Bytes
  proxyPriceProvider_not_contains: Bytes
  usdPriceEth: BigInt
  usdPriceEth_not: BigInt
  usdPriceEth_gt: BigInt
  usdPriceEth_lt: BigInt
  usdPriceEth_gte: BigInt
  usdPriceEth_lte: BigInt
  usdPriceEth_in: [BigInt!]
  usdPriceEth_not_in: [BigInt!]
  usdPriceEthMainSource: Bytes
  usdPriceEthMainSource_not: Bytes
  usdPriceEthMainSource_in: [Bytes!]
  usdPriceEthMainSource_not_in: [Bytes!]
  usdPriceEthMainSource_contains: Bytes
  usdPriceEthMainSource_not_contains: Bytes
  usdPriceEthFallbackRequired: Boolean
  usdPriceEthFallbackRequired_not: Boolean
  usdPriceEthFallbackRequired_in: [Boolean!]
  usdPriceEthFallbackRequired_not_in: [Boolean!]
  usdDependentAssets: [String!]
  usdDependentAssets_not: [String!]
  usdDependentAssets_contains: [String!]
  usdDependentAssets_contains_nocase: [String!]
  usdDependentAssets_not_contains: [String!]
  usdDependentAssets_not_contains_nocase: [String!]
  usdDependentAssets_: PriceOracleAsset_filter
  fallbackPriceOracle: Bytes
  fallbackPriceOracle_not: Bytes
  fallbackPriceOracle_in: [Bytes!]
  fallbackPriceOracle_not_in: [Bytes!]
  fallbackPriceOracle_contains: Bytes
  fallbackPriceOracle_not_contains: Bytes
  tokens_: PriceOracleAsset_filter
  usdPriceEthHistory_: UsdEthPriceHistoryItem_filter
  tokensWithFallback: [String!]
  tokensWithFallback_not: [String!]
  tokensWithFallback_contains: [String!]
  tokensWithFallback_contains_nocase: [String!]
  tokensWithFallback_not_contains: [String!]
  tokensWithFallback_not_contains_nocase: [String!]
  tokensWithFallback_: PriceOracleAsset_filter
  lastUpdateTimestamp: Int
  lastUpdateTimestamp_not: Int
  lastUpdateTimestamp_gt: Int
  lastUpdateTimestamp_lt: Int
  lastUpdateTimestamp_gte: Int
  lastUpdateTimestamp_lte: Int
  lastUpdateTimestamp_in: [Int!]
  lastUpdateTimestamp_not_in: [Int!]
  version: Int
  version_not: Int
  version_gt: Int
  version_lt: Int
  version_gte: Int
  version_lte: Int
  version_in: [Int!]
  version_not_in: [Int!]
  baseCurrency: Bytes
  baseCurrency_not: Bytes
  baseCurrency_in: [Bytes!]
  baseCurrency_not_in: [Bytes!]
  baseCurrency_contains: Bytes
  baseCurrency_not_contains: Bytes
  baseCurrencyUnit: BigInt
  baseCurrencyUnit_not: BigInt
  baseCurrencyUnit_gt: BigInt
  baseCurrencyUnit_lt: BigInt
  baseCurrencyUnit_gte: BigInt
  baseCurrencyUnit_lte: BigInt
  baseCurrencyUnit_in: [BigInt!]
  baseCurrencyUnit_not_in: [BigInt!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input Protocol_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pools_: Pool_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input RebalanceStableBorrowRate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  action: Action
  action_not: Action
  action_in: [Action!]
  action_not_in: [Action!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  borrowRateFrom: BigInt
  borrowRateFrom_not: BigInt
  borrowRateFrom_gt: BigInt
  borrowRateFrom_lt: BigInt
  borrowRateFrom_gte: BigInt
  borrowRateFrom_lte: BigInt
  borrowRateFrom_in: [BigInt!]
  borrowRateFrom_not_in: [BigInt!]
  borrowRateTo: BigInt
  borrowRateTo_not: BigInt
  borrowRateTo_gt: BigInt
  borrowRateTo_lt: BigInt
  borrowRateTo_gte: BigInt
  borrowRateTo_lte: BigInt
  borrowRateTo_in: [BigInt!]
  borrowRateTo_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input RedeemUnderlying_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  action: Action
  action_not: Action
  action_in: [Action!]
  action_not_in: [Action!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  to: String
  to_not: String
  to_gt: String
  to_lt: String
  to_gte: String
  to_lte: String
  to_in: [String!]
  to_not_in: [String!]
  to_contains: String
  to_contains_nocase: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_: User_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  assetPriceUSD: BigDecimal
  assetPriceUSD_not: BigDecimal
  assetPriceUSD_gt: BigDecimal
  assetPriceUSD_lt: BigDecimal
  assetPriceUSD_gte: BigDecimal
  assetPriceUSD_lte: BigDecimal
  assetPriceUSD_in: [BigDecimal!]
  assetPriceUSD_not_in: [BigDecimal!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input Referrer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  supplies_: Supply_filter
  borrows_: Borrow_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input Repay_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  action: Action
  action_not: Action
  action_in: [Action!]
  action_not_in: [Action!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  repayer: String
  repayer_not: String
  repayer_gt: String
  repayer_lt: String
  repayer_gte: String
  repayer_lte: String
  repayer_in: [String!]
  repayer_not_in: [String!]
  repayer_contains: String
  repayer_contains_nocase: String
  repayer_not_contains: String
  repayer_not_contains_nocase: String
  repayer_starts_with: String
  repayer_starts_with_nocase: String
  repayer_not_starts_with: String
  repayer_not_starts_with_nocase: String
  repayer_ends_with: String
  repayer_ends_with_nocase: String
  repayer_not_ends_with: String
  repayer_not_ends_with_nocase: String
  repayer_: User_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  useATokens: Boolean
  useATokens_not: Boolean
  useATokens_in: [Boolean!]
  useATokens_not_in: [Boolean!]
  assetPriceUSD: BigDecimal
  assetPriceUSD_not: BigDecimal
  assetPriceUSD_gt: BigDecimal
  assetPriceUSD_lt: BigDecimal
  assetPriceUSD_gte: BigDecimal
  assetPriceUSD_lte: BigDecimal
  assetPriceUSD_in: [BigDecimal!]
  assetPriceUSD_not_in: [BigDecimal!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input ReserveConfigurationHistoryItem_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  usageAsCollateralEnabled: Boolean
  usageAsCollateralEnabled_not: Boolean
  usageAsCollateralEnabled_in: [Boolean!]
  usageAsCollateralEnabled_not_in: [Boolean!]
  borrowingEnabled: Boolean
  borrowingEnabled_not: Boolean
  borrowingEnabled_in: [Boolean!]
  borrowingEnabled_not_in: [Boolean!]
  stableBorrowRateEnabled: Boolean
  stableBorrowRateEnabled_not: Boolean
  stableBorrowRateEnabled_in: [Boolean!]
  stableBorrowRateEnabled_not_in: [Boolean!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  isFrozen: Boolean
  isFrozen_not: Boolean
  isFrozen_in: [Boolean!]
  isFrozen_not_in: [Boolean!]
  reserveInterestRateStrategy: Bytes
  reserveInterestRateStrategy_not: Bytes
  reserveInterestRateStrategy_in: [Bytes!]
  reserveInterestRateStrategy_not_in: [Bytes!]
  reserveInterestRateStrategy_contains: Bytes
  reserveInterestRateStrategy_not_contains: Bytes
  baseLTVasCollateral: BigInt
  baseLTVasCollateral_not: BigInt
  baseLTVasCollateral_gt: BigInt
  baseLTVasCollateral_lt: BigInt
  baseLTVasCollateral_gte: BigInt
  baseLTVasCollateral_lte: BigInt
  baseLTVasCollateral_in: [BigInt!]
  baseLTVasCollateral_not_in: [BigInt!]
  reserveLiquidationThreshold: BigInt
  reserveLiquidationThreshold_not: BigInt
  reserveLiquidationThreshold_gt: BigInt
  reserveLiquidationThreshold_lt: BigInt
  reserveLiquidationThreshold_gte: BigInt
  reserveLiquidationThreshold_lte: BigInt
  reserveLiquidationThreshold_in: [BigInt!]
  reserveLiquidationThreshold_not_in: [BigInt!]
  reserveLiquidationBonus: BigInt
  reserveLiquidationBonus_not: BigInt
  reserveLiquidationBonus_gt: BigInt
  reserveLiquidationBonus_lt: BigInt
  reserveLiquidationBonus_gte: BigInt
  reserveLiquidationBonus_lte: BigInt
  reserveLiquidationBonus_in: [BigInt!]
  reserveLiquidationBonus_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input ReserveParamsHistoryItem_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  variableBorrowRate: BigInt
  variableBorrowRate_not: BigInt
  variableBorrowRate_gt: BigInt
  variableBorrowRate_lt: BigInt
  variableBorrowRate_gte: BigInt
  variableBorrowRate_lte: BigInt
  variableBorrowRate_in: [BigInt!]
  variableBorrowRate_not_in: [BigInt!]
  variableBorrowIndex: BigInt
  variableBorrowIndex_not: BigInt
  variableBorrowIndex_gt: BigInt
  variableBorrowIndex_lt: BigInt
  variableBorrowIndex_gte: BigInt
  variableBorrowIndex_lte: BigInt
  variableBorrowIndex_in: [BigInt!]
  variableBorrowIndex_not_in: [BigInt!]
  utilizationRate: BigDecimal
  utilizationRate_not: BigDecimal
  utilizationRate_gt: BigDecimal
  utilizationRate_lt: BigDecimal
  utilizationRate_gte: BigDecimal
  utilizationRate_lte: BigDecimal
  utilizationRate_in: [BigDecimal!]
  utilizationRate_not_in: [BigDecimal!]
  stableBorrowRate: BigInt
  stableBorrowRate_not: BigInt
  stableBorrowRate_gt: BigInt
  stableBorrowRate_lt: BigInt
  stableBorrowRate_gte: BigInt
  stableBorrowRate_lte: BigInt
  stableBorrowRate_in: [BigInt!]
  stableBorrowRate_not_in: [BigInt!]
  averageStableBorrowRate: BigInt
  averageStableBorrowRate_not: BigInt
  averageStableBorrowRate_gt: BigInt
  averageStableBorrowRate_lt: BigInt
  averageStableBorrowRate_gte: BigInt
  averageStableBorrowRate_lte: BigInt
  averageStableBorrowRate_in: [BigInt!]
  averageStableBorrowRate_not_in: [BigInt!]
  liquidityIndex: BigInt
  liquidityIndex_not: BigInt
  liquidityIndex_gt: BigInt
  liquidityIndex_lt: BigInt
  liquidityIndex_gte: BigInt
  liquidityIndex_lte: BigInt
  liquidityIndex_in: [BigInt!]
  liquidityIndex_not_in: [BigInt!]
  liquidityRate: BigInt
  liquidityRate_not: BigInt
  liquidityRate_gt: BigInt
  liquidityRate_lt: BigInt
  liquidityRate_gte: BigInt
  liquidityRate_lte: BigInt
  liquidityRate_in: [BigInt!]
  liquidityRate_not_in: [BigInt!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalATokenSupply: BigInt
  totalATokenSupply_not: BigInt
  totalATokenSupply_gt: BigInt
  totalATokenSupply_lt: BigInt
  totalATokenSupply_gte: BigInt
  totalATokenSupply_lte: BigInt
  totalATokenSupply_in: [BigInt!]
  totalATokenSupply_not_in: [BigInt!]
  totalLiquidityAsCollateral: BigInt
  totalLiquidityAsCollateral_not: BigInt
  totalLiquidityAsCollateral_gt: BigInt
  totalLiquidityAsCollateral_lt: BigInt
  totalLiquidityAsCollateral_gte: BigInt
  totalLiquidityAsCollateral_lte: BigInt
  totalLiquidityAsCollateral_in: [BigInt!]
  totalLiquidityAsCollateral_not_in: [BigInt!]
  availableLiquidity: BigInt
  availableLiquidity_not: BigInt
  availableLiquidity_gt: BigInt
  availableLiquidity_lt: BigInt
  availableLiquidity_gte: BigInt
  availableLiquidity_lte: BigInt
  availableLiquidity_in: [BigInt!]
  availableLiquidity_not_in: [BigInt!]
  priceInEth: BigInt
  priceInEth_not: BigInt
  priceInEth_gt: BigInt
  priceInEth_lt: BigInt
  priceInEth_gte: BigInt
  priceInEth_lte: BigInt
  priceInEth_in: [BigInt!]
  priceInEth_not_in: [BigInt!]
  priceInUsd: BigDecimal
  priceInUsd_not: BigDecimal
  priceInUsd_gt: BigDecimal
  priceInUsd_lt: BigDecimal
  priceInUsd_gte: BigDecimal
  priceInUsd_lte: BigDecimal
  priceInUsd_in: [BigDecimal!]
  priceInUsd_not_in: [BigDecimal!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  accruedToTreasury: BigInt
  accruedToTreasury_not: BigInt
  accruedToTreasury_gt: BigInt
  accruedToTreasury_lt: BigInt
  accruedToTreasury_gte: BigInt
  accruedToTreasury_lte: BigInt
  accruedToTreasury_in: [BigInt!]
  accruedToTreasury_not_in: [BigInt!]
  totalScaledVariableDebt: BigInt
  totalScaledVariableDebt_not: BigInt
  totalScaledVariableDebt_gt: BigInt
  totalScaledVariableDebt_lt: BigInt
  totalScaledVariableDebt_gte: BigInt
  totalScaledVariableDebt_lte: BigInt
  totalScaledVariableDebt_in: [BigInt!]
  totalScaledVariableDebt_not_in: [BigInt!]
  totalCurrentVariableDebt: BigInt
  totalCurrentVariableDebt_not: BigInt
  totalCurrentVariableDebt_gt: BigInt
  totalCurrentVariableDebt_lt: BigInt
  totalCurrentVariableDebt_gte: BigInt
  totalCurrentVariableDebt_lte: BigInt
  totalCurrentVariableDebt_in: [BigInt!]
  totalCurrentVariableDebt_not_in: [BigInt!]
  totalPrincipalStableDebt: BigInt
  totalPrincipalStableDebt_not: BigInt
  totalPrincipalStableDebt_gt: BigInt
  totalPrincipalStableDebt_lt: BigInt
  totalPrincipalStableDebt_gte: BigInt
  totalPrincipalStableDebt_lte: BigInt
  totalPrincipalStableDebt_in: [BigInt!]
  totalPrincipalStableDebt_not_in: [BigInt!]
  lifetimePrincipalStableDebt: BigInt
  lifetimePrincipalStableDebt_not: BigInt
  lifetimePrincipalStableDebt_gt: BigInt
  lifetimePrincipalStableDebt_lt: BigInt
  lifetimePrincipalStableDebt_gte: BigInt
  lifetimePrincipalStableDebt_lte: BigInt
  lifetimePrincipalStableDebt_in: [BigInt!]
  lifetimePrincipalStableDebt_not_in: [BigInt!]
  lifetimeScaledVariableDebt: BigInt
  lifetimeScaledVariableDebt_not: BigInt
  lifetimeScaledVariableDebt_gt: BigInt
  lifetimeScaledVariableDebt_lt: BigInt
  lifetimeScaledVariableDebt_gte: BigInt
  lifetimeScaledVariableDebt_lte: BigInt
  lifetimeScaledVariableDebt_in: [BigInt!]
  lifetimeScaledVariableDebt_not_in: [BigInt!]
  lifetimeCurrentVariableDebt: BigInt
  lifetimeCurrentVariableDebt_not: BigInt
  lifetimeCurrentVariableDebt_gt: BigInt
  lifetimeCurrentVariableDebt_lt: BigInt
  lifetimeCurrentVariableDebt_gte: BigInt
  lifetimeCurrentVariableDebt_lte: BigInt
  lifetimeCurrentVariableDebt_in: [BigInt!]
  lifetimeCurrentVariableDebt_not_in: [BigInt!]
  lifetimeLiquidity: BigInt
  lifetimeLiquidity_not: BigInt
  lifetimeLiquidity_gt: BigInt
  lifetimeLiquidity_lt: BigInt
  lifetimeLiquidity_gte: BigInt
  lifetimeLiquidity_lte: BigInt
  lifetimeLiquidity_in: [BigInt!]
  lifetimeLiquidity_not_in: [BigInt!]
  lifetimeRepayments: BigInt
  lifetimeRepayments_not: BigInt
  lifetimeRepayments_gt: BigInt
  lifetimeRepayments_lt: BigInt
  lifetimeRepayments_gte: BigInt
  lifetimeRepayments_lte: BigInt
  lifetimeRepayments_in: [BigInt!]
  lifetimeRepayments_not_in: [BigInt!]
  lifetimeWithdrawals: BigInt
  lifetimeWithdrawals_not: BigInt
  lifetimeWithdrawals_gt: BigInt
  lifetimeWithdrawals_lt: BigInt
  lifetimeWithdrawals_gte: BigInt
  lifetimeWithdrawals_lte: BigInt
  lifetimeWithdrawals_in: [BigInt!]
  lifetimeWithdrawals_not_in: [BigInt!]
  lifetimeBorrows: BigInt
  lifetimeBorrows_not: BigInt
  lifetimeBorrows_gt: BigInt
  lifetimeBorrows_lt: BigInt
  lifetimeBorrows_gte: BigInt
  lifetimeBorrows_lte: BigInt
  lifetimeBorrows_in: [BigInt!]
  lifetimeBorrows_not_in: [BigInt!]
  lifetimeLiquidated: BigInt
  lifetimeLiquidated_not: BigInt
  lifetimeLiquidated_gt: BigInt
  lifetimeLiquidated_lt: BigInt
  lifetimeLiquidated_gte: BigInt
  lifetimeLiquidated_lte: BigInt
  lifetimeLiquidated_in: [BigInt!]
  lifetimeLiquidated_not_in: [BigInt!]
  lifetimeFlashLoans: BigInt
  lifetimeFlashLoans_not: BigInt
  lifetimeFlashLoans_gt: BigInt
  lifetimeFlashLoans_lt: BigInt
  lifetimeFlashLoans_gte: BigInt
  lifetimeFlashLoans_lte: BigInt
  lifetimeFlashLoans_in: [BigInt!]
  lifetimeFlashLoans_not_in: [BigInt!]
  lifetimeFlashLoanPremium: BigInt
  lifetimeFlashLoanPremium_not: BigInt
  lifetimeFlashLoanPremium_gt: BigInt
  lifetimeFlashLoanPremium_lt: BigInt
  lifetimeFlashLoanPremium_gte: BigInt
  lifetimeFlashLoanPremium_lte: BigInt
  lifetimeFlashLoanPremium_in: [BigInt!]
  lifetimeFlashLoanPremium_not_in: [BigInt!]
  lifetimeFlashLoanLPPremium: BigInt
  lifetimeFlashLoanLPPremium_not: BigInt
  lifetimeFlashLoanLPPremium_gt: BigInt
  lifetimeFlashLoanLPPremium_lt: BigInt
  lifetimeFlashLoanLPPremium_gte: BigInt
  lifetimeFlashLoanLPPremium_lte: BigInt
  lifetimeFlashLoanLPPremium_in: [BigInt!]
  lifetimeFlashLoanLPPremium_not_in: [BigInt!]
  lifetimeFlashLoanProtocolPremium: BigInt
  lifetimeFlashLoanProtocolPremium_not: BigInt
  lifetimeFlashLoanProtocolPremium_gt: BigInt
  lifetimeFlashLoanProtocolPremium_lt: BigInt
  lifetimeFlashLoanProtocolPremium_gte: BigInt
  lifetimeFlashLoanProtocolPremium_lte: BigInt
  lifetimeFlashLoanProtocolPremium_in: [BigInt!]
  lifetimeFlashLoanProtocolPremium_not_in: [BigInt!]
  lifetimeReserveFactorAccrued: BigInt
  lifetimeReserveFactorAccrued_not: BigInt
  lifetimeReserveFactorAccrued_gt: BigInt
  lifetimeReserveFactorAccrued_lt: BigInt
  lifetimeReserveFactorAccrued_gte: BigInt
  lifetimeReserveFactorAccrued_lte: BigInt
  lifetimeReserveFactorAccrued_in: [BigInt!]
  lifetimeReserveFactorAccrued_not_in: [BigInt!]
  lifetimePortalLPFee: BigInt
  lifetimePortalLPFee_not: BigInt
  lifetimePortalLPFee_gt: BigInt
  lifetimePortalLPFee_lt: BigInt
  lifetimePortalLPFee_gte: BigInt
  lifetimePortalLPFee_lte: BigInt
  lifetimePortalLPFee_in: [BigInt!]
  lifetimePortalLPFee_not_in: [BigInt!]
  lifetimePortalProtocolFee: BigInt
  lifetimePortalProtocolFee_not: BigInt
  lifetimePortalProtocolFee_gt: BigInt
  lifetimePortalProtocolFee_lt: BigInt
  lifetimePortalProtocolFee_gte: BigInt
  lifetimePortalProtocolFee_lte: BigInt
  lifetimePortalProtocolFee_in: [BigInt!]
  lifetimePortalProtocolFee_not_in: [BigInt!]
  lifetimeSuppliersInterestEarned: BigInt
  lifetimeSuppliersInterestEarned_not: BigInt
  lifetimeSuppliersInterestEarned_gt: BigInt
  lifetimeSuppliersInterestEarned_lt: BigInt
  lifetimeSuppliersInterestEarned_gte: BigInt
  lifetimeSuppliersInterestEarned_lte: BigInt
  lifetimeSuppliersInterestEarned_in: [BigInt!]
  lifetimeSuppliersInterestEarned_not_in: [BigInt!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input Reserve_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  underlyingAsset: Bytes
  underlyingAsset_not: Bytes
  underlyingAsset_in: [Bytes!]
  underlyingAsset_not_in: [Bytes!]
  underlyingAsset_contains: Bytes
  underlyingAsset_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  usageAsCollateralEnabled: Boolean
  usageAsCollateralEnabled_not: Boolean
  usageAsCollateralEnabled_in: [Boolean!]
  usageAsCollateralEnabled_not_in: [Boolean!]
  borrowingEnabled: Boolean
  borrowingEnabled_not: Boolean
  borrowingEnabled_in: [Boolean!]
  borrowingEnabled_not_in: [Boolean!]
  stableBorrowRateEnabled: Boolean
  stableBorrowRateEnabled_not: Boolean
  stableBorrowRateEnabled_in: [Boolean!]
  stableBorrowRateEnabled_not_in: [Boolean!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  isFrozen: Boolean
  isFrozen_not: Boolean
  isFrozen_in: [Boolean!]
  isFrozen_not_in: [Boolean!]
  price: String
  price_not: String
  price_gt: String
  price_lt: String
  price_gte: String
  price_lte: String
  price_in: [String!]
  price_not_in: [String!]
  price_contains: String
  price_contains_nocase: String
  price_not_contains: String
  price_not_contains_nocase: String
  price_starts_with: String
  price_starts_with_nocase: String
  price_not_starts_with: String
  price_not_starts_with_nocase: String
  price_ends_with: String
  price_ends_with_nocase: String
  price_not_ends_with: String
  price_not_ends_with_nocase: String
  price_: PriceOracleAsset_filter
  reserveInterestRateStrategy: Bytes
  reserveInterestRateStrategy_not: Bytes
  reserveInterestRateStrategy_in: [Bytes!]
  reserveInterestRateStrategy_not_in: [Bytes!]
  reserveInterestRateStrategy_contains: Bytes
  reserveInterestRateStrategy_not_contains: Bytes
  optimalUtilisationRate: BigInt
  optimalUtilisationRate_not: BigInt
  optimalUtilisationRate_gt: BigInt
  optimalUtilisationRate_lt: BigInt
  optimalUtilisationRate_gte: BigInt
  optimalUtilisationRate_lte: BigInt
  optimalUtilisationRate_in: [BigInt!]
  optimalUtilisationRate_not_in: [BigInt!]
  variableRateSlope1: BigInt
  variableRateSlope1_not: BigInt
  variableRateSlope1_gt: BigInt
  variableRateSlope1_lt: BigInt
  variableRateSlope1_gte: BigInt
  variableRateSlope1_lte: BigInt
  variableRateSlope1_in: [BigInt!]
  variableRateSlope1_not_in: [BigInt!]
  variableRateSlope2: BigInt
  variableRateSlope2_not: BigInt
  variableRateSlope2_gt: BigInt
  variableRateSlope2_lt: BigInt
  variableRateSlope2_gte: BigInt
  variableRateSlope2_lte: BigInt
  variableRateSlope2_in: [BigInt!]
  variableRateSlope2_not_in: [BigInt!]
  stableRateSlope1: BigInt
  stableRateSlope1_not: BigInt
  stableRateSlope1_gt: BigInt
  stableRateSlope1_lt: BigInt
  stableRateSlope1_gte: BigInt
  stableRateSlope1_lte: BigInt
  stableRateSlope1_in: [BigInt!]
  stableRateSlope1_not_in: [BigInt!]
  stableRateSlope2: BigInt
  stableRateSlope2_not: BigInt
  stableRateSlope2_gt: BigInt
  stableRateSlope2_lt: BigInt
  stableRateSlope2_gte: BigInt
  stableRateSlope2_lte: BigInt
  stableRateSlope2_in: [BigInt!]
  stableRateSlope2_not_in: [BigInt!]
  baseVariableBorrowRate: BigInt
  baseVariableBorrowRate_not: BigInt
  baseVariableBorrowRate_gt: BigInt
  baseVariableBorrowRate_lt: BigInt
  baseVariableBorrowRate_gte: BigInt
  baseVariableBorrowRate_lte: BigInt
  baseVariableBorrowRate_in: [BigInt!]
  baseVariableBorrowRate_not_in: [BigInt!]
  baseLTVasCollateral: BigInt
  baseLTVasCollateral_not: BigInt
  baseLTVasCollateral_gt: BigInt
  baseLTVasCollateral_lt: BigInt
  baseLTVasCollateral_gte: BigInt
  baseLTVasCollateral_lte: BigInt
  baseLTVasCollateral_in: [BigInt!]
  baseLTVasCollateral_not_in: [BigInt!]
  reserveLiquidationThreshold: BigInt
  reserveLiquidationThreshold_not: BigInt
  reserveLiquidationThreshold_gt: BigInt
  reserveLiquidationThreshold_lt: BigInt
  reserveLiquidationThreshold_gte: BigInt
  reserveLiquidationThreshold_lte: BigInt
  reserveLiquidationThreshold_in: [BigInt!]
  reserveLiquidationThreshold_not_in: [BigInt!]
  reserveLiquidationBonus: BigInt
  reserveLiquidationBonus_not: BigInt
  reserveLiquidationBonus_gt: BigInt
  reserveLiquidationBonus_lt: BigInt
  reserveLiquidationBonus_gte: BigInt
  reserveLiquidationBonus_lte: BigInt
  reserveLiquidationBonus_in: [BigInt!]
  reserveLiquidationBonus_not_in: [BigInt!]
  utilizationRate: BigDecimal
  utilizationRate_not: BigDecimal
  utilizationRate_gt: BigDecimal
  utilizationRate_lt: BigDecimal
  utilizationRate_gte: BigDecimal
  utilizationRate_lte: BigDecimal
  utilizationRate_in: [BigDecimal!]
  utilizationRate_not_in: [BigDecimal!]
  totalLiquidity: BigInt
  totalLiquidity_not: BigInt
  totalLiquidity_gt: BigInt
  totalLiquidity_lt: BigInt
  totalLiquidity_gte: BigInt
  totalLiquidity_lte: BigInt
  totalLiquidity_in: [BigInt!]
  totalLiquidity_not_in: [BigInt!]
  totalATokenSupply: BigInt
  totalATokenSupply_not: BigInt
  totalATokenSupply_gt: BigInt
  totalATokenSupply_lt: BigInt
  totalATokenSupply_gte: BigInt
  totalATokenSupply_lte: BigInt
  totalATokenSupply_in: [BigInt!]
  totalATokenSupply_not_in: [BigInt!]
  totalLiquidityAsCollateral: BigInt
  totalLiquidityAsCollateral_not: BigInt
  totalLiquidityAsCollateral_gt: BigInt
  totalLiquidityAsCollateral_lt: BigInt
  totalLiquidityAsCollateral_gte: BigInt
  totalLiquidityAsCollateral_lte: BigInt
  totalLiquidityAsCollateral_in: [BigInt!]
  totalLiquidityAsCollateral_not_in: [BigInt!]
  availableLiquidity: BigInt
  availableLiquidity_not: BigInt
  availableLiquidity_gt: BigInt
  availableLiquidity_lt: BigInt
  availableLiquidity_gte: BigInt
  availableLiquidity_lte: BigInt
  availableLiquidity_in: [BigInt!]
  availableLiquidity_not_in: [BigInt!]
  totalPrincipalStableDebt: BigInt
  totalPrincipalStableDebt_not: BigInt
  totalPrincipalStableDebt_gt: BigInt
  totalPrincipalStableDebt_lt: BigInt
  totalPrincipalStableDebt_gte: BigInt
  totalPrincipalStableDebt_lte: BigInt
  totalPrincipalStableDebt_in: [BigInt!]
  totalPrincipalStableDebt_not_in: [BigInt!]
  totalScaledVariableDebt: BigInt
  totalScaledVariableDebt_not: BigInt
  totalScaledVariableDebt_gt: BigInt
  totalScaledVariableDebt_lt: BigInt
  totalScaledVariableDebt_gte: BigInt
  totalScaledVariableDebt_lte: BigInt
  totalScaledVariableDebt_in: [BigInt!]
  totalScaledVariableDebt_not_in: [BigInt!]
  totalCurrentVariableDebt: BigInt
  totalCurrentVariableDebt_not: BigInt
  totalCurrentVariableDebt_gt: BigInt
  totalCurrentVariableDebt_lt: BigInt
  totalCurrentVariableDebt_gte: BigInt
  totalCurrentVariableDebt_lte: BigInt
  totalCurrentVariableDebt_in: [BigInt!]
  totalCurrentVariableDebt_not_in: [BigInt!]
  totalSupplies: BigInt
  totalSupplies_not: BigInt
  totalSupplies_gt: BigInt
  totalSupplies_lt: BigInt
  totalSupplies_gte: BigInt
  totalSupplies_lte: BigInt
  totalSupplies_in: [BigInt!]
  totalSupplies_not_in: [BigInt!]
  liquidityRate: BigInt
  liquidityRate_not: BigInt
  liquidityRate_gt: BigInt
  liquidityRate_lt: BigInt
  liquidityRate_gte: BigInt
  liquidityRate_lte: BigInt
  liquidityRate_in: [BigInt!]
  liquidityRate_not_in: [BigInt!]
  accruedToTreasury: BigInt
  accruedToTreasury_not: BigInt
  accruedToTreasury_gt: BigInt
  accruedToTreasury_lt: BigInt
  accruedToTreasury_gte: BigInt
  accruedToTreasury_lte: BigInt
  accruedToTreasury_in: [BigInt!]
  accruedToTreasury_not_in: [BigInt!]
  averageStableRate: BigInt
  averageStableRate_not: BigInt
  averageStableRate_gt: BigInt
  averageStableRate_lt: BigInt
  averageStableRate_gte: BigInt
  averageStableRate_lte: BigInt
  averageStableRate_in: [BigInt!]
  averageStableRate_not_in: [BigInt!]
  variableBorrowRate: BigInt
  variableBorrowRate_not: BigInt
  variableBorrowRate_gt: BigInt
  variableBorrowRate_lt: BigInt
  variableBorrowRate_gte: BigInt
  variableBorrowRate_lte: BigInt
  variableBorrowRate_in: [BigInt!]
  variableBorrowRate_not_in: [BigInt!]
  stableBorrowRate: BigInt
  stableBorrowRate_not: BigInt
  stableBorrowRate_gt: BigInt
  stableBorrowRate_lt: BigInt
  stableBorrowRate_gte: BigInt
  stableBorrowRate_lte: BigInt
  stableBorrowRate_in: [BigInt!]
  stableBorrowRate_not_in: [BigInt!]
  liquidityIndex: BigInt
  liquidityIndex_not: BigInt
  liquidityIndex_gt: BigInt
  liquidityIndex_lt: BigInt
  liquidityIndex_gte: BigInt
  liquidityIndex_lte: BigInt
  liquidityIndex_in: [BigInt!]
  liquidityIndex_not_in: [BigInt!]
  variableBorrowIndex: BigInt
  variableBorrowIndex_not: BigInt
  variableBorrowIndex_gt: BigInt
  variableBorrowIndex_lt: BigInt
  variableBorrowIndex_gte: BigInt
  variableBorrowIndex_lte: BigInt
  variableBorrowIndex_in: [BigInt!]
  variableBorrowIndex_not_in: [BigInt!]
  aToken: String
  aToken_not: String
  aToken_gt: String
  aToken_lt: String
  aToken_gte: String
  aToken_lte: String
  aToken_in: [String!]
  aToken_not_in: [String!]
  aToken_contains: String
  aToken_contains_nocase: String
  aToken_not_contains: String
  aToken_not_contains_nocase: String
  aToken_starts_with: String
  aToken_starts_with_nocase: String
  aToken_not_starts_with: String
  aToken_not_starts_with_nocase: String
  aToken_ends_with: String
  aToken_ends_with_nocase: String
  aToken_not_ends_with: String
  aToken_not_ends_with_nocase: String
  aToken_: SubToken_filter
  vToken: String
  vToken_not: String
  vToken_gt: String
  vToken_lt: String
  vToken_gte: String
  vToken_lte: String
  vToken_in: [String!]
  vToken_not_in: [String!]
  vToken_contains: String
  vToken_contains_nocase: String
  vToken_not_contains: String
  vToken_not_contains_nocase: String
  vToken_starts_with: String
  vToken_starts_with_nocase: String
  vToken_not_starts_with: String
  vToken_not_starts_with_nocase: String
  vToken_ends_with: String
  vToken_ends_with_nocase: String
  vToken_not_ends_with: String
  vToken_not_ends_with_nocase: String
  vToken_: SubToken_filter
  sToken: String
  sToken_not: String
  sToken_gt: String
  sToken_lt: String
  sToken_gte: String
  sToken_lte: String
  sToken_in: [String!]
  sToken_not_in: [String!]
  sToken_contains: String
  sToken_contains_nocase: String
  sToken_not_contains: String
  sToken_not_contains_nocase: String
  sToken_starts_with: String
  sToken_starts_with_nocase: String
  sToken_not_starts_with: String
  sToken_not_starts_with_nocase: String
  sToken_ends_with: String
  sToken_ends_with_nocase: String
  sToken_not_ends_with: String
  sToken_not_ends_with_nocase: String
  sToken_: SubToken_filter
  reserveFactor: BigInt
  reserveFactor_not: BigInt
  reserveFactor_gt: BigInt
  reserveFactor_lt: BigInt
  reserveFactor_gte: BigInt
  reserveFactor_lte: BigInt
  reserveFactor_in: [BigInt!]
  reserveFactor_not_in: [BigInt!]
  lastUpdateTimestamp: Int
  lastUpdateTimestamp_not: Int
  lastUpdateTimestamp_gt: Int
  lastUpdateTimestamp_lt: Int
  lastUpdateTimestamp_gte: Int
  lastUpdateTimestamp_lte: Int
  lastUpdateTimestamp_in: [Int!]
  lastUpdateTimestamp_not_in: [Int!]
  stableDebtLastUpdateTimestamp: Int
  stableDebtLastUpdateTimestamp_not: Int
  stableDebtLastUpdateTimestamp_gt: Int
  stableDebtLastUpdateTimestamp_lt: Int
  stableDebtLastUpdateTimestamp_gte: Int
  stableDebtLastUpdateTimestamp_lte: Int
  stableDebtLastUpdateTimestamp_in: [Int!]
  stableDebtLastUpdateTimestamp_not_in: [Int!]
  isPaused: Boolean
  isPaused_not: Boolean
  isPaused_in: [Boolean!]
  isPaused_not_in: [Boolean!]
  isDropped: Boolean
  isDropped_not: Boolean
  isDropped_in: [Boolean!]
  isDropped_not_in: [Boolean!]
  borrowCap: BigInt
  borrowCap_not: BigInt
  borrowCap_gt: BigInt
  borrowCap_lt: BigInt
  borrowCap_gte: BigInt
  borrowCap_lte: BigInt
  borrowCap_in: [BigInt!]
  borrowCap_not_in: [BigInt!]
  supplyCap: BigInt
  supplyCap_not: BigInt
  supplyCap_gt: BigInt
  supplyCap_lt: BigInt
  supplyCap_gte: BigInt
  supplyCap_lte: BigInt
  supplyCap_in: [BigInt!]
  supplyCap_not_in: [BigInt!]
  debtCeiling: BigInt
  debtCeiling_not: BigInt
  debtCeiling_gt: BigInt
  debtCeiling_lt: BigInt
  debtCeiling_gte: BigInt
  debtCeiling_lte: BigInt
  debtCeiling_in: [BigInt!]
  debtCeiling_not_in: [BigInt!]
  unbackedMintCap: BigInt
  unbackedMintCap_not: BigInt
  unbackedMintCap_gt: BigInt
  unbackedMintCap_lt: BigInt
  unbackedMintCap_gte: BigInt
  unbackedMintCap_lte: BigInt
  unbackedMintCap_in: [BigInt!]
  unbackedMintCap_not_in: [BigInt!]
  liquidationProtocolFee: BigInt
  liquidationProtocolFee_not: BigInt
  liquidationProtocolFee_gt: BigInt
  liquidationProtocolFee_lt: BigInt
  liquidationProtocolFee_gte: BigInt
  liquidationProtocolFee_lte: BigInt
  liquidationProtocolFee_in: [BigInt!]
  liquidationProtocolFee_not_in: [BigInt!]
  borrowableInIsolation: Boolean
  borrowableInIsolation_not: Boolean
  borrowableInIsolation_in: [Boolean!]
  borrowableInIsolation_not_in: [Boolean!]
  eMode: String
  eMode_not: String
  eMode_gt: String
  eMode_lt: String
  eMode_gte: String
  eMode_lte: String
  eMode_in: [String!]
  eMode_not_in: [String!]
  eMode_contains: String
  eMode_contains_nocase: String
  eMode_not_contains: String
  eMode_not_contains_nocase: String
  eMode_starts_with: String
  eMode_starts_with_nocase: String
  eMode_not_starts_with: String
  eMode_not_starts_with_nocase: String
  eMode_ends_with: String
  eMode_ends_with_nocase: String
  eMode_not_ends_with: String
  eMode_not_ends_with_nocase: String
  eMode_: EModeCategory_filter
  siloedBorrowing: Boolean
  siloedBorrowing_not: Boolean
  siloedBorrowing_in: [Boolean!]
  siloedBorrowing_not_in: [Boolean!]
  lifetimeLiquidity: BigInt
  lifetimeLiquidity_not: BigInt
  lifetimeLiquidity_gt: BigInt
  lifetimeLiquidity_lt: BigInt
  lifetimeLiquidity_gte: BigInt
  lifetimeLiquidity_lte: BigInt
  lifetimeLiquidity_in: [BigInt!]
  lifetimeLiquidity_not_in: [BigInt!]
  lifetimePrincipalStableDebt: BigInt
  lifetimePrincipalStableDebt_not: BigInt
  lifetimePrincipalStableDebt_gt: BigInt
  lifetimePrincipalStableDebt_lt: BigInt
  lifetimePrincipalStableDebt_gte: BigInt
  lifetimePrincipalStableDebt_lte: BigInt
  lifetimePrincipalStableDebt_in: [BigInt!]
  lifetimePrincipalStableDebt_not_in: [BigInt!]
  lifetimeScaledVariableDebt: BigInt
  lifetimeScaledVariableDebt_not: BigInt
  lifetimeScaledVariableDebt_gt: BigInt
  lifetimeScaledVariableDebt_lt: BigInt
  lifetimeScaledVariableDebt_gte: BigInt
  lifetimeScaledVariableDebt_lte: BigInt
  lifetimeScaledVariableDebt_in: [BigInt!]
  lifetimeScaledVariableDebt_not_in: [BigInt!]
  lifetimeCurrentVariableDebt: BigInt
  lifetimeCurrentVariableDebt_not: BigInt
  lifetimeCurrentVariableDebt_gt: BigInt
  lifetimeCurrentVariableDebt_lt: BigInt
  lifetimeCurrentVariableDebt_gte: BigInt
  lifetimeCurrentVariableDebt_lte: BigInt
  lifetimeCurrentVariableDebt_in: [BigInt!]
  lifetimeCurrentVariableDebt_not_in: [BigInt!]
  lifetimeRepayments: BigInt
  lifetimeRepayments_not: BigInt
  lifetimeRepayments_gt: BigInt
  lifetimeRepayments_lt: BigInt
  lifetimeRepayments_gte: BigInt
  lifetimeRepayments_lte: BigInt
  lifetimeRepayments_in: [BigInt!]
  lifetimeRepayments_not_in: [BigInt!]
  lifetimeWithdrawals: BigInt
  lifetimeWithdrawals_not: BigInt
  lifetimeWithdrawals_gt: BigInt
  lifetimeWithdrawals_lt: BigInt
  lifetimeWithdrawals_gte: BigInt
  lifetimeWithdrawals_lte: BigInt
  lifetimeWithdrawals_in: [BigInt!]
  lifetimeWithdrawals_not_in: [BigInt!]
  lifetimeBorrows: BigInt
  lifetimeBorrows_not: BigInt
  lifetimeBorrows_gt: BigInt
  lifetimeBorrows_lt: BigInt
  lifetimeBorrows_gte: BigInt
  lifetimeBorrows_lte: BigInt
  lifetimeBorrows_in: [BigInt!]
  lifetimeBorrows_not_in: [BigInt!]
  lifetimeLiquidated: BigInt
  lifetimeLiquidated_not: BigInt
  lifetimeLiquidated_gt: BigInt
  lifetimeLiquidated_lt: BigInt
  lifetimeLiquidated_gte: BigInt
  lifetimeLiquidated_lte: BigInt
  lifetimeLiquidated_in: [BigInt!]
  lifetimeLiquidated_not_in: [BigInt!]
  lifetimeFlashLoans: BigInt
  lifetimeFlashLoans_not: BigInt
  lifetimeFlashLoans_gt: BigInt
  lifetimeFlashLoans_lt: BigInt
  lifetimeFlashLoans_gte: BigInt
  lifetimeFlashLoans_lte: BigInt
  lifetimeFlashLoans_in: [BigInt!]
  lifetimeFlashLoans_not_in: [BigInt!]
  lifetimeFlashLoanPremium: BigInt
  lifetimeFlashLoanPremium_not: BigInt
  lifetimeFlashLoanPremium_gt: BigInt
  lifetimeFlashLoanPremium_lt: BigInt
  lifetimeFlashLoanPremium_gte: BigInt
  lifetimeFlashLoanPremium_lte: BigInt
  lifetimeFlashLoanPremium_in: [BigInt!]
  lifetimeFlashLoanPremium_not_in: [BigInt!]
  lifetimeFlashLoanLPPremium: BigInt
  lifetimeFlashLoanLPPremium_not: BigInt
  lifetimeFlashLoanLPPremium_gt: BigInt
  lifetimeFlashLoanLPPremium_lt: BigInt
  lifetimeFlashLoanLPPremium_gte: BigInt
  lifetimeFlashLoanLPPremium_lte: BigInt
  lifetimeFlashLoanLPPremium_in: [BigInt!]
  lifetimeFlashLoanLPPremium_not_in: [BigInt!]
  lifetimeFlashLoanProtocolPremium: BigInt
  lifetimeFlashLoanProtocolPremium_not: BigInt
  lifetimeFlashLoanProtocolPremium_gt: BigInt
  lifetimeFlashLoanProtocolPremium_lt: BigInt
  lifetimeFlashLoanProtocolPremium_gte: BigInt
  lifetimeFlashLoanProtocolPremium_lte: BigInt
  lifetimeFlashLoanProtocolPremium_in: [BigInt!]
  lifetimeFlashLoanProtocolPremium_not_in: [BigInt!]
  lifetimePortalLPFee: BigInt
  lifetimePortalLPFee_not: BigInt
  lifetimePortalLPFee_gt: BigInt
  lifetimePortalLPFee_lt: BigInt
  lifetimePortalLPFee_gte: BigInt
  lifetimePortalLPFee_lte: BigInt
  lifetimePortalLPFee_in: [BigInt!]
  lifetimePortalLPFee_not_in: [BigInt!]
  lifetimePortalProtocolFee: BigInt
  lifetimePortalProtocolFee_not: BigInt
  lifetimePortalProtocolFee_gt: BigInt
  lifetimePortalProtocolFee_lt: BigInt
  lifetimePortalProtocolFee_gte: BigInt
  lifetimePortalProtocolFee_lte: BigInt
  lifetimePortalProtocolFee_in: [BigInt!]
  lifetimePortalProtocolFee_not_in: [BigInt!]
  lifetimeSuppliersInterestEarned: BigInt
  lifetimeSuppliersInterestEarned_not: BigInt
  lifetimeSuppliersInterestEarned_gt: BigInt
  lifetimeSuppliersInterestEarned_lt: BigInt
  lifetimeSuppliersInterestEarned_gte: BigInt
  lifetimeSuppliersInterestEarned_lte: BigInt
  lifetimeSuppliersInterestEarned_in: [BigInt!]
  lifetimeSuppliersInterestEarned_not_in: [BigInt!]
  lifetimeReserveFactorAccrued: BigInt
  lifetimeReserveFactorAccrued_not: BigInt
  lifetimeReserveFactorAccrued_gt: BigInt
  lifetimeReserveFactorAccrued_lt: BigInt
  lifetimeReserveFactorAccrued_gte: BigInt
  lifetimeReserveFactorAccrued_lte: BigInt
  lifetimeReserveFactorAccrued_in: [BigInt!]
  lifetimeReserveFactorAccrued_not_in: [BigInt!]
  userReserves_: UserReserve_filter
  supplyHistory_: Supply_filter
  mintUnbackedHistory_: MintUnbacked_filter
  backUnbackedHistory_: BackUnbacked_filter
  mintedToTreasuryHistory_: MintedToTreasury_filter
  isolationModeTotalDebtUpdatedHistory_: IsolationModeTotalDebtUpdated_filter
  redeemUnderlyingHistory_: RedeemUnderlying_filter
  borrowHistory_: Borrow_filter
  usageAsCollateralHistory_: UsageAsCollateral_filter
  swapHistory_: SwapBorrowRate_filter
  rebalanceStableBorrowRateHistory_: RebalanceStableBorrowRate_filter
  repayHistory_: Repay_filter
  flashLoanHistory_: FlashLoan_filter
  liquidationCallHistory_: LiquidationCall_filter
  paramsHistory_: ReserveParamsHistoryItem_filter
  configurationHistory_: ReserveConfigurationHistoryItem_filter
  supplies_: Supply_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input RewardFeedOracle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rewardFeedAddress: Bytes
  rewardFeedAddress_not: Bytes
  rewardFeedAddress_in: [Bytes!]
  rewardFeedAddress_not_in: [Bytes!]
  rewardFeedAddress_contains: Bytes
  rewardFeedAddress_not_contains: Bytes
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  updatedAt: Int
  updatedAt_not: Int
  updatedAt_gt: Int
  updatedAt_lt: Int
  updatedAt_gte: Int
  updatedAt_lte: Int
  updatedAt_in: [Int!]
  updatedAt_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input Reward_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rewardToken: Bytes
  rewardToken_not: Bytes
  rewardToken_in: [Bytes!]
  rewardToken_not_in: [Bytes!]
  rewardToken_contains: Bytes
  rewardToken_not_contains: Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: SubToken_filter
  rewardTokenDecimals: Int
  rewardTokenDecimals_not: Int
  rewardTokenDecimals_gt: Int
  rewardTokenDecimals_lt: Int
  rewardTokenDecimals_gte: Int
  rewardTokenDecimals_lte: Int
  rewardTokenDecimals_in: [Int!]
  rewardTokenDecimals_not_in: [Int!]
  rewardFeedOracle: String
  rewardFeedOracle_not: String
  rewardFeedOracle_gt: String
  rewardFeedOracle_lt: String
  rewardFeedOracle_gte: String
  rewardFeedOracle_lte: String
  rewardFeedOracle_in: [String!]
  rewardFeedOracle_not_in: [String!]
  rewardFeedOracle_contains: String
  rewardFeedOracle_contains_nocase: String
  rewardFeedOracle_not_contains: String
  rewardFeedOracle_not_contains_nocase: String
  rewardFeedOracle_starts_with: String
  rewardFeedOracle_starts_with_nocase: String
  rewardFeedOracle_not_starts_with: String
  rewardFeedOracle_not_starts_with_nocase: String
  rewardFeedOracle_ends_with: String
  rewardFeedOracle_ends_with_nocase: String
  rewardFeedOracle_not_ends_with: String
  rewardFeedOracle_not_ends_with_nocase: String
  rewardFeedOracle_: RewardFeedOracle_filter
  rewardTokenSymbol: String
  rewardTokenSymbol_not: String
  rewardTokenSymbol_gt: String
  rewardTokenSymbol_lt: String
  rewardTokenSymbol_gte: String
  rewardTokenSymbol_lte: String
  rewardTokenSymbol_in: [String!]
  rewardTokenSymbol_not_in: [String!]
  rewardTokenSymbol_contains: String
  rewardTokenSymbol_contains_nocase: String
  rewardTokenSymbol_not_contains: String
  rewardTokenSymbol_not_contains_nocase: String
  rewardTokenSymbol_starts_with: String
  rewardTokenSymbol_starts_with_nocase: String
  rewardTokenSymbol_not_starts_with: String
  rewardTokenSymbol_not_starts_with_nocase: String
  rewardTokenSymbol_ends_with: String
  rewardTokenSymbol_ends_with_nocase: String
  rewardTokenSymbol_not_ends_with: String
  rewardTokenSymbol_not_ends_with_nocase: String
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  precision: Int
  precision_not: Int
  precision_gt: Int
  precision_lt: Int
  precision_gte: Int
  precision_lte: Int
  precision_in: [Int!]
  precision_not_in: [Int!]
  distributionEnd: Int
  distributionEnd_not: Int
  distributionEnd_gt: Int
  distributionEnd_lt: Int
  distributionEnd_gte: Int
  distributionEnd_lte: Int
  distributionEnd_in: [Int!]
  distributionEnd_not_in: [Int!]
  emissionsPerSecond: BigInt
  emissionsPerSecond_not: BigInt
  emissionsPerSecond_gt: BigInt
  emissionsPerSecond_lt: BigInt
  emissionsPerSecond_gte: BigInt
  emissionsPerSecond_lte: BigInt
  emissionsPerSecond_in: [BigInt!]
  emissionsPerSecond_not_in: [BigInt!]
  rewardsController: String
  rewardsController_not: String
  rewardsController_gt: String
  rewardsController_lt: String
  rewardsController_gte: String
  rewardsController_lte: String
  rewardsController_in: [String!]
  rewardsController_not_in: [String!]
  rewardsController_contains: String
  rewardsController_contains_nocase: String
  rewardsController_not_contains: String
  rewardsController_not_contains_nocase: String
  rewardsController_starts_with: String
  rewardsController_starts_with_nocase: String
  rewardsController_not_starts_with: String
  rewardsController_not_starts_with_nocase: String
  rewardsController_ends_with: String
  rewardsController_ends_with_nocase: String
  rewardsController_not_ends_with: String
  rewardsController_not_ends_with_nocase: String
  rewardsController_: RewardsController_filter
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  updatedAt: Int
  updatedAt_not: Int
  updatedAt_gt: Int
  updatedAt_lt: Int
  updatedAt_gte: Int
  updatedAt_lte: Int
  updatedAt_in: [Int!]
  updatedAt_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input RewardedAction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rewardsController: String
  rewardsController_not: String
  rewardsController_gt: String
  rewardsController_lt: String
  rewardsController_gte: String
  rewardsController_lte: String
  rewardsController_in: [String!]
  rewardsController_not_in: [String!]
  rewardsController_contains: String
  rewardsController_contains_nocase: String
  rewardsController_not_contains: String
  rewardsController_not_contains_nocase: String
  rewardsController_starts_with: String
  rewardsController_starts_with_nocase: String
  rewardsController_not_starts_with: String
  rewardsController_not_starts_with_nocase: String
  rewardsController_ends_with: String
  rewardsController_ends_with_nocase: String
  rewardsController_not_ends_with: String
  rewardsController_not_ends_with_nocase: String
  rewardsController_: RewardsController_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input RewardsController_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rewards_: Reward_filter
  rewardedActions_: RewardedAction_filter
  claimIncentives_: ClaimRewardsCall_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input STokenBalanceHistoryItem_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  principalStableDebt: BigInt
  principalStableDebt_not: BigInt
  principalStableDebt_gt: BigInt
  principalStableDebt_lt: BigInt
  principalStableDebt_gte: BigInt
  principalStableDebt_lte: BigInt
  principalStableDebt_in: [BigInt!]
  principalStableDebt_not_in: [BigInt!]
  currentStableDebt: BigInt
  currentStableDebt_not: BigInt
  currentStableDebt_gt: BigInt
  currentStableDebt_lt: BigInt
  currentStableDebt_gte: BigInt
  currentStableDebt_lte: BigInt
  currentStableDebt_in: [BigInt!]
  currentStableDebt_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  avgStableBorrowRate: BigInt
  avgStableBorrowRate_not: BigInt
  avgStableBorrowRate_gt: BigInt
  avgStableBorrowRate_lt: BigInt
  avgStableBorrowRate_gte: BigInt
  avgStableBorrowRate_lte: BigInt
  avgStableBorrowRate_in: [BigInt!]
  avgStableBorrowRate_not_in: [BigInt!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input StableTokenDelegatedAllowance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fromUser: String
  fromUser_not: String
  fromUser_gt: String
  fromUser_lt: String
  fromUser_gte: String
  fromUser_lte: String
  fromUser_in: [String!]
  fromUser_not_in: [String!]
  fromUser_contains: String
  fromUser_contains_nocase: String
  fromUser_not_contains: String
  fromUser_not_contains_nocase: String
  fromUser_starts_with: String
  fromUser_starts_with_nocase: String
  fromUser_not_starts_with: String
  fromUser_not_starts_with_nocase: String
  fromUser_ends_with: String
  fromUser_ends_with_nocase: String
  fromUser_not_ends_with: String
  fromUser_not_ends_with_nocase: String
  fromUser_: User_filter
  toUser: String
  toUser_not: String
  toUser_gt: String
  toUser_lt: String
  toUser_gte: String
  toUser_lte: String
  toUser_in: [String!]
  toUser_not_in: [String!]
  toUser_contains: String
  toUser_contains_nocase: String
  toUser_not_contains: String
  toUser_not_contains_nocase: String
  toUser_starts_with: String
  toUser_starts_with_nocase: String
  toUser_not_starts_with: String
  toUser_not_starts_with_nocase: String
  toUser_ends_with: String
  toUser_ends_with_nocase: String
  toUser_not_ends_with: String
  toUser_not_ends_with_nocase: String
  toUser_: User_filter
  amountAllowed: BigInt
  amountAllowed_not: BigInt
  amountAllowed_gt: BigInt
  amountAllowed_lt: BigInt
  amountAllowed_gte: BigInt
  amountAllowed_lte: BigInt
  amountAllowed_in: [BigInt!]
  amountAllowed_not_in: [BigInt!]
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input SubToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  tokenContractImpl: Bytes
  tokenContractImpl_not: Bytes
  tokenContractImpl_in: [Bytes!]
  tokenContractImpl_not_in: [Bytes!]
  tokenContractImpl_contains: Bytes
  tokenContractImpl_not_contains: Bytes
  underlyingAssetAddress: Bytes
  underlyingAssetAddress_not: Bytes
  underlyingAssetAddress_in: [Bytes!]
  underlyingAssetAddress_not_in: [Bytes!]
  underlyingAssetAddress_contains: Bytes
  underlyingAssetAddress_not_contains: Bytes
  underlyingAssetDecimals: Int
  underlyingAssetDecimals_not: Int
  underlyingAssetDecimals_gt: Int
  underlyingAssetDecimals_lt: Int
  underlyingAssetDecimals_gte: Int
  underlyingAssetDecimals_lte: Int
  underlyingAssetDecimals_in: [Int!]
  underlyingAssetDecimals_not_in: [Int!]
  rewards_: Reward_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input Supply_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  action: Action
  action_not: Action
  action_in: [Action!]
  action_not_in: [Action!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  caller: String
  caller_not: String
  caller_gt: String
  caller_lt: String
  caller_gte: String
  caller_lte: String
  caller_in: [String!]
  caller_not_in: [String!]
  caller_contains: String
  caller_contains_nocase: String
  caller_not_contains: String
  caller_not_contains_nocase: String
  caller_starts_with: String
  caller_starts_with_nocase: String
  caller_not_starts_with: String
  caller_not_starts_with_nocase: String
  caller_ends_with: String
  caller_ends_with_nocase: String
  caller_not_ends_with: String
  caller_not_ends_with_nocase: String
  caller_: User_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  referrer: String
  referrer_not: String
  referrer_gt: String
  referrer_lt: String
  referrer_gte: String
  referrer_lte: String
  referrer_in: [String!]
  referrer_not_in: [String!]
  referrer_contains: String
  referrer_contains_nocase: String
  referrer_not_contains: String
  referrer_not_contains_nocase: String
  referrer_starts_with: String
  referrer_starts_with_nocase: String
  referrer_not_starts_with: String
  referrer_not_starts_with_nocase: String
  referrer_ends_with: String
  referrer_ends_with_nocase: String
  referrer_not_ends_with: String
  referrer_not_ends_with_nocase: String
  referrer_: Referrer_filter
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  assetPriceUSD: BigDecimal
  assetPriceUSD_not: BigDecimal
  assetPriceUSD_gt: BigDecimal
  assetPriceUSD_lt: BigDecimal
  assetPriceUSD_gte: BigDecimal
  assetPriceUSD_lte: BigDecimal
  assetPriceUSD_in: [BigDecimal!]
  assetPriceUSD_not_in: [BigDecimal!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input SwapBorrowRate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  action: Action
  action_not: Action
  action_in: [Action!]
  action_not_in: [Action!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  borrowRateModeFrom: Int
  borrowRateModeFrom_not: Int
  borrowRateModeFrom_gt: Int
  borrowRateModeFrom_lt: Int
  borrowRateModeFrom_gte: Int
  borrowRateModeFrom_lte: Int
  borrowRateModeFrom_in: [Int!]
  borrowRateModeFrom_not_in: [Int!]
  borrowRateModeTo: Int
  borrowRateModeTo_not: Int
  borrowRateModeTo_gt: Int
  borrowRateModeTo_lt: Int
  borrowRateModeTo_gte: Int
  borrowRateModeTo_lte: Int
  borrowRateModeTo_in: [Int!]
  borrowRateModeTo_not_in: [Int!]
  stableBorrowRate: BigInt
  stableBorrowRate_not: BigInt
  stableBorrowRate_gt: BigInt
  stableBorrowRate_lt: BigInt
  stableBorrowRate_gte: BigInt
  stableBorrowRate_lte: BigInt
  stableBorrowRate_in: [BigInt!]
  stableBorrowRate_not_in: [BigInt!]
  variableBorrowRate: BigInt
  variableBorrowRate_not: BigInt
  variableBorrowRate_gt: BigInt
  variableBorrowRate_lt: BigInt
  variableBorrowRate_gte: BigInt
  variableBorrowRate_lte: BigInt
  variableBorrowRate_in: [BigInt!]
  variableBorrowRate_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input SwapHistory_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fromAsset: String
  fromAsset_not: String
  fromAsset_gt: String
  fromAsset_lt: String
  fromAsset_gte: String
  fromAsset_lte: String
  fromAsset_in: [String!]
  fromAsset_not_in: [String!]
  fromAsset_contains: String
  fromAsset_contains_nocase: String
  fromAsset_not_contains: String
  fromAsset_not_contains_nocase: String
  fromAsset_starts_with: String
  fromAsset_starts_with_nocase: String
  fromAsset_not_starts_with: String
  fromAsset_not_starts_with_nocase: String
  fromAsset_ends_with: String
  fromAsset_ends_with_nocase: String
  fromAsset_not_ends_with: String
  fromAsset_not_ends_with_nocase: String
  toAsset: String
  toAsset_not: String
  toAsset_gt: String
  toAsset_lt: String
  toAsset_gte: String
  toAsset_lte: String
  toAsset_in: [String!]
  toAsset_not_in: [String!]
  toAsset_contains: String
  toAsset_contains_nocase: String
  toAsset_not_contains: String
  toAsset_not_contains_nocase: String
  toAsset_starts_with: String
  toAsset_starts_with_nocase: String
  toAsset_not_starts_with: String
  toAsset_not_starts_with_nocase: String
  toAsset_ends_with: String
  toAsset_ends_with_nocase: String
  toAsset_not_ends_with: String
  toAsset_not_ends_with_nocase: String
  fromAmount: BigInt
  fromAmount_not: BigInt
  fromAmount_gt: BigInt
  fromAmount_lt: BigInt
  fromAmount_gte: BigInt
  fromAmount_lte: BigInt
  fromAmount_in: [BigInt!]
  fromAmount_not_in: [BigInt!]
  receivedAmount: BigInt
  receivedAmount_not: BigInt
  receivedAmount_gt: BigInt
  receivedAmount_lt: BigInt
  receivedAmount_gte: BigInt
  receivedAmount_lte: BigInt
  receivedAmount_in: [BigInt!]
  receivedAmount_not_in: [BigInt!]
  swapType: String
  swapType_not: String
  swapType_gt: String
  swapType_lt: String
  swapType_gte: String
  swapType_lte: String
  swapType_in: [String!]
  swapType_not_in: [String!]
  swapType_contains: String
  swapType_contains_nocase: String
  swapType_not_contains: String
  swapType_not_contains_nocase: String
  swapType_starts_with: String
  swapType_starts_with_nocase: String
  swapType_not_starts_with: String
  swapType_not_starts_with_nocase: String
  swapType_ends_with: String
  swapType_ends_with_nocase: String
  swapType_not_ends_with: String
  swapType_not_ends_with_nocase: String
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input UsageAsCollateral_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  action: Action
  action_not: Action
  action_in: [Action!]
  action_not_in: [Action!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  fromState: Boolean
  fromState_not: Boolean
  fromState_in: [Boolean!]
  fromState_not_in: [Boolean!]
  toState: Boolean
  toState_not: Boolean
  toState_in: [Boolean!]
  toState_not_in: [Boolean!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input UsdEthPriceHistoryItem_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  oracle: String
  oracle_not: String
  oracle_gt: String
  oracle_lt: String
  oracle_gte: String
  oracle_lte: String
  oracle_in: [String!]
  oracle_not_in: [String!]
  oracle_contains: String
  oracle_contains_nocase: String
  oracle_not_contains: String
  oracle_not_contains_nocase: String
  oracle_starts_with: String
  oracle_starts_with_nocase: String
  oracle_not_starts_with: String
  oracle_not_starts_with_nocase: String
  oracle_ends_with: String
  oracle_ends_with_nocase: String
  oracle_not_ends_with: String
  oracle_not_ends_with_nocase: String
  oracle_: PriceOracle_filter
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input UserEModeSet_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  action: Action
  action_not: Action
  action_in: [Action!]
  action_not_in: [Action!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  categoryId: Int
  categoryId_not: Int
  categoryId_gt: Int
  categoryId_lt: Int
  categoryId_gte: Int
  categoryId_lte: Int
  categoryId_in: [Int!]
  categoryId_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input UserReserve_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  reserve: String
  reserve_not: String
  reserve_gt: String
  reserve_lt: String
  reserve_gte: String
  reserve_lte: String
  reserve_in: [String!]
  reserve_not_in: [String!]
  reserve_contains: String
  reserve_contains_nocase: String
  reserve_not_contains: String
  reserve_not_contains_nocase: String
  reserve_starts_with: String
  reserve_starts_with_nocase: String
  reserve_not_starts_with: String
  reserve_not_starts_with_nocase: String
  reserve_ends_with: String
  reserve_ends_with_nocase: String
  reserve_not_ends_with: String
  reserve_not_ends_with_nocase: String
  reserve_: Reserve_filter
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  usageAsCollateralEnabledOnUser: Boolean
  usageAsCollateralEnabledOnUser_not: Boolean
  usageAsCollateralEnabledOnUser_in: [Boolean!]
  usageAsCollateralEnabledOnUser_not_in: [Boolean!]
  scaledATokenBalance: BigInt
  scaledATokenBalance_not: BigInt
  scaledATokenBalance_gt: BigInt
  scaledATokenBalance_lt: BigInt
  scaledATokenBalance_gte: BigInt
  scaledATokenBalance_lte: BigInt
  scaledATokenBalance_in: [BigInt!]
  scaledATokenBalance_not_in: [BigInt!]
  currentATokenBalance: BigInt
  currentATokenBalance_not: BigInt
  currentATokenBalance_gt: BigInt
  currentATokenBalance_lt: BigInt
  currentATokenBalance_gte: BigInt
  currentATokenBalance_lte: BigInt
  currentATokenBalance_in: [BigInt!]
  currentATokenBalance_not_in: [BigInt!]
  scaledVariableDebt: BigInt
  scaledVariableDebt_not: BigInt
  scaledVariableDebt_gt: BigInt
  scaledVariableDebt_lt: BigInt
  scaledVariableDebt_gte: BigInt
  scaledVariableDebt_lte: BigInt
  scaledVariableDebt_in: [BigInt!]
  scaledVariableDebt_not_in: [BigInt!]
  currentVariableDebt: BigInt
  currentVariableDebt_not: BigInt
  currentVariableDebt_gt: BigInt
  currentVariableDebt_lt: BigInt
  currentVariableDebt_gte: BigInt
  currentVariableDebt_lte: BigInt
  currentVariableDebt_in: [BigInt!]
  currentVariableDebt_not_in: [BigInt!]
  principalStableDebt: BigInt
  principalStableDebt_not: BigInt
  principalStableDebt_gt: BigInt
  principalStableDebt_lt: BigInt
  principalStableDebt_gte: BigInt
  principalStableDebt_lte: BigInt
  principalStableDebt_in: [BigInt!]
  principalStableDebt_not_in: [BigInt!]
  currentStableDebt: BigInt
  currentStableDebt_not: BigInt
  currentStableDebt_gt: BigInt
  currentStableDebt_lt: BigInt
  currentStableDebt_gte: BigInt
  currentStableDebt_lte: BigInt
  currentStableDebt_in: [BigInt!]
  currentStableDebt_not_in: [BigInt!]
  currentTotalDebt: BigInt
  currentTotalDebt_not: BigInt
  currentTotalDebt_gt: BigInt
  currentTotalDebt_lt: BigInt
  currentTotalDebt_gte: BigInt
  currentTotalDebt_lte: BigInt
  currentTotalDebt_in: [BigInt!]
  currentTotalDebt_not_in: [BigInt!]
  stableBorrowRate: BigInt
  stableBorrowRate_not: BigInt
  stableBorrowRate_gt: BigInt
  stableBorrowRate_lt: BigInt
  stableBorrowRate_gte: BigInt
  stableBorrowRate_lte: BigInt
  stableBorrowRate_in: [BigInt!]
  stableBorrowRate_not_in: [BigInt!]
  oldStableBorrowRate: BigInt
  oldStableBorrowRate_not: BigInt
  oldStableBorrowRate_gt: BigInt
  oldStableBorrowRate_lt: BigInt
  oldStableBorrowRate_gte: BigInt
  oldStableBorrowRate_lte: BigInt
  oldStableBorrowRate_in: [BigInt!]
  oldStableBorrowRate_not_in: [BigInt!]
  liquidityRate: BigInt
  liquidityRate_not: BigInt
  liquidityRate_gt: BigInt
  liquidityRate_lt: BigInt
  liquidityRate_gte: BigInt
  liquidityRate_lte: BigInt
  liquidityRate_in: [BigInt!]
  liquidityRate_not_in: [BigInt!]
  stableBorrowLastUpdateTimestamp: Int
  stableBorrowLastUpdateTimestamp_not: Int
  stableBorrowLastUpdateTimestamp_gt: Int
  stableBorrowLastUpdateTimestamp_lt: Int
  stableBorrowLastUpdateTimestamp_gte: Int
  stableBorrowLastUpdateTimestamp_lte: Int
  stableBorrowLastUpdateTimestamp_in: [Int!]
  stableBorrowLastUpdateTimestamp_not_in: [Int!]
  variableBorrowIndex: BigInt
  variableBorrowIndex_not: BigInt
  variableBorrowIndex_gt: BigInt
  variableBorrowIndex_lt: BigInt
  variableBorrowIndex_gte: BigInt
  variableBorrowIndex_lte: BigInt
  variableBorrowIndex_in: [BigInt!]
  variableBorrowIndex_not_in: [BigInt!]
  lastUpdateTimestamp: Int
  lastUpdateTimestamp_not: Int
  lastUpdateTimestamp_gt: Int
  lastUpdateTimestamp_lt: Int
  lastUpdateTimestamp_gte: Int
  lastUpdateTimestamp_lte: Int
  lastUpdateTimestamp_in: [Int!]
  lastUpdateTimestamp_not_in: [Int!]
  stableTokenDelegatedAllowances_: StableTokenDelegatedAllowance_filter
  variableTokenDelegatedAllowances_: VariableTokenDelegatedAllowance_filter
  aTokenBalanceHistory_: ATokenBalanceHistoryItem_filter
  vTokenBalanceHistory_: VTokenBalanceHistoryItem_filter
  sTokenBalanceHistory_: STokenBalanceHistoryItem_filter
  usageAsCollateralHistory_: UsageAsCollateral_filter
  supplyHistory_: Supply_filter
  mintUnbackedHistory_: MintUnbacked_filter
  backUnbackedHistory_: BackUnbacked_filter
  redeemUnderlyingHistory_: RedeemUnderlying_filter
  borrowHistory_: Borrow_filter
  swapHistory_: SwapBorrowRate_filter
  rebalanceStableBorrowRateHistory_: RebalanceStableBorrowRate_filter
  repayHistory_: Repay_filter
  liquidationCallHistory_: LiquidationCall_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input UserReward_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  reward: String
  reward_not: String
  reward_gt: String
  reward_lt: String
  reward_gte: String
  reward_lte: String
  reward_in: [String!]
  reward_not_in: [String!]
  reward_contains: String
  reward_contains_nocase: String
  reward_not_contains: String
  reward_not_contains_nocase: String
  reward_starts_with: String
  reward_starts_with_nocase: String
  reward_not_starts_with: String
  reward_not_starts_with_nocase: String
  reward_ends_with: String
  reward_ends_with_nocase: String
  reward_not_ends_with: String
  reward_not_ends_with_nocase: String
  reward_: Reward_filter
  createdAt: Int
  createdAt_not: Int
  createdAt_gt: Int
  createdAt_lt: Int
  createdAt_gte: Int
  createdAt_lte: Int
  createdAt_in: [Int!]
  createdAt_not_in: [Int!]
  updatedAt: Int
  updatedAt_not: Int
  updatedAt_gt: Int
  updatedAt_lt: Int
  updatedAt_gte: Int
  updatedAt_lte: Int
  updatedAt_in: [Int!]
  updatedAt_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input UserTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  action: Action
  action_not: Action
  action_in: [Action!]
  action_not_in: [Action!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  borrowedReservesCount: Int
  borrowedReservesCount_not: Int
  borrowedReservesCount_gt: Int
  borrowedReservesCount_lt: Int
  borrowedReservesCount_gte: Int
  borrowedReservesCount_lte: Int
  borrowedReservesCount_in: [Int!]
  borrowedReservesCount_not_in: [Int!]
  unclaimedRewards: BigInt
  unclaimedRewards_not: BigInt
  unclaimedRewards_gt: BigInt
  unclaimedRewards_lt: BigInt
  unclaimedRewards_gte: BigInt
  unclaimedRewards_lte: BigInt
  unclaimedRewards_in: [BigInt!]
  unclaimedRewards_not_in: [BigInt!]
  lifetimeRewards: BigInt
  lifetimeRewards_not: BigInt
  lifetimeRewards_gt: BigInt
  lifetimeRewards_lt: BigInt
  lifetimeRewards_gte: BigInt
  lifetimeRewards_lte: BigInt
  lifetimeRewards_in: [BigInt!]
  lifetimeRewards_not_in: [BigInt!]
  rewardsLastUpdated: Int
  rewardsLastUpdated_not: Int
  rewardsLastUpdated_gt: Int
  rewardsLastUpdated_lt: Int
  rewardsLastUpdated_gte: Int
  rewardsLastUpdated_lte: Int
  rewardsLastUpdated_in: [Int!]
  rewardsLastUpdated_not_in: [Int!]
  rewards_: UserReward_filter
  eModeCategoryId: String
  eModeCategoryId_not: String
  eModeCategoryId_gt: String
  eModeCategoryId_lt: String
  eModeCategoryId_gte: String
  eModeCategoryId_lte: String
  eModeCategoryId_in: [String!]
  eModeCategoryId_not_in: [String!]
  eModeCategoryId_contains: String
  eModeCategoryId_contains_nocase: String
  eModeCategoryId_not_contains: String
  eModeCategoryId_not_contains_nocase: String
  eModeCategoryId_starts_with: String
  eModeCategoryId_starts_with_nocase: String
  eModeCategoryId_not_starts_with: String
  eModeCategoryId_not_starts_with_nocase: String
  eModeCategoryId_ends_with: String
  eModeCategoryId_ends_with_nocase: String
  eModeCategoryId_not_ends_with: String
  eModeCategoryId_not_ends_with_nocase: String
  eModeCategoryId_: EModeCategory_filter
  reserves_: UserReserve_filter
  supplyHistory_: Supply_filter
  mintUnbackedHistory_: MintUnbacked_filter
  backUnbackedHistory_: BackUnbacked_filter
  userEmodeSetHistory_: UserEModeSet_filter
  redeemUnderlyingHistory_: RedeemUnderlying_filter
  usageAsCollateralHistory_: UsageAsCollateral_filter
  borrowHistory_: Borrow_filter
  swapHistory_: SwapBorrowRate_filter
  rebalanceStableBorrowRateHistory_: RebalanceStableBorrowRate_filter
  repayHistory_: Repay_filter
  liquidationCallHistory_: LiquidationCall_filter
  rewardedActions_: RewardedAction_filter
  claimRewards_: ClaimRewardsCall_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input VTokenBalanceHistoryItem_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  scaledVariableDebt: BigInt
  scaledVariableDebt_not: BigInt
  scaledVariableDebt_gt: BigInt
  scaledVariableDebt_lt: BigInt
  scaledVariableDebt_gte: BigInt
  scaledVariableDebt_lte: BigInt
  scaledVariableDebt_in: [BigInt!]
  scaledVariableDebt_not_in: [BigInt!]
  currentVariableDebt: BigInt
  currentVariableDebt_not: BigInt
  currentVariableDebt_gt: BigInt
  currentVariableDebt_lt: BigInt
  currentVariableDebt_gte: BigInt
  currentVariableDebt_lte: BigInt
  currentVariableDebt_in: [BigInt!]
  currentVariableDebt_not_in: [BigInt!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
input VariableTokenDelegatedAllowance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  fromUser: String
  fromUser_not: String
  fromUser_gt: String
  fromUser_lt: String
  fromUser_gte: String
  fromUser_lte: String
  fromUser_in: [String!]
  fromUser_not_in: [String!]
  fromUser_contains: String
  fromUser_contains_nocase: String
  fromUser_not_contains: String
  fromUser_not_contains_nocase: String
  fromUser_starts_with: String
  fromUser_starts_with_nocase: String
  fromUser_not_starts_with: String
  fromUser_not_starts_with_nocase: String
  fromUser_ends_with: String
  fromUser_ends_with_nocase: String
  fromUser_not_ends_with: String
  fromUser_not_ends_with_nocase: String
  fromUser_: User_filter
  toUser: String
  toUser_not: String
  toUser_gt: String
  toUser_lt: String
  toUser_gte: String
  toUser_lte: String
  toUser_in: [String!]
  toUser_not_in: [String!]
  toUser_contains: String
  toUser_contains_nocase: String
  toUser_not_contains: String
  toUser_not_contains_nocase: String
  toUser_starts_with: String
  toUser_starts_with_nocase: String
  toUser_not_starts_with: String
  toUser_not_starts_with_nocase: String
  toUser_ends_with: String
  toUser_ends_with_nocase: String
  toUser_not_ends_with: String
  toUser_not_ends_with_nocase: String
  toUser_: User_filter
  amountAllowed: BigInt
  amountAllowed_not: BigInt
  amountAllowed_gt: BigInt
  amountAllowed_lt: BigInt
  amountAllowed_gte: BigInt
  amountAllowed_lte: BigInt
  amountAllowed_in: [BigInt!]
  amountAllowed_not_in: [BigInt!]
  userReserve: String
  userReserve_not: String
  userReserve_gt: String
  userReserve_lt: String
  userReserve_gte: String
  userReserve_lte: String
  userReserve_in: [String!]
  userReserve_not_in: [String!]
  userReserve_contains: String
  userReserve_contains_nocase: String
  userReserve_not_contains: String
  userReserve_not_contains_nocase: String
  userReserve_starts_with: String
  userReserve_starts_with_nocase: String
  userReserve_not_starts_with: String
  userReserve_not_starts_with_nocase: String
  userReserve_ends_with: String
  userReserve_ends_with_nocase: String
  userReserve_not_ends_with: String
  userReserve_not_ends_with_nocase: String
  userReserve_: UserReserve_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
}
"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT
"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT
"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION
