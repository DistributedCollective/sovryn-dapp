"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""
Defined a Subgraph ID for an object type
"""
directive @subgraphId(id: String!) on OBJECT

type AddAmmGovernanceAddress {
  gAddress: Bytes!
  id: ID!
}

input AddAmmGovernanceAddress_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  gAddress: Bytes
  gAddress_contains: Bytes
  gAddress_in: [Bytes!]
  gAddress_not: Bytes
  gAddress_not_contains: Bytes
  gAddress_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
}

enum AddAmmGovernanceAddress_orderBy {
  gAddress
  id
}

type AnswerUpdated {
  current: BigInt!
  id: ID!
  roundId: BigInt!
  updatedAt: BigInt!
}

input AnswerUpdated_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  current: BigInt
  current_gt: BigInt
  current_gte: BigInt
  current_in: [BigInt!]
  current_lt: BigInt
  current_lte: BigInt
  current_not: BigInt
  current_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  roundId: BigInt
  roundId_gt: BigInt
  roundId_gte: BigInt
  roundId_in: [BigInt!]
  roundId_lt: BigInt
  roundId_lte: BigInt
  roundId_not: BigInt
  roundId_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_gt: BigInt
  updatedAt_gte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_lt: BigInt
  updatedAt_lte: BigInt
  updatedAt_not: BigInt
  updatedAt_not_in: [BigInt!]
}

enum AnswerUpdated_orderBy {
  current
  id
  roundId
  updatedAt
}

type AtomicYield {
  calculatedYield: BigInt!
  createdAtTx: Transaction!
  endTimestamp: BigInt!
  id: ID!
  liquidityPool: LiquidityPool!
  startTimestamp: BigInt!
}

input AtomicYield_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  calculatedYield: BigInt
  calculatedYield_gt: BigInt
  calculatedYield_gte: BigInt
  calculatedYield_in: [BigInt!]
  calculatedYield_lt: BigInt
  calculatedYield_lte: BigInt
  calculatedYield_not: BigInt
  calculatedYield_not_in: [BigInt!]
  createdAtTx: String
  createdAtTx_: Transaction_filter
  createdAtTx_contains: String
  createdAtTx_contains_nocase: String
  createdAtTx_ends_with: String
  createdAtTx_ends_with_nocase: String
  createdAtTx_gt: String
  createdAtTx_gte: String
  createdAtTx_in: [String!]
  createdAtTx_lt: String
  createdAtTx_lte: String
  createdAtTx_not: String
  createdAtTx_not_contains: String
  createdAtTx_not_contains_nocase: String
  createdAtTx_not_ends_with: String
  createdAtTx_not_ends_with_nocase: String
  createdAtTx_not_in: [String!]
  createdAtTx_not_starts_with: String
  createdAtTx_not_starts_with_nocase: String
  createdAtTx_starts_with: String
  createdAtTx_starts_with_nocase: String
  endTimestamp: BigInt
  endTimestamp_gt: BigInt
  endTimestamp_gte: BigInt
  endTimestamp_in: [BigInt!]
  endTimestamp_lt: BigInt
  endTimestamp_lte: BigInt
  endTimestamp_not: BigInt
  endTimestamp_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  liquidityPool: String
  liquidityPool_: LiquidityPool_filter
  liquidityPool_contains: String
  liquidityPool_contains_nocase: String
  liquidityPool_ends_with: String
  liquidityPool_ends_with_nocase: String
  liquidityPool_gt: String
  liquidityPool_gte: String
  liquidityPool_in: [String!]
  liquidityPool_lt: String
  liquidityPool_lte: String
  liquidityPool_not: String
  liquidityPool_not_contains: String
  liquidityPool_not_contains_nocase: String
  liquidityPool_not_ends_with: String
  liquidityPool_not_ends_with_nocase: String
  liquidityPool_not_in: [String!]
  liquidityPool_not_starts_with: String
  liquidityPool_not_starts_with_nocase: String
  liquidityPool_starts_with: String
  liquidityPool_starts_with_nocase: String
  startTimestamp: BigInt
  startTimestamp_gt: BigInt
  startTimestamp_gte: BigInt
  startTimestamp_in: [BigInt!]
  startTimestamp_lt: BigInt
  startTimestamp_lte: BigInt
  startTimestamp_not: BigInt
  startTimestamp_not_in: [BigInt!]
}

enum AtomicYield_orderBy {
  calculatedYield
  createdAtTx
  endTimestamp
  id
  liquidityPool
  startTimestamp
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type CandleSticksDay {
  close: BigDecimal!
  high: BigDecimal!
  id: ID!
  longVolume: BigDecimal!
  low: BigDecimal!
  open: BigDecimal
  oraclePriceClose: BigDecimal!
  oraclePriceHigh: BigDecimal!
  oraclePriceLow: BigDecimal!
  oraclePriceOpen: BigDecimal!
  periodStartUnix: Int!
  perpetual: Perpetual!
  shortVolume: BigDecimal!
  totalVolume: BigDecimal!
  txCount: Int!
}

input CandleSticksDay_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  close: BigDecimal
  close_gt: BigDecimal
  close_gte: BigDecimal
  close_in: [BigDecimal!]
  close_lt: BigDecimal
  close_lte: BigDecimal
  close_not: BigDecimal
  close_not_in: [BigDecimal!]
  high: BigDecimal
  high_gt: BigDecimal
  high_gte: BigDecimal
  high_in: [BigDecimal!]
  high_lt: BigDecimal
  high_lte: BigDecimal
  high_not: BigDecimal
  high_not_in: [BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  longVolume: BigDecimal
  longVolume_gt: BigDecimal
  longVolume_gte: BigDecimal
  longVolume_in: [BigDecimal!]
  longVolume_lt: BigDecimal
  longVolume_lte: BigDecimal
  longVolume_not: BigDecimal
  longVolume_not_in: [BigDecimal!]
  low: BigDecimal
  low_gt: BigDecimal
  low_gte: BigDecimal
  low_in: [BigDecimal!]
  low_lt: BigDecimal
  low_lte: BigDecimal
  low_not: BigDecimal
  low_not_in: [BigDecimal!]
  open: BigDecimal
  open_gt: BigDecimal
  open_gte: BigDecimal
  open_in: [BigDecimal!]
  open_lt: BigDecimal
  open_lte: BigDecimal
  open_not: BigDecimal
  open_not_in: [BigDecimal!]
  oraclePriceClose: BigDecimal
  oraclePriceClose_gt: BigDecimal
  oraclePriceClose_gte: BigDecimal
  oraclePriceClose_in: [BigDecimal!]
  oraclePriceClose_lt: BigDecimal
  oraclePriceClose_lte: BigDecimal
  oraclePriceClose_not: BigDecimal
  oraclePriceClose_not_in: [BigDecimal!]
  oraclePriceHigh: BigDecimal
  oraclePriceHigh_gt: BigDecimal
  oraclePriceHigh_gte: BigDecimal
  oraclePriceHigh_in: [BigDecimal!]
  oraclePriceHigh_lt: BigDecimal
  oraclePriceHigh_lte: BigDecimal
  oraclePriceHigh_not: BigDecimal
  oraclePriceHigh_not_in: [BigDecimal!]
  oraclePriceLow: BigDecimal
  oraclePriceLow_gt: BigDecimal
  oraclePriceLow_gte: BigDecimal
  oraclePriceLow_in: [BigDecimal!]
  oraclePriceLow_lt: BigDecimal
  oraclePriceLow_lte: BigDecimal
  oraclePriceLow_not: BigDecimal
  oraclePriceLow_not_in: [BigDecimal!]
  oraclePriceOpen: BigDecimal
  oraclePriceOpen_gt: BigDecimal
  oraclePriceOpen_gte: BigDecimal
  oraclePriceOpen_in: [BigDecimal!]
  oraclePriceOpen_lt: BigDecimal
  oraclePriceOpen_lte: BigDecimal
  oraclePriceOpen_not: BigDecimal
  oraclePriceOpen_not_in: [BigDecimal!]
  periodStartUnix: Int
  periodStartUnix_gt: Int
  periodStartUnix_gte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_lt: Int
  periodStartUnix_lte: Int
  periodStartUnix_not: Int
  periodStartUnix_not_in: [Int!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  shortVolume: BigDecimal
  shortVolume_gt: BigDecimal
  shortVolume_gte: BigDecimal
  shortVolume_in: [BigDecimal!]
  shortVolume_lt: BigDecimal
  shortVolume_lte: BigDecimal
  shortVolume_not: BigDecimal
  shortVolume_not_in: [BigDecimal!]
  totalVolume: BigDecimal
  totalVolume_gt: BigDecimal
  totalVolume_gte: BigDecimal
  totalVolume_in: [BigDecimal!]
  totalVolume_lt: BigDecimal
  totalVolume_lte: BigDecimal
  totalVolume_not: BigDecimal
  totalVolume_not_in: [BigDecimal!]
  txCount: Int
  txCount_gt: Int
  txCount_gte: Int
  txCount_in: [Int!]
  txCount_lt: Int
  txCount_lte: Int
  txCount_not: Int
  txCount_not_in: [Int!]
}

enum CandleSticksDay_orderBy {
  close
  high
  id
  longVolume
  low
  open
  oraclePriceClose
  oraclePriceHigh
  oraclePriceLow
  oraclePriceOpen
  periodStartUnix
  perpetual
  shortVolume
  totalVolume
  txCount
}

type CandleSticksFifteenMinute {
  close: BigDecimal!
  high: BigDecimal!
  id: ID!
  longVolume: BigDecimal!
  low: BigDecimal!
  open: BigDecimal
  oraclePriceClose: BigDecimal!
  oraclePriceHigh: BigDecimal!
  oraclePriceLow: BigDecimal!
  oraclePriceOpen: BigDecimal!
  periodStartUnix: Int!
  perpetual: Perpetual!
  shortVolume: BigDecimal!
  totalVolume: BigDecimal!
  txCount: Int!
}

input CandleSticksFifteenMinute_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  close: BigDecimal
  close_gt: BigDecimal
  close_gte: BigDecimal
  close_in: [BigDecimal!]
  close_lt: BigDecimal
  close_lte: BigDecimal
  close_not: BigDecimal
  close_not_in: [BigDecimal!]
  high: BigDecimal
  high_gt: BigDecimal
  high_gte: BigDecimal
  high_in: [BigDecimal!]
  high_lt: BigDecimal
  high_lte: BigDecimal
  high_not: BigDecimal
  high_not_in: [BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  longVolume: BigDecimal
  longVolume_gt: BigDecimal
  longVolume_gte: BigDecimal
  longVolume_in: [BigDecimal!]
  longVolume_lt: BigDecimal
  longVolume_lte: BigDecimal
  longVolume_not: BigDecimal
  longVolume_not_in: [BigDecimal!]
  low: BigDecimal
  low_gt: BigDecimal
  low_gte: BigDecimal
  low_in: [BigDecimal!]
  low_lt: BigDecimal
  low_lte: BigDecimal
  low_not: BigDecimal
  low_not_in: [BigDecimal!]
  open: BigDecimal
  open_gt: BigDecimal
  open_gte: BigDecimal
  open_in: [BigDecimal!]
  open_lt: BigDecimal
  open_lte: BigDecimal
  open_not: BigDecimal
  open_not_in: [BigDecimal!]
  oraclePriceClose: BigDecimal
  oraclePriceClose_gt: BigDecimal
  oraclePriceClose_gte: BigDecimal
  oraclePriceClose_in: [BigDecimal!]
  oraclePriceClose_lt: BigDecimal
  oraclePriceClose_lte: BigDecimal
  oraclePriceClose_not: BigDecimal
  oraclePriceClose_not_in: [BigDecimal!]
  oraclePriceHigh: BigDecimal
  oraclePriceHigh_gt: BigDecimal
  oraclePriceHigh_gte: BigDecimal
  oraclePriceHigh_in: [BigDecimal!]
  oraclePriceHigh_lt: BigDecimal
  oraclePriceHigh_lte: BigDecimal
  oraclePriceHigh_not: BigDecimal
  oraclePriceHigh_not_in: [BigDecimal!]
  oraclePriceLow: BigDecimal
  oraclePriceLow_gt: BigDecimal
  oraclePriceLow_gte: BigDecimal
  oraclePriceLow_in: [BigDecimal!]
  oraclePriceLow_lt: BigDecimal
  oraclePriceLow_lte: BigDecimal
  oraclePriceLow_not: BigDecimal
  oraclePriceLow_not_in: [BigDecimal!]
  oraclePriceOpen: BigDecimal
  oraclePriceOpen_gt: BigDecimal
  oraclePriceOpen_gte: BigDecimal
  oraclePriceOpen_in: [BigDecimal!]
  oraclePriceOpen_lt: BigDecimal
  oraclePriceOpen_lte: BigDecimal
  oraclePriceOpen_not: BigDecimal
  oraclePriceOpen_not_in: [BigDecimal!]
  periodStartUnix: Int
  periodStartUnix_gt: Int
  periodStartUnix_gte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_lt: Int
  periodStartUnix_lte: Int
  periodStartUnix_not: Int
  periodStartUnix_not_in: [Int!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  shortVolume: BigDecimal
  shortVolume_gt: BigDecimal
  shortVolume_gte: BigDecimal
  shortVolume_in: [BigDecimal!]
  shortVolume_lt: BigDecimal
  shortVolume_lte: BigDecimal
  shortVolume_not: BigDecimal
  shortVolume_not_in: [BigDecimal!]
  totalVolume: BigDecimal
  totalVolume_gt: BigDecimal
  totalVolume_gte: BigDecimal
  totalVolume_in: [BigDecimal!]
  totalVolume_lt: BigDecimal
  totalVolume_lte: BigDecimal
  totalVolume_not: BigDecimal
  totalVolume_not_in: [BigDecimal!]
  txCount: Int
  txCount_gt: Int
  txCount_gte: Int
  txCount_in: [Int!]
  txCount_lt: Int
  txCount_lte: Int
  txCount_not: Int
  txCount_not_in: [Int!]
}

enum CandleSticksFifteenMinute_orderBy {
  close
  high
  id
  longVolume
  low
  open
  oraclePriceClose
  oraclePriceHigh
  oraclePriceLow
  oraclePriceOpen
  periodStartUnix
  perpetual
  shortVolume
  totalVolume
  txCount
}

type CandleSticksFourHour {
  close: BigDecimal!
  high: BigDecimal!
  id: ID!
  longVolume: BigDecimal!
  low: BigDecimal!
  open: BigDecimal
  oraclePriceClose: BigDecimal!
  oraclePriceHigh: BigDecimal!
  oraclePriceLow: BigDecimal!
  oraclePriceOpen: BigDecimal!
  periodStartUnix: Int!
  perpetual: Perpetual!
  shortVolume: BigDecimal!
  totalVolume: BigDecimal!
  txCount: Int!
}

input CandleSticksFourHour_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  close: BigDecimal
  close_gt: BigDecimal
  close_gte: BigDecimal
  close_in: [BigDecimal!]
  close_lt: BigDecimal
  close_lte: BigDecimal
  close_not: BigDecimal
  close_not_in: [BigDecimal!]
  high: BigDecimal
  high_gt: BigDecimal
  high_gte: BigDecimal
  high_in: [BigDecimal!]
  high_lt: BigDecimal
  high_lte: BigDecimal
  high_not: BigDecimal
  high_not_in: [BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  longVolume: BigDecimal
  longVolume_gt: BigDecimal
  longVolume_gte: BigDecimal
  longVolume_in: [BigDecimal!]
  longVolume_lt: BigDecimal
  longVolume_lte: BigDecimal
  longVolume_not: BigDecimal
  longVolume_not_in: [BigDecimal!]
  low: BigDecimal
  low_gt: BigDecimal
  low_gte: BigDecimal
  low_in: [BigDecimal!]
  low_lt: BigDecimal
  low_lte: BigDecimal
  low_not: BigDecimal
  low_not_in: [BigDecimal!]
  open: BigDecimal
  open_gt: BigDecimal
  open_gte: BigDecimal
  open_in: [BigDecimal!]
  open_lt: BigDecimal
  open_lte: BigDecimal
  open_not: BigDecimal
  open_not_in: [BigDecimal!]
  oraclePriceClose: BigDecimal
  oraclePriceClose_gt: BigDecimal
  oraclePriceClose_gte: BigDecimal
  oraclePriceClose_in: [BigDecimal!]
  oraclePriceClose_lt: BigDecimal
  oraclePriceClose_lte: BigDecimal
  oraclePriceClose_not: BigDecimal
  oraclePriceClose_not_in: [BigDecimal!]
  oraclePriceHigh: BigDecimal
  oraclePriceHigh_gt: BigDecimal
  oraclePriceHigh_gte: BigDecimal
  oraclePriceHigh_in: [BigDecimal!]
  oraclePriceHigh_lt: BigDecimal
  oraclePriceHigh_lte: BigDecimal
  oraclePriceHigh_not: BigDecimal
  oraclePriceHigh_not_in: [BigDecimal!]
  oraclePriceLow: BigDecimal
  oraclePriceLow_gt: BigDecimal
  oraclePriceLow_gte: BigDecimal
  oraclePriceLow_in: [BigDecimal!]
  oraclePriceLow_lt: BigDecimal
  oraclePriceLow_lte: BigDecimal
  oraclePriceLow_not: BigDecimal
  oraclePriceLow_not_in: [BigDecimal!]
  oraclePriceOpen: BigDecimal
  oraclePriceOpen_gt: BigDecimal
  oraclePriceOpen_gte: BigDecimal
  oraclePriceOpen_in: [BigDecimal!]
  oraclePriceOpen_lt: BigDecimal
  oraclePriceOpen_lte: BigDecimal
  oraclePriceOpen_not: BigDecimal
  oraclePriceOpen_not_in: [BigDecimal!]
  periodStartUnix: Int
  periodStartUnix_gt: Int
  periodStartUnix_gte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_lt: Int
  periodStartUnix_lte: Int
  periodStartUnix_not: Int
  periodStartUnix_not_in: [Int!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  shortVolume: BigDecimal
  shortVolume_gt: BigDecimal
  shortVolume_gte: BigDecimal
  shortVolume_in: [BigDecimal!]
  shortVolume_lt: BigDecimal
  shortVolume_lte: BigDecimal
  shortVolume_not: BigDecimal
  shortVolume_not_in: [BigDecimal!]
  totalVolume: BigDecimal
  totalVolume_gt: BigDecimal
  totalVolume_gte: BigDecimal
  totalVolume_in: [BigDecimal!]
  totalVolume_lt: BigDecimal
  totalVolume_lte: BigDecimal
  totalVolume_not: BigDecimal
  totalVolume_not_in: [BigDecimal!]
  txCount: Int
  txCount_gt: Int
  txCount_gte: Int
  txCount_in: [Int!]
  txCount_lt: Int
  txCount_lte: Int
  txCount_not: Int
  txCount_not_in: [Int!]
}

enum CandleSticksFourHour_orderBy {
  close
  high
  id
  longVolume
  low
  open
  oraclePriceClose
  oraclePriceHigh
  oraclePriceLow
  oraclePriceOpen
  periodStartUnix
  perpetual
  shortVolume
  totalVolume
  txCount
}

type CandleSticksHour {
  close: BigDecimal!
  high: BigDecimal!
  id: ID!
  longVolume: BigDecimal!
  low: BigDecimal!
  open: BigDecimal
  oraclePriceClose: BigDecimal!
  oraclePriceHigh: BigDecimal!
  oraclePriceLow: BigDecimal!
  oraclePriceOpen: BigDecimal!
  periodStartUnix: Int!
  perpetual: Perpetual!
  shortVolume: BigDecimal!
  totalVolume: BigDecimal!
  txCount: Int!
}

input CandleSticksHour_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  close: BigDecimal
  close_gt: BigDecimal
  close_gte: BigDecimal
  close_in: [BigDecimal!]
  close_lt: BigDecimal
  close_lte: BigDecimal
  close_not: BigDecimal
  close_not_in: [BigDecimal!]
  high: BigDecimal
  high_gt: BigDecimal
  high_gte: BigDecimal
  high_in: [BigDecimal!]
  high_lt: BigDecimal
  high_lte: BigDecimal
  high_not: BigDecimal
  high_not_in: [BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  longVolume: BigDecimal
  longVolume_gt: BigDecimal
  longVolume_gte: BigDecimal
  longVolume_in: [BigDecimal!]
  longVolume_lt: BigDecimal
  longVolume_lte: BigDecimal
  longVolume_not: BigDecimal
  longVolume_not_in: [BigDecimal!]
  low: BigDecimal
  low_gt: BigDecimal
  low_gte: BigDecimal
  low_in: [BigDecimal!]
  low_lt: BigDecimal
  low_lte: BigDecimal
  low_not: BigDecimal
  low_not_in: [BigDecimal!]
  open: BigDecimal
  open_gt: BigDecimal
  open_gte: BigDecimal
  open_in: [BigDecimal!]
  open_lt: BigDecimal
  open_lte: BigDecimal
  open_not: BigDecimal
  open_not_in: [BigDecimal!]
  oraclePriceClose: BigDecimal
  oraclePriceClose_gt: BigDecimal
  oraclePriceClose_gte: BigDecimal
  oraclePriceClose_in: [BigDecimal!]
  oraclePriceClose_lt: BigDecimal
  oraclePriceClose_lte: BigDecimal
  oraclePriceClose_not: BigDecimal
  oraclePriceClose_not_in: [BigDecimal!]
  oraclePriceHigh: BigDecimal
  oraclePriceHigh_gt: BigDecimal
  oraclePriceHigh_gte: BigDecimal
  oraclePriceHigh_in: [BigDecimal!]
  oraclePriceHigh_lt: BigDecimal
  oraclePriceHigh_lte: BigDecimal
  oraclePriceHigh_not: BigDecimal
  oraclePriceHigh_not_in: [BigDecimal!]
  oraclePriceLow: BigDecimal
  oraclePriceLow_gt: BigDecimal
  oraclePriceLow_gte: BigDecimal
  oraclePriceLow_in: [BigDecimal!]
  oraclePriceLow_lt: BigDecimal
  oraclePriceLow_lte: BigDecimal
  oraclePriceLow_not: BigDecimal
  oraclePriceLow_not_in: [BigDecimal!]
  oraclePriceOpen: BigDecimal
  oraclePriceOpen_gt: BigDecimal
  oraclePriceOpen_gte: BigDecimal
  oraclePriceOpen_in: [BigDecimal!]
  oraclePriceOpen_lt: BigDecimal
  oraclePriceOpen_lte: BigDecimal
  oraclePriceOpen_not: BigDecimal
  oraclePriceOpen_not_in: [BigDecimal!]
  periodStartUnix: Int
  periodStartUnix_gt: Int
  periodStartUnix_gte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_lt: Int
  periodStartUnix_lte: Int
  periodStartUnix_not: Int
  periodStartUnix_not_in: [Int!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  shortVolume: BigDecimal
  shortVolume_gt: BigDecimal
  shortVolume_gte: BigDecimal
  shortVolume_in: [BigDecimal!]
  shortVolume_lt: BigDecimal
  shortVolume_lte: BigDecimal
  shortVolume_not: BigDecimal
  shortVolume_not_in: [BigDecimal!]
  totalVolume: BigDecimal
  totalVolume_gt: BigDecimal
  totalVolume_gte: BigDecimal
  totalVolume_in: [BigDecimal!]
  totalVolume_lt: BigDecimal
  totalVolume_lte: BigDecimal
  totalVolume_not: BigDecimal
  totalVolume_not_in: [BigDecimal!]
  txCount: Int
  txCount_gt: Int
  txCount_gte: Int
  txCount_in: [Int!]
  txCount_lt: Int
  txCount_lte: Int
  txCount_not: Int
  txCount_not_in: [Int!]
}

enum CandleSticksHour_orderBy {
  close
  high
  id
  longVolume
  low
  open
  oraclePriceClose
  oraclePriceHigh
  oraclePriceLow
  oraclePriceOpen
  periodStartUnix
  perpetual
  shortVolume
  totalVolume
  txCount
}

type CandleSticksMinute {
  close: BigDecimal!
  high: BigDecimal!
  id: ID!
  longVolume: BigDecimal!
  low: BigDecimal!
  open: BigDecimal
  oraclePriceClose: BigDecimal!
  oraclePriceHigh: BigDecimal!
  oraclePriceLow: BigDecimal!
  oraclePriceOpen: BigDecimal!
  periodStartUnix: Int!
  perpetual: Perpetual!
  shortVolume: BigDecimal!
  totalVolume: BigDecimal!
  txCount: Int!
}

input CandleSticksMinute_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  close: BigDecimal
  close_gt: BigDecimal
  close_gte: BigDecimal
  close_in: [BigDecimal!]
  close_lt: BigDecimal
  close_lte: BigDecimal
  close_not: BigDecimal
  close_not_in: [BigDecimal!]
  high: BigDecimal
  high_gt: BigDecimal
  high_gte: BigDecimal
  high_in: [BigDecimal!]
  high_lt: BigDecimal
  high_lte: BigDecimal
  high_not: BigDecimal
  high_not_in: [BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  longVolume: BigDecimal
  longVolume_gt: BigDecimal
  longVolume_gte: BigDecimal
  longVolume_in: [BigDecimal!]
  longVolume_lt: BigDecimal
  longVolume_lte: BigDecimal
  longVolume_not: BigDecimal
  longVolume_not_in: [BigDecimal!]
  low: BigDecimal
  low_gt: BigDecimal
  low_gte: BigDecimal
  low_in: [BigDecimal!]
  low_lt: BigDecimal
  low_lte: BigDecimal
  low_not: BigDecimal
  low_not_in: [BigDecimal!]
  open: BigDecimal
  open_gt: BigDecimal
  open_gte: BigDecimal
  open_in: [BigDecimal!]
  open_lt: BigDecimal
  open_lte: BigDecimal
  open_not: BigDecimal
  open_not_in: [BigDecimal!]
  oraclePriceClose: BigDecimal
  oraclePriceClose_gt: BigDecimal
  oraclePriceClose_gte: BigDecimal
  oraclePriceClose_in: [BigDecimal!]
  oraclePriceClose_lt: BigDecimal
  oraclePriceClose_lte: BigDecimal
  oraclePriceClose_not: BigDecimal
  oraclePriceClose_not_in: [BigDecimal!]
  oraclePriceHigh: BigDecimal
  oraclePriceHigh_gt: BigDecimal
  oraclePriceHigh_gte: BigDecimal
  oraclePriceHigh_in: [BigDecimal!]
  oraclePriceHigh_lt: BigDecimal
  oraclePriceHigh_lte: BigDecimal
  oraclePriceHigh_not: BigDecimal
  oraclePriceHigh_not_in: [BigDecimal!]
  oraclePriceLow: BigDecimal
  oraclePriceLow_gt: BigDecimal
  oraclePriceLow_gte: BigDecimal
  oraclePriceLow_in: [BigDecimal!]
  oraclePriceLow_lt: BigDecimal
  oraclePriceLow_lte: BigDecimal
  oraclePriceLow_not: BigDecimal
  oraclePriceLow_not_in: [BigDecimal!]
  oraclePriceOpen: BigDecimal
  oraclePriceOpen_gt: BigDecimal
  oraclePriceOpen_gte: BigDecimal
  oraclePriceOpen_in: [BigDecimal!]
  oraclePriceOpen_lt: BigDecimal
  oraclePriceOpen_lte: BigDecimal
  oraclePriceOpen_not: BigDecimal
  oraclePriceOpen_not_in: [BigDecimal!]
  periodStartUnix: Int
  periodStartUnix_gt: Int
  periodStartUnix_gte: Int
  periodStartUnix_in: [Int!]
  periodStartUnix_lt: Int
  periodStartUnix_lte: Int
  periodStartUnix_not: Int
  periodStartUnix_not_in: [Int!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  shortVolume: BigDecimal
  shortVolume_gt: BigDecimal
  shortVolume_gte: BigDecimal
  shortVolume_in: [BigDecimal!]
  shortVolume_lt: BigDecimal
  shortVolume_lte: BigDecimal
  shortVolume_not: BigDecimal
  shortVolume_not_in: [BigDecimal!]
  totalVolume: BigDecimal
  totalVolume_gt: BigDecimal
  totalVolume_gte: BigDecimal
  totalVolume_in: [BigDecimal!]
  totalVolume_lt: BigDecimal
  totalVolume_lte: BigDecimal
  totalVolume_not: BigDecimal
  totalVolume_not_in: [BigDecimal!]
  txCount: Int
  txCount_gt: Int
  txCount_gte: Int
  txCount_in: [Int!]
  txCount_lt: Int
  txCount_lte: Int
  txCount_not: Int
  txCount_not_in: [Int!]
}

enum CandleSticksMinute_orderBy {
  close
  high
  id
  longVolume
  low
  open
  oraclePriceClose
  oraclePriceHigh
  oraclePriceLow
  oraclePriceOpen
  periodStartUnix
  perpetual
  shortVolume
  totalVolume
  txCount
}

type Clear {
  id: ID!
  perpetualId: Bytes!
  trader: Bytes!
}

input Clear_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
  trader: Bytes
  trader_contains: Bytes
  trader_in: [Bytes!]
  trader_not: Bytes
  trader_not_contains: Bytes
  trader_not_in: [Bytes!]
}

enum Clear_orderBy {
  id
  perpetualId
  trader
}

type DistributeFee {
  blockTimestamp: BigInt!
  id: ID!
  liquidityPool: LiquidityPool!
  participationFundFeeCC: BigInt!
  perpetual: Perpetual!
  protocolFeeCC: BigInt!
  trader: Trader!
}

input DistributeFee_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  liquidityPool: String
  liquidityPool_: LiquidityPool_filter
  liquidityPool_contains: String
  liquidityPool_contains_nocase: String
  liquidityPool_ends_with: String
  liquidityPool_ends_with_nocase: String
  liquidityPool_gt: String
  liquidityPool_gte: String
  liquidityPool_in: [String!]
  liquidityPool_lt: String
  liquidityPool_lte: String
  liquidityPool_not: String
  liquidityPool_not_contains: String
  liquidityPool_not_contains_nocase: String
  liquidityPool_not_ends_with: String
  liquidityPool_not_ends_with_nocase: String
  liquidityPool_not_in: [String!]
  liquidityPool_not_starts_with: String
  liquidityPool_not_starts_with_nocase: String
  liquidityPool_starts_with: String
  liquidityPool_starts_with_nocase: String
  participationFundFeeCC: BigInt
  participationFundFeeCC_gt: BigInt
  participationFundFeeCC_gte: BigInt
  participationFundFeeCC_in: [BigInt!]
  participationFundFeeCC_lt: BigInt
  participationFundFeeCC_lte: BigInt
  participationFundFeeCC_not: BigInt
  participationFundFeeCC_not_in: [BigInt!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  protocolFeeCC: BigInt
  protocolFeeCC_gt: BigInt
  protocolFeeCC_gte: BigInt
  protocolFeeCC_in: [BigInt!]
  protocolFeeCC_lt: BigInt
  protocolFeeCC_lte: BigInt
  protocolFeeCC_not: BigInt
  protocolFeeCC_not_in: [BigInt!]
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
}

enum DistributeFee_orderBy {
  blockTimestamp
  id
  liquidityPool
  participationFundFeeCC
  perpetual
  protocolFeeCC
  trader
}

type Fund {
  cash: BigInt!
  createdAtBlockNumber: BigInt!
  createdAtTimestamp: BigInt!
  id: ID!
  liquidityPool: LiquidityPool
  targetSize: BigInt!
  type: FundType!
  updatedAtBlockNumber: BigInt!
  updatedAtTimestamp: BigInt!
}

enum FundType {
  AMMFund
  DefaultFund
  ParticipationFund
}

input Fund_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  cash: BigInt
  cash_gt: BigInt
  cash_gte: BigInt
  cash_in: [BigInt!]
  cash_lt: BigInt
  cash_lte: BigInt
  cash_not: BigInt
  cash_not_in: [BigInt!]
  createdAtBlockNumber: BigInt
  createdAtBlockNumber_gt: BigInt
  createdAtBlockNumber_gte: BigInt
  createdAtBlockNumber_in: [BigInt!]
  createdAtBlockNumber_lt: BigInt
  createdAtBlockNumber_lte: BigInt
  createdAtBlockNumber_not: BigInt
  createdAtBlockNumber_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  liquidityPool: String
  liquidityPool_: LiquidityPool_filter
  liquidityPool_contains: String
  liquidityPool_contains_nocase: String
  liquidityPool_ends_with: String
  liquidityPool_ends_with_nocase: String
  liquidityPool_gt: String
  liquidityPool_gte: String
  liquidityPool_in: [String!]
  liquidityPool_lt: String
  liquidityPool_lte: String
  liquidityPool_not: String
  liquidityPool_not_contains: String
  liquidityPool_not_contains_nocase: String
  liquidityPool_not_ends_with: String
  liquidityPool_not_ends_with_nocase: String
  liquidityPool_not_in: [String!]
  liquidityPool_not_starts_with: String
  liquidityPool_not_starts_with_nocase: String
  liquidityPool_starts_with: String
  liquidityPool_starts_with_nocase: String
  targetSize: BigInt
  targetSize_gt: BigInt
  targetSize_gte: BigInt
  targetSize_in: [BigInt!]
  targetSize_lt: BigInt
  targetSize_lte: BigInt
  targetSize_not: BigInt
  targetSize_not_in: [BigInt!]
  type: FundType
  type_in: [FundType!]
  type_not: FundType
  type_not_in: [FundType!]
  updatedAtBlockNumber: BigInt
  updatedAtBlockNumber_gt: BigInt
  updatedAtBlockNumber_gte: BigInt
  updatedAtBlockNumber_in: [BigInt!]
  updatedAtBlockNumber_lt: BigInt
  updatedAtBlockNumber_lte: BigInt
  updatedAtBlockNumber_not: BigInt
  updatedAtBlockNumber_not_in: [BigInt!]
  updatedAtTimestamp: BigInt
  updatedAtTimestamp_gt: BigInt
  updatedAtTimestamp_gte: BigInt
  updatedAtTimestamp_in: [BigInt!]
  updatedAtTimestamp_lt: BigInt
  updatedAtTimestamp_lte: BigInt
  updatedAtTimestamp_not: BigInt
  updatedAtTimestamp_not_in: [BigInt!]
}

enum Fund_orderBy {
  cash
  createdAtBlockNumber
  createdAtTimestamp
  id
  liquidityPool
  targetSize
  type
  updatedAtBlockNumber
  updatedAtTimestamp
}

type FundingPayment {
  fundingRates(
    first: Int = 100
    orderBy: FundingRate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: FundingRate_filter
  ): [FundingRate!]
  id: ID!
  lastBlockTimestamp: BigInt!
  position: Position!
  trader: Trader!
}

input FundingPayment_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  fundingRates_: FundingRate_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lastBlockTimestamp: BigInt
  lastBlockTimestamp_gt: BigInt
  lastBlockTimestamp_gte: BigInt
  lastBlockTimestamp_in: [BigInt!]
  lastBlockTimestamp_lt: BigInt
  lastBlockTimestamp_lte: BigInt
  lastBlockTimestamp_not: BigInt
  lastBlockTimestamp_not_in: [BigInt!]
  position: String
  position_: Position_filter
  position_contains: String
  position_contains_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_gt: String
  position_gte: String
  position_in: [String!]
  position_lt: String
  position_lte: String
  position_not: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_not_in: [String!]
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
}

enum FundingPayment_orderBy {
  fundingRates
  id
  lastBlockTimestamp
  position
  trader
}

type FundingRate {
  blockTimestamp: BigInt!
  deltaTime: BigInt!
  fFundingPaymentCC: BigInt!
  fPositionBC: BigInt!
  fundingPayment: FundingPayment!
  fundingRate: BigInt!
  fundingTime: BigInt!
  id: ID!
  rate8h: BigInt!
  trader: Trader!
}

input FundingRate_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  deltaTime: BigInt
  deltaTime_gt: BigInt
  deltaTime_gte: BigInt
  deltaTime_in: [BigInt!]
  deltaTime_lt: BigInt
  deltaTime_lte: BigInt
  deltaTime_not: BigInt
  deltaTime_not_in: [BigInt!]
  fFundingPaymentCC: BigInt
  fFundingPaymentCC_gt: BigInt
  fFundingPaymentCC_gte: BigInt
  fFundingPaymentCC_in: [BigInt!]
  fFundingPaymentCC_lt: BigInt
  fFundingPaymentCC_lte: BigInt
  fFundingPaymentCC_not: BigInt
  fFundingPaymentCC_not_in: [BigInt!]
  fPositionBC: BigInt
  fPositionBC_gt: BigInt
  fPositionBC_gte: BigInt
  fPositionBC_in: [BigInt!]
  fPositionBC_lt: BigInt
  fPositionBC_lte: BigInt
  fPositionBC_not: BigInt
  fPositionBC_not_in: [BigInt!]
  fundingPayment: String
  fundingPayment_: FundingPayment_filter
  fundingPayment_contains: String
  fundingPayment_contains_nocase: String
  fundingPayment_ends_with: String
  fundingPayment_ends_with_nocase: String
  fundingPayment_gt: String
  fundingPayment_gte: String
  fundingPayment_in: [String!]
  fundingPayment_lt: String
  fundingPayment_lte: String
  fundingPayment_not: String
  fundingPayment_not_contains: String
  fundingPayment_not_contains_nocase: String
  fundingPayment_not_ends_with: String
  fundingPayment_not_ends_with_nocase: String
  fundingPayment_not_in: [String!]
  fundingPayment_not_starts_with: String
  fundingPayment_not_starts_with_nocase: String
  fundingPayment_starts_with: String
  fundingPayment_starts_with_nocase: String
  fundingRate: BigInt
  fundingRate_gt: BigInt
  fundingRate_gte: BigInt
  fundingRate_in: [BigInt!]
  fundingRate_lt: BigInt
  fundingRate_lte: BigInt
  fundingRate_not: BigInt
  fundingRate_not_in: [BigInt!]
  fundingTime: BigInt
  fundingTime_gt: BigInt
  fundingTime_gte: BigInt
  fundingTime_in: [BigInt!]
  fundingTime_lt: BigInt
  fundingTime_lte: BigInt
  fundingTime_not: BigInt
  fundingTime_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  rate8h: BigInt
  rate8h_gt: BigInt
  rate8h_gte: BigInt
  rate8h_in: [BigInt!]
  rate8h_lt: BigInt
  rate8h_lte: BigInt
  rate8h_not: BigInt
  rate8h_not_in: [BigInt!]
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
}

enum FundingRate_orderBy {
  blockTimestamp
  deltaTime
  fFundingPaymentCC
  fPositionBC
  fundingPayment
  fundingRate
  fundingTime
  id
  rate8h
  trader
}

type ImplementationChanged {
  _newImplementation: Bytes!
  _oldImplementation: Bytes!
  _sig: Bytes!
  id: ID!
}

input ImplementationChanged_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  _newImplementation: Bytes
  _newImplementation_contains: Bytes
  _newImplementation_in: [Bytes!]
  _newImplementation_not: Bytes
  _newImplementation_not_contains: Bytes
  _newImplementation_not_in: [Bytes!]
  _oldImplementation: Bytes
  _oldImplementation_contains: Bytes
  _oldImplementation_in: [Bytes!]
  _oldImplementation_not: Bytes
  _oldImplementation_not_contains: Bytes
  _oldImplementation_not_in: [Bytes!]
  _sig: Bytes
  _sig_contains: Bytes
  _sig_in: [Bytes!]
  _sig_not: Bytes
  _sig_not_contains: Bytes
  _sig_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
}

enum ImplementationChanged_orderBy {
  _newImplementation
  _oldImplementation
  _sig
  id
}

type LimitOrder {
  createdTimestamp: BigInt!
  createdTransactionHash: Bytes!
  deadline: BigInt!
  digest: Bytes!
  flags: BigInt!
  id: ID!
  leverage: BigInt!
  limitPrice: BigInt!
  perpetual: Perpetual!
  referrerAddr: Trader
  state: LimitOrderState!
  tradeAmount: BigInt!
  trader: Trader!
  triggerPrice: BigInt!
}

enum LimitOrderState {
  Active
  Cancelled
  Filled
}

input LimitOrder_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  createdTimestamp: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_lt: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_not_in: [BigInt!]
  createdTransactionHash: Bytes
  createdTransactionHash_contains: Bytes
  createdTransactionHash_in: [Bytes!]
  createdTransactionHash_not: Bytes
  createdTransactionHash_not_contains: Bytes
  createdTransactionHash_not_in: [Bytes!]
  deadline: BigInt
  deadline_gt: BigInt
  deadline_gte: BigInt
  deadline_in: [BigInt!]
  deadline_lt: BigInt
  deadline_lte: BigInt
  deadline_not: BigInt
  deadline_not_in: [BigInt!]
  digest: Bytes
  digest_contains: Bytes
  digest_in: [Bytes!]
  digest_not: Bytes
  digest_not_contains: Bytes
  digest_not_in: [Bytes!]
  flags: BigInt
  flags_gt: BigInt
  flags_gte: BigInt
  flags_in: [BigInt!]
  flags_lt: BigInt
  flags_lte: BigInt
  flags_not: BigInt
  flags_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  leverage: BigInt
  leverage_gt: BigInt
  leverage_gte: BigInt
  leverage_in: [BigInt!]
  leverage_lt: BigInt
  leverage_lte: BigInt
  leverage_not: BigInt
  leverage_not_in: [BigInt!]
  limitPrice: BigInt
  limitPrice_gt: BigInt
  limitPrice_gte: BigInt
  limitPrice_in: [BigInt!]
  limitPrice_lt: BigInt
  limitPrice_lte: BigInt
  limitPrice_not: BigInt
  limitPrice_not_in: [BigInt!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  referrerAddr: String
  referrerAddr_: Trader_filter
  referrerAddr_contains: String
  referrerAddr_contains_nocase: String
  referrerAddr_ends_with: String
  referrerAddr_ends_with_nocase: String
  referrerAddr_gt: String
  referrerAddr_gte: String
  referrerAddr_in: [String!]
  referrerAddr_lt: String
  referrerAddr_lte: String
  referrerAddr_not: String
  referrerAddr_not_contains: String
  referrerAddr_not_contains_nocase: String
  referrerAddr_not_ends_with: String
  referrerAddr_not_ends_with_nocase: String
  referrerAddr_not_in: [String!]
  referrerAddr_not_starts_with: String
  referrerAddr_not_starts_with_nocase: String
  referrerAddr_starts_with: String
  referrerAddr_starts_with_nocase: String
  state: LimitOrderState
  state_in: [LimitOrderState!]
  state_not: LimitOrderState
  state_not_in: [LimitOrderState!]
  tradeAmount: BigInt
  tradeAmount_gt: BigInt
  tradeAmount_gte: BigInt
  tradeAmount_in: [BigInt!]
  tradeAmount_lt: BigInt
  tradeAmount_lte: BigInt
  tradeAmount_not: BigInt
  tradeAmount_not_in: [BigInt!]
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
  triggerPrice: BigInt
  triggerPrice_gt: BigInt
  triggerPrice_gte: BigInt
  triggerPrice_in: [BigInt!]
  triggerPrice_lt: BigInt
  triggerPrice_lte: BigInt
  triggerPrice_not: BigInt
  triggerPrice_not_in: [BigInt!]
}

enum LimitOrder_orderBy {
  createdTimestamp
  createdTransactionHash
  deadline
  digest
  flags
  id
  leverage
  limitPrice
  perpetual
  referrerAddr
  state
  tradeAmount
  trader
  triggerPrice
}

type Liquidate {
  amountLiquidatedBC: BigInt!
  blockTimestamp: BigInt!
  id: ID!
  liquidationPrice: BigInt!
  liquidator: Trader!
  newPositionSizeBC: BigInt!
  perpetual: Perpetual!
  position: Position!
  trader: Trader!
  transaction: Transaction!
}

input Liquidate_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  amountLiquidatedBC: BigInt
  amountLiquidatedBC_gt: BigInt
  amountLiquidatedBC_gte: BigInt
  amountLiquidatedBC_in: [BigInt!]
  amountLiquidatedBC_lt: BigInt
  amountLiquidatedBC_lte: BigInt
  amountLiquidatedBC_not: BigInt
  amountLiquidatedBC_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  liquidationPrice: BigInt
  liquidationPrice_gt: BigInt
  liquidationPrice_gte: BigInt
  liquidationPrice_in: [BigInt!]
  liquidationPrice_lt: BigInt
  liquidationPrice_lte: BigInt
  liquidationPrice_not: BigInt
  liquidationPrice_not_in: [BigInt!]
  liquidator: String
  liquidator_: Trader_filter
  liquidator_contains: String
  liquidator_contains_nocase: String
  liquidator_ends_with: String
  liquidator_ends_with_nocase: String
  liquidator_gt: String
  liquidator_gte: String
  liquidator_in: [String!]
  liquidator_lt: String
  liquidator_lte: String
  liquidator_not: String
  liquidator_not_contains: String
  liquidator_not_contains_nocase: String
  liquidator_not_ends_with: String
  liquidator_not_ends_with_nocase: String
  liquidator_not_in: [String!]
  liquidator_not_starts_with: String
  liquidator_not_starts_with_nocase: String
  liquidator_starts_with: String
  liquidator_starts_with_nocase: String
  newPositionSizeBC: BigInt
  newPositionSizeBC_gt: BigInt
  newPositionSizeBC_gte: BigInt
  newPositionSizeBC_in: [BigInt!]
  newPositionSizeBC_lt: BigInt
  newPositionSizeBC_lte: BigInt
  newPositionSizeBC_not: BigInt
  newPositionSizeBC_not_in: [BigInt!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  position: String
  position_: Position_filter
  position_contains: String
  position_contains_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_gt: String
  position_gte: String
  position_in: [String!]
  position_lt: String
  position_lte: String
  position_not: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_not_in: [String!]
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum Liquidate_orderBy {
  amountLiquidatedBC
  blockTimestamp
  id
  liquidationPrice
  liquidator
  newPositionSizeBC
  perpetual
  position
  trader
  transaction
}

type LiquidityAdded {
  id: ID!
  poolId: BigInt!
  shareAmount: BigInt!
  tokenAmount: BigInt!
  user: Trader!
}

input LiquidityAdded_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  poolId: BigInt
  poolId_gt: BigInt
  poolId_gte: BigInt
  poolId_in: [BigInt!]
  poolId_lt: BigInt
  poolId_lte: BigInt
  poolId_not: BigInt
  poolId_not_in: [BigInt!]
  shareAmount: BigInt
  shareAmount_gt: BigInt
  shareAmount_gte: BigInt
  shareAmount_in: [BigInt!]
  shareAmount_lt: BigInt
  shareAmount_lte: BigInt
  shareAmount_not: BigInt
  shareAmount_not_in: [BigInt!]
  tokenAmount: BigInt
  tokenAmount_gt: BigInt
  tokenAmount_gte: BigInt
  tokenAmount_in: [BigInt!]
  tokenAmount_lt: BigInt
  tokenAmount_lte: BigInt
  tokenAmount_not: BigInt
  tokenAmount_not_in: [BigInt!]
  user: String
  user_: Trader_filter
  user_contains: String
  user_contains_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
}

enum LiquidityAdded_orderBy {
  id
  poolId
  shareAmount
  tokenAmount
  user
}

type LiquidityPool {
  atomicYields(
    first: Int = 100
    orderBy: AtomicYield_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: AtomicYield_filter
  ): [AtomicYield!]
  createdAtTx: Transaction!
  distributeFees(
    first: Int = 100
    orderBy: DistributeFee_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: DistributeFee_filter
  ): [DistributeFee!]
  fMaxTotalTraderFunds: BigInt!
  fPnLparticipantWithdrawalMinAmountLimit: BigInt!
  fPnLparticipantWithdrawalPercentageLimit: BigInt!
  fPnLparticipantsCashCC: BigInt!
  fRedemptionRate: BigInt!
  funds(
    first: Int = 100
    orderBy: Fund_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Fund_filter
  ): [Fund!]
  iActivePerpetualCount: Int!
  iPerpetualCount: Int!
  iPnLparticipantWithdrawalPeriod: BigInt!
  iPriceUpdateTimeSec: BigInt!
  iTargetPoolSizeUpdateTime: BigInt!
  id: ID!
  isRunning: Boolean!
  marginToken: Token!
  participationFundLastUpdated: BigInt!
  perpetuals(
    first: Int = 100
    orderBy: Perpetual_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Perpetual_filter
  ): [Perpetual!]
  shareToken: Token!
  totalAmountDeposited: BigInt!
  traderPools(
    first: Int = 100
    orderBy: TraderPool_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: TraderPool_filter
  ): [TraderPool!]
  treasuryAddress: Bytes!
  updatedAtTx: Transaction!
}

type LiquidityPoolCreated {
  fPnLparticipantWithdrawalMinAmountLimit: BigInt!
  fPnLparticipantWithdrawalPercentageLimit: BigInt!
  iPnLparticipantWithdrawalPeriod: BigInt!
  iTargetPoolSizeUpdateTime: BigInt!
  id: ID!
  marginToken: Token!
  poolId: Int!
  shareToken: Token!
  treasuryAddress: Bytes!
}

input LiquidityPoolCreated_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  fPnLparticipantWithdrawalMinAmountLimit: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_gt: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_gte: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_in: [BigInt!]
  fPnLparticipantWithdrawalMinAmountLimit_lt: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_lte: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_not: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_not_in: [BigInt!]
  fPnLparticipantWithdrawalPercentageLimit: BigInt
  fPnLparticipantWithdrawalPercentageLimit_gt: BigInt
  fPnLparticipantWithdrawalPercentageLimit_gte: BigInt
  fPnLparticipantWithdrawalPercentageLimit_in: [BigInt!]
  fPnLparticipantWithdrawalPercentageLimit_lt: BigInt
  fPnLparticipantWithdrawalPercentageLimit_lte: BigInt
  fPnLparticipantWithdrawalPercentageLimit_not: BigInt
  fPnLparticipantWithdrawalPercentageLimit_not_in: [BigInt!]
  iPnLparticipantWithdrawalPeriod: BigInt
  iPnLparticipantWithdrawalPeriod_gt: BigInt
  iPnLparticipantWithdrawalPeriod_gte: BigInt
  iPnLparticipantWithdrawalPeriod_in: [BigInt!]
  iPnLparticipantWithdrawalPeriod_lt: BigInt
  iPnLparticipantWithdrawalPeriod_lte: BigInt
  iPnLparticipantWithdrawalPeriod_not: BigInt
  iPnLparticipantWithdrawalPeriod_not_in: [BigInt!]
  iTargetPoolSizeUpdateTime: BigInt
  iTargetPoolSizeUpdateTime_gt: BigInt
  iTargetPoolSizeUpdateTime_gte: BigInt
  iTargetPoolSizeUpdateTime_in: [BigInt!]
  iTargetPoolSizeUpdateTime_lt: BigInt
  iTargetPoolSizeUpdateTime_lte: BigInt
  iTargetPoolSizeUpdateTime_not: BigInt
  iTargetPoolSizeUpdateTime_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  marginToken: String
  marginToken_: Token_filter
  marginToken_contains: String
  marginToken_contains_nocase: String
  marginToken_ends_with: String
  marginToken_ends_with_nocase: String
  marginToken_gt: String
  marginToken_gte: String
  marginToken_in: [String!]
  marginToken_lt: String
  marginToken_lte: String
  marginToken_not: String
  marginToken_not_contains: String
  marginToken_not_contains_nocase: String
  marginToken_not_ends_with: String
  marginToken_not_ends_with_nocase: String
  marginToken_not_in: [String!]
  marginToken_not_starts_with: String
  marginToken_not_starts_with_nocase: String
  marginToken_starts_with: String
  marginToken_starts_with_nocase: String
  poolId: Int
  poolId_gt: Int
  poolId_gte: Int
  poolId_in: [Int!]
  poolId_lt: Int
  poolId_lte: Int
  poolId_not: Int
  poolId_not_in: [Int!]
  shareToken: String
  shareToken_: Token_filter
  shareToken_contains: String
  shareToken_contains_nocase: String
  shareToken_ends_with: String
  shareToken_ends_with_nocase: String
  shareToken_gt: String
  shareToken_gte: String
  shareToken_in: [String!]
  shareToken_lt: String
  shareToken_lte: String
  shareToken_not: String
  shareToken_not_contains: String
  shareToken_not_contains_nocase: String
  shareToken_not_ends_with: String
  shareToken_not_ends_with_nocase: String
  shareToken_not_in: [String!]
  shareToken_not_starts_with: String
  shareToken_not_starts_with_nocase: String
  shareToken_starts_with: String
  shareToken_starts_with_nocase: String
  treasuryAddress: Bytes
  treasuryAddress_contains: Bytes
  treasuryAddress_in: [Bytes!]
  treasuryAddress_not: Bytes
  treasuryAddress_not_contains: Bytes
  treasuryAddress_not_in: [Bytes!]
}

enum LiquidityPoolCreated_orderBy {
  fPnLparticipantWithdrawalMinAmountLimit
  fPnLparticipantWithdrawalPercentageLimit
  iPnLparticipantWithdrawalPeriod
  iTargetPoolSizeUpdateTime
  id
  marginToken
  poolId
  shareToken
  treasuryAddress
}

input LiquidityPool_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  atomicYields_: AtomicYield_filter
  createdAtTx: String
  createdAtTx_: Transaction_filter
  createdAtTx_contains: String
  createdAtTx_contains_nocase: String
  createdAtTx_ends_with: String
  createdAtTx_ends_with_nocase: String
  createdAtTx_gt: String
  createdAtTx_gte: String
  createdAtTx_in: [String!]
  createdAtTx_lt: String
  createdAtTx_lte: String
  createdAtTx_not: String
  createdAtTx_not_contains: String
  createdAtTx_not_contains_nocase: String
  createdAtTx_not_ends_with: String
  createdAtTx_not_ends_with_nocase: String
  createdAtTx_not_in: [String!]
  createdAtTx_not_starts_with: String
  createdAtTx_not_starts_with_nocase: String
  createdAtTx_starts_with: String
  createdAtTx_starts_with_nocase: String
  distributeFees_: DistributeFee_filter
  fMaxTotalTraderFunds: BigInt
  fMaxTotalTraderFunds_gt: BigInt
  fMaxTotalTraderFunds_gte: BigInt
  fMaxTotalTraderFunds_in: [BigInt!]
  fMaxTotalTraderFunds_lt: BigInt
  fMaxTotalTraderFunds_lte: BigInt
  fMaxTotalTraderFunds_not: BigInt
  fMaxTotalTraderFunds_not_in: [BigInt!]
  fPnLparticipantWithdrawalMinAmountLimit: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_gt: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_gte: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_in: [BigInt!]
  fPnLparticipantWithdrawalMinAmountLimit_lt: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_lte: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_not: BigInt
  fPnLparticipantWithdrawalMinAmountLimit_not_in: [BigInt!]
  fPnLparticipantWithdrawalPercentageLimit: BigInt
  fPnLparticipantWithdrawalPercentageLimit_gt: BigInt
  fPnLparticipantWithdrawalPercentageLimit_gte: BigInt
  fPnLparticipantWithdrawalPercentageLimit_in: [BigInt!]
  fPnLparticipantWithdrawalPercentageLimit_lt: BigInt
  fPnLparticipantWithdrawalPercentageLimit_lte: BigInt
  fPnLparticipantWithdrawalPercentageLimit_not: BigInt
  fPnLparticipantWithdrawalPercentageLimit_not_in: [BigInt!]
  fPnLparticipantsCashCC: BigInt
  fPnLparticipantsCashCC_gt: BigInt
  fPnLparticipantsCashCC_gte: BigInt
  fPnLparticipantsCashCC_in: [BigInt!]
  fPnLparticipantsCashCC_lt: BigInt
  fPnLparticipantsCashCC_lte: BigInt
  fPnLparticipantsCashCC_not: BigInt
  fPnLparticipantsCashCC_not_in: [BigInt!]
  fRedemptionRate: BigInt
  fRedemptionRate_gt: BigInt
  fRedemptionRate_gte: BigInt
  fRedemptionRate_in: [BigInt!]
  fRedemptionRate_lt: BigInt
  fRedemptionRate_lte: BigInt
  fRedemptionRate_not: BigInt
  fRedemptionRate_not_in: [BigInt!]
  funds_: Fund_filter
  iActivePerpetualCount: Int
  iActivePerpetualCount_gt: Int
  iActivePerpetualCount_gte: Int
  iActivePerpetualCount_in: [Int!]
  iActivePerpetualCount_lt: Int
  iActivePerpetualCount_lte: Int
  iActivePerpetualCount_not: Int
  iActivePerpetualCount_not_in: [Int!]
  iPerpetualCount: Int
  iPerpetualCount_gt: Int
  iPerpetualCount_gte: Int
  iPerpetualCount_in: [Int!]
  iPerpetualCount_lt: Int
  iPerpetualCount_lte: Int
  iPerpetualCount_not: Int
  iPerpetualCount_not_in: [Int!]
  iPnLparticipantWithdrawalPeriod: BigInt
  iPnLparticipantWithdrawalPeriod_gt: BigInt
  iPnLparticipantWithdrawalPeriod_gte: BigInt
  iPnLparticipantWithdrawalPeriod_in: [BigInt!]
  iPnLparticipantWithdrawalPeriod_lt: BigInt
  iPnLparticipantWithdrawalPeriod_lte: BigInt
  iPnLparticipantWithdrawalPeriod_not: BigInt
  iPnLparticipantWithdrawalPeriod_not_in: [BigInt!]
  iPriceUpdateTimeSec: BigInt
  iPriceUpdateTimeSec_gt: BigInt
  iPriceUpdateTimeSec_gte: BigInt
  iPriceUpdateTimeSec_in: [BigInt!]
  iPriceUpdateTimeSec_lt: BigInt
  iPriceUpdateTimeSec_lte: BigInt
  iPriceUpdateTimeSec_not: BigInt
  iPriceUpdateTimeSec_not_in: [BigInt!]
  iTargetPoolSizeUpdateTime: BigInt
  iTargetPoolSizeUpdateTime_gt: BigInt
  iTargetPoolSizeUpdateTime_gte: BigInt
  iTargetPoolSizeUpdateTime_in: [BigInt!]
  iTargetPoolSizeUpdateTime_lt: BigInt
  iTargetPoolSizeUpdateTime_lte: BigInt
  iTargetPoolSizeUpdateTime_not: BigInt
  iTargetPoolSizeUpdateTime_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isRunning: Boolean
  isRunning_in: [Boolean!]
  isRunning_not: Boolean
  isRunning_not_in: [Boolean!]
  marginToken: String
  marginToken_: Token_filter
  marginToken_contains: String
  marginToken_contains_nocase: String
  marginToken_ends_with: String
  marginToken_ends_with_nocase: String
  marginToken_gt: String
  marginToken_gte: String
  marginToken_in: [String!]
  marginToken_lt: String
  marginToken_lte: String
  marginToken_not: String
  marginToken_not_contains: String
  marginToken_not_contains_nocase: String
  marginToken_not_ends_with: String
  marginToken_not_ends_with_nocase: String
  marginToken_not_in: [String!]
  marginToken_not_starts_with: String
  marginToken_not_starts_with_nocase: String
  marginToken_starts_with: String
  marginToken_starts_with_nocase: String
  participationFundLastUpdated: BigInt
  participationFundLastUpdated_gt: BigInt
  participationFundLastUpdated_gte: BigInt
  participationFundLastUpdated_in: [BigInt!]
  participationFundLastUpdated_lt: BigInt
  participationFundLastUpdated_lte: BigInt
  participationFundLastUpdated_not: BigInt
  participationFundLastUpdated_not_in: [BigInt!]
  perpetuals_: Perpetual_filter
  shareToken: String
  shareToken_: Token_filter
  shareToken_contains: String
  shareToken_contains_nocase: String
  shareToken_ends_with: String
  shareToken_ends_with_nocase: String
  shareToken_gt: String
  shareToken_gte: String
  shareToken_in: [String!]
  shareToken_lt: String
  shareToken_lte: String
  shareToken_not: String
  shareToken_not_contains: String
  shareToken_not_contains_nocase: String
  shareToken_not_ends_with: String
  shareToken_not_ends_with_nocase: String
  shareToken_not_in: [String!]
  shareToken_not_starts_with: String
  shareToken_not_starts_with_nocase: String
  shareToken_starts_with: String
  shareToken_starts_with_nocase: String
  totalAmountDeposited: BigInt
  totalAmountDeposited_gt: BigInt
  totalAmountDeposited_gte: BigInt
  totalAmountDeposited_in: [BigInt!]
  totalAmountDeposited_lt: BigInt
  totalAmountDeposited_lte: BigInt
  totalAmountDeposited_not: BigInt
  totalAmountDeposited_not_in: [BigInt!]
  traderPools_: TraderPool_filter
  treasuryAddress: Bytes
  treasuryAddress_contains: Bytes
  treasuryAddress_in: [Bytes!]
  treasuryAddress_not: Bytes
  treasuryAddress_not_contains: Bytes
  treasuryAddress_not_in: [Bytes!]
  updatedAtTx: String
  updatedAtTx_: Transaction_filter
  updatedAtTx_contains: String
  updatedAtTx_contains_nocase: String
  updatedAtTx_ends_with: String
  updatedAtTx_ends_with_nocase: String
  updatedAtTx_gt: String
  updatedAtTx_gte: String
  updatedAtTx_in: [String!]
  updatedAtTx_lt: String
  updatedAtTx_lte: String
  updatedAtTx_not: String
  updatedAtTx_not_contains: String
  updatedAtTx_not_contains_nocase: String
  updatedAtTx_not_ends_with: String
  updatedAtTx_not_ends_with_nocase: String
  updatedAtTx_not_in: [String!]
  updatedAtTx_not_starts_with: String
  updatedAtTx_not_starts_with_nocase: String
  updatedAtTx_starts_with: String
  updatedAtTx_starts_with_nocase: String
}

enum LiquidityPool_orderBy {
  atomicYields
  createdAtTx
  distributeFees
  fMaxTotalTraderFunds
  fPnLparticipantWithdrawalMinAmountLimit
  fPnLparticipantWithdrawalPercentageLimit
  fPnLparticipantsCashCC
  fRedemptionRate
  funds
  iActivePerpetualCount
  iPerpetualCount
  iPnLparticipantWithdrawalPeriod
  iPriceUpdateTimeSec
  iTargetPoolSizeUpdateTime
  id
  isRunning
  marginToken
  participationFundLastUpdated
  perpetuals
  shareToken
  totalAmountDeposited
  traderPools
  treasuryAddress
  updatedAtTx
}

type LiquidityRemoved {
  id: ID!
  poolId: BigInt!
  shareAmount: BigInt!
  tokenAmount: BigInt!
  user: Trader!
}

input LiquidityRemoved_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  poolId: BigInt
  poolId_gt: BigInt
  poolId_gte: BigInt
  poolId_in: [BigInt!]
  poolId_lt: BigInt
  poolId_lte: BigInt
  poolId_not: BigInt
  poolId_not_in: [BigInt!]
  shareAmount: BigInt
  shareAmount_gt: BigInt
  shareAmount_gte: BigInt
  shareAmount_in: [BigInt!]
  shareAmount_lt: BigInt
  shareAmount_lte: BigInt
  shareAmount_not: BigInt
  shareAmount_not_in: [BigInt!]
  tokenAmount: BigInt
  tokenAmount_gt: BigInt
  tokenAmount_gte: BigInt
  tokenAmount_in: [BigInt!]
  tokenAmount_lt: BigInt
  tokenAmount_lte: BigInt
  tokenAmount_not: BigInt
  tokenAmount_not_in: [BigInt!]
  user: String
  user_: Trader_filter
  user_contains: String
  user_contains_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_gt: String
  user_gte: String
  user_in: [String!]
  user_lt: String
  user_lte: String
  user_not: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_not_in: [String!]
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
}

enum LiquidityRemoved_orderBy {
  id
  poolId
  shareAmount
  tokenAmount
  user
}

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
  asc
  desc
}

type OwnershipTransferred {
  id: ID!
  newOwner: Bytes!
  previousOwner: Bytes!
}

input OwnershipTransferred_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  newOwner: Bytes
  newOwner_contains: Bytes
  newOwner_in: [Bytes!]
  newOwner_not: Bytes
  newOwner_not_contains: Bytes
  newOwner_not_in: [Bytes!]
  previousOwner: Bytes
  previousOwner_contains: Bytes
  previousOwner_in: [Bytes!]
  previousOwner_not: Bytes
  previousOwner_not_contains: Bytes
  previousOwner_not_in: [Bytes!]
}

enum OwnershipTransferred_orderBy {
  id
  newOwner
  previousOwner
}

type Perpetual {
  ammFund: Fund
  createdAtTx: Transaction!

  "avarage long positions sizes for the amm over time\n"
  currentAMMExposureEMALong: BigInt!

  "avarage short positions sizes for the amm over time\n"
  currentAMMExposureEMAShort: BigInt!

  "avarage positions sizes over time\n"
  currentTraderExposureEMA: BigInt!
  distributeFees(
    first: Int = 100
    orderBy: DistributeFee_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: DistributeFee_filter
  ): [DistributeFee!]
  eCollateralCurrency: Int!
  fAMMFundCashCC: BigInt
  fAMMMinSizeCC: BigInt!
  fAMMTargetDDBaseline: BigInt!
  fAMMTargetDDStress: BigInt!
  fDFCoverNRate: BigInt!

  "Risk parameters for default fund / AMM pool\n"
  fFundingRate: BigInt

  "Base parameters\n"
  fFundingRateClamp: BigInt!
  fInitialMarginRateAlpha: BigInt!
  fInitialMarginRateCap: BigInt!
  fLiquidationPenaltyRate: BigInt!
  fLotSizeBC: BigInt!
  fMaintenanceMarginRateAlpha: BigInt!
  fMarginRateBeta: BigInt!
  fMarkPriceEMALambda: BigInt!
  fMaximalTradeSizeBumpUp: BigInt!
  fMinimalAMMExposureEMA: BigInt!
  fMinimalSpread: BigInt!
  fMinimalSpreadInStress: BigInt!
  fMinimalTraderExposureEMA: BigInt!
  fPnLPartRate: BigInt!
  fReferralRebateCC: BigInt!
  fRho23: BigInt!
  fSigma2: BigInt!
  fSigma3: BigInt!
  fSpotIndexPrice: BigInt

  "Risk parameters for underlying instruments\n"
  fStressReturnS2Negative: BigInt!
  fStressReturnS2Positive: BigInt!
  fStressReturnS3Negative: BigInt!
  fStressReturnS3Positive: BigInt!
  fTreasuryFeeRate: BigInt!
  id: ID!
  lastTradedPrice: BigInt!
  liquidates(
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Liquidate_filter
  ): [Liquidate!]
  markIndexPricePremium: BigInt!
  openInterestBC: BigInt!
  oracleS2: SpotOracle!
  oracleS3: SpotOracle
  pool: LiquidityPool!
  positions(
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Position_filter
  ): [Position!]
  positionsTotalCount: Int!
  state: PerpetualState!
  totalAmountDeposited: BigInt!
  totalAmountLiquidatedBC: BigInt!
  totalAmountSettled: BigInt!
  totalTradingPnLCC: BigInt!
  traderStates(
    first: Int = 100
    orderBy: TraderState_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: TraderState_filter
  ): [TraderState!]
  trades(
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Trade_filter
  ): [Trade!]
  tradesTotalCount: Int!

  "accumulated funding rate per unit of index since the begining of time\n"
  unitAccumulativeFunding: BigInt!
  updatedAtTx: Transaction!
}

type PerpetualCreated {
  eCollateralCurrency: BigInt!
  id: ID!
  perpetualId: Bytes!
  poolId: Int!
}

input PerpetualCreated_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  eCollateralCurrency: BigInt
  eCollateralCurrency_gt: BigInt
  eCollateralCurrency_gte: BigInt
  eCollateralCurrency_in: [BigInt!]
  eCollateralCurrency_lt: BigInt
  eCollateralCurrency_lte: BigInt
  eCollateralCurrency_not: BigInt
  eCollateralCurrency_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
  poolId: Int
  poolId_gt: Int
  poolId_gte: Int
  poolId_in: [Int!]
  poolId_lt: Int
  poolId_lte: Int
  poolId_not: Int
  poolId_not_in: [Int!]
}

enum PerpetualCreated_orderBy {
  eCollateralCurrency
  id
  perpetualId
  poolId
}

type PerpetualLimitOrderBookDeployed {
  id: ID!
  limitOrderBookAddress: Bytes!
  perpManagerAddress: Bytes!
  perpetualId: Bytes!
}

input PerpetualLimitOrderBookDeployed_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  limitOrderBookAddress: Bytes
  limitOrderBookAddress_contains: Bytes
  limitOrderBookAddress_in: [Bytes!]
  limitOrderBookAddress_not: Bytes
  limitOrderBookAddress_not_contains: Bytes
  limitOrderBookAddress_not_in: [Bytes!]
  perpManagerAddress: Bytes
  perpManagerAddress_contains: Bytes
  perpManagerAddress_in: [Bytes!]
  perpManagerAddress_not: Bytes
  perpManagerAddress_not_contains: Bytes
  perpManagerAddress_not_in: [Bytes!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum PerpetualLimitOrderBookDeployed_orderBy {
  id
  limitOrderBookAddress
  perpManagerAddress
  perpetualId
}

type PerpetualLimitOrderCancelled {
  id: ID!
  orderHash: Bytes!
}

input PerpetualLimitOrderCancelled_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  orderHash: Bytes
  orderHash_contains: Bytes
  orderHash_in: [Bytes!]
  orderHash_not: Bytes
  orderHash_not_contains: Bytes
  orderHash_not_in: [Bytes!]
}

enum PerpetualLimitOrderCancelled_orderBy {
  id
  orderHash
}

type PerpetualLimitOrderCreated {
  createdTimestamp: BigInt!
  deadline: BigInt!
  digest: Bytes!
  flags: BigInt!
  id: ID!
  leverage: BigInt!
  limitPrice: BigInt!
  perpetualId: Bytes!
  referrerAddr: Bytes!
  tradeAmount: BigInt!
  trader: Bytes!
  triggerPrice: BigInt!
}

input PerpetualLimitOrderCreated_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  createdTimestamp: BigInt
  createdTimestamp_gt: BigInt
  createdTimestamp_gte: BigInt
  createdTimestamp_in: [BigInt!]
  createdTimestamp_lt: BigInt
  createdTimestamp_lte: BigInt
  createdTimestamp_not: BigInt
  createdTimestamp_not_in: [BigInt!]
  deadline: BigInt
  deadline_gt: BigInt
  deadline_gte: BigInt
  deadline_in: [BigInt!]
  deadline_lt: BigInt
  deadline_lte: BigInt
  deadline_not: BigInt
  deadline_not_in: [BigInt!]
  digest: Bytes
  digest_contains: Bytes
  digest_in: [Bytes!]
  digest_not: Bytes
  digest_not_contains: Bytes
  digest_not_in: [Bytes!]
  flags: BigInt
  flags_gt: BigInt
  flags_gte: BigInt
  flags_in: [BigInt!]
  flags_lt: BigInt
  flags_lte: BigInt
  flags_not: BigInt
  flags_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  leverage: BigInt
  leverage_gt: BigInt
  leverage_gte: BigInt
  leverage_in: [BigInt!]
  leverage_lt: BigInt
  leverage_lte: BigInt
  leverage_not: BigInt
  leverage_not_in: [BigInt!]
  limitPrice: BigInt
  limitPrice_gt: BigInt
  limitPrice_gte: BigInt
  limitPrice_in: [BigInt!]
  limitPrice_lt: BigInt
  limitPrice_lte: BigInt
  limitPrice_not: BigInt
  limitPrice_not_in: [BigInt!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
  referrerAddr: Bytes
  referrerAddr_contains: Bytes
  referrerAddr_in: [Bytes!]
  referrerAddr_not: Bytes
  referrerAddr_not_contains: Bytes
  referrerAddr_not_in: [Bytes!]
  tradeAmount: BigInt
  tradeAmount_gt: BigInt
  tradeAmount_gte: BigInt
  tradeAmount_in: [BigInt!]
  tradeAmount_lt: BigInt
  tradeAmount_lte: BigInt
  tradeAmount_not: BigInt
  tradeAmount_not_in: [BigInt!]
  trader: Bytes
  trader_contains: Bytes
  trader_in: [Bytes!]
  trader_not: Bytes
  trader_not_contains: Bytes
  trader_not_in: [Bytes!]
  triggerPrice: BigInt
  triggerPrice_gt: BigInt
  triggerPrice_gte: BigInt
  triggerPrice_in: [BigInt!]
  triggerPrice_lt: BigInt
  triggerPrice_lte: BigInt
  triggerPrice_not: BigInt
  triggerPrice_not_in: [BigInt!]
}

enum PerpetualLimitOrderCreated_orderBy {
  createdTimestamp
  deadline
  digest
  flags
  id
  leverage
  limitPrice
  perpetualId
  referrerAddr
  tradeAmount
  trader
  triggerPrice
}

enum PerpetualState {
  Cleared
  Clearing
  Emergency
  Normal
}

input Perpetual_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  ammFund: String
  ammFund_: Fund_filter
  ammFund_contains: String
  ammFund_contains_nocase: String
  ammFund_ends_with: String
  ammFund_ends_with_nocase: String
  ammFund_gt: String
  ammFund_gte: String
  ammFund_in: [String!]
  ammFund_lt: String
  ammFund_lte: String
  ammFund_not: String
  ammFund_not_contains: String
  ammFund_not_contains_nocase: String
  ammFund_not_ends_with: String
  ammFund_not_ends_with_nocase: String
  ammFund_not_in: [String!]
  ammFund_not_starts_with: String
  ammFund_not_starts_with_nocase: String
  ammFund_starts_with: String
  ammFund_starts_with_nocase: String
  createdAtTx: String
  createdAtTx_: Transaction_filter
  createdAtTx_contains: String
  createdAtTx_contains_nocase: String
  createdAtTx_ends_with: String
  createdAtTx_ends_with_nocase: String
  createdAtTx_gt: String
  createdAtTx_gte: String
  createdAtTx_in: [String!]
  createdAtTx_lt: String
  createdAtTx_lte: String
  createdAtTx_not: String
  createdAtTx_not_contains: String
  createdAtTx_not_contains_nocase: String
  createdAtTx_not_ends_with: String
  createdAtTx_not_ends_with_nocase: String
  createdAtTx_not_in: [String!]
  createdAtTx_not_starts_with: String
  createdAtTx_not_starts_with_nocase: String
  createdAtTx_starts_with: String
  createdAtTx_starts_with_nocase: String
  currentAMMExposureEMALong: BigInt
  currentAMMExposureEMALong_gt: BigInt
  currentAMMExposureEMALong_gte: BigInt
  currentAMMExposureEMALong_in: [BigInt!]
  currentAMMExposureEMALong_lt: BigInt
  currentAMMExposureEMALong_lte: BigInt
  currentAMMExposureEMALong_not: BigInt
  currentAMMExposureEMALong_not_in: [BigInt!]
  currentAMMExposureEMAShort: BigInt
  currentAMMExposureEMAShort_gt: BigInt
  currentAMMExposureEMAShort_gte: BigInt
  currentAMMExposureEMAShort_in: [BigInt!]
  currentAMMExposureEMAShort_lt: BigInt
  currentAMMExposureEMAShort_lte: BigInt
  currentAMMExposureEMAShort_not: BigInt
  currentAMMExposureEMAShort_not_in: [BigInt!]
  currentTraderExposureEMA: BigInt
  currentTraderExposureEMA_gt: BigInt
  currentTraderExposureEMA_gte: BigInt
  currentTraderExposureEMA_in: [BigInt!]
  currentTraderExposureEMA_lt: BigInt
  currentTraderExposureEMA_lte: BigInt
  currentTraderExposureEMA_not: BigInt
  currentTraderExposureEMA_not_in: [BigInt!]
  distributeFees_: DistributeFee_filter
  eCollateralCurrency: Int
  eCollateralCurrency_gt: Int
  eCollateralCurrency_gte: Int
  eCollateralCurrency_in: [Int!]
  eCollateralCurrency_lt: Int
  eCollateralCurrency_lte: Int
  eCollateralCurrency_not: Int
  eCollateralCurrency_not_in: [Int!]
  fAMMFundCashCC: BigInt
  fAMMFundCashCC_gt: BigInt
  fAMMFundCashCC_gte: BigInt
  fAMMFundCashCC_in: [BigInt!]
  fAMMFundCashCC_lt: BigInt
  fAMMFundCashCC_lte: BigInt
  fAMMFundCashCC_not: BigInt
  fAMMFundCashCC_not_in: [BigInt!]
  fAMMMinSizeCC: BigInt
  fAMMMinSizeCC_gt: BigInt
  fAMMMinSizeCC_gte: BigInt
  fAMMMinSizeCC_in: [BigInt!]
  fAMMMinSizeCC_lt: BigInt
  fAMMMinSizeCC_lte: BigInt
  fAMMMinSizeCC_not: BigInt
  fAMMMinSizeCC_not_in: [BigInt!]
  fAMMTargetDDBaseline: BigInt
  fAMMTargetDDBaseline_gt: BigInt
  fAMMTargetDDBaseline_gte: BigInt
  fAMMTargetDDBaseline_in: [BigInt!]
  fAMMTargetDDBaseline_lt: BigInt
  fAMMTargetDDBaseline_lte: BigInt
  fAMMTargetDDBaseline_not: BigInt
  fAMMTargetDDBaseline_not_in: [BigInt!]
  fAMMTargetDDStress: BigInt
  fAMMTargetDDStress_gt: BigInt
  fAMMTargetDDStress_gte: BigInt
  fAMMTargetDDStress_in: [BigInt!]
  fAMMTargetDDStress_lt: BigInt
  fAMMTargetDDStress_lte: BigInt
  fAMMTargetDDStress_not: BigInt
  fAMMTargetDDStress_not_in: [BigInt!]
  fDFCoverNRate: BigInt
  fDFCoverNRate_gt: BigInt
  fDFCoverNRate_gte: BigInt
  fDFCoverNRate_in: [BigInt!]
  fDFCoverNRate_lt: BigInt
  fDFCoverNRate_lte: BigInt
  fDFCoverNRate_not: BigInt
  fDFCoverNRate_not_in: [BigInt!]
  fFundingRate: BigInt
  fFundingRateClamp: BigInt
  fFundingRateClamp_gt: BigInt
  fFundingRateClamp_gte: BigInt
  fFundingRateClamp_in: [BigInt!]
  fFundingRateClamp_lt: BigInt
  fFundingRateClamp_lte: BigInt
  fFundingRateClamp_not: BigInt
  fFundingRateClamp_not_in: [BigInt!]
  fFundingRate_gt: BigInt
  fFundingRate_gte: BigInt
  fFundingRate_in: [BigInt!]
  fFundingRate_lt: BigInt
  fFundingRate_lte: BigInt
  fFundingRate_not: BigInt
  fFundingRate_not_in: [BigInt!]
  fInitialMarginRateAlpha: BigInt
  fInitialMarginRateAlpha_gt: BigInt
  fInitialMarginRateAlpha_gte: BigInt
  fInitialMarginRateAlpha_in: [BigInt!]
  fInitialMarginRateAlpha_lt: BigInt
  fInitialMarginRateAlpha_lte: BigInt
  fInitialMarginRateAlpha_not: BigInt
  fInitialMarginRateAlpha_not_in: [BigInt!]
  fInitialMarginRateCap: BigInt
  fInitialMarginRateCap_gt: BigInt
  fInitialMarginRateCap_gte: BigInt
  fInitialMarginRateCap_in: [BigInt!]
  fInitialMarginRateCap_lt: BigInt
  fInitialMarginRateCap_lte: BigInt
  fInitialMarginRateCap_not: BigInt
  fInitialMarginRateCap_not_in: [BigInt!]
  fLiquidationPenaltyRate: BigInt
  fLiquidationPenaltyRate_gt: BigInt
  fLiquidationPenaltyRate_gte: BigInt
  fLiquidationPenaltyRate_in: [BigInt!]
  fLiquidationPenaltyRate_lt: BigInt
  fLiquidationPenaltyRate_lte: BigInt
  fLiquidationPenaltyRate_not: BigInt
  fLiquidationPenaltyRate_not_in: [BigInt!]
  fLotSizeBC: BigInt
  fLotSizeBC_gt: BigInt
  fLotSizeBC_gte: BigInt
  fLotSizeBC_in: [BigInt!]
  fLotSizeBC_lt: BigInt
  fLotSizeBC_lte: BigInt
  fLotSizeBC_not: BigInt
  fLotSizeBC_not_in: [BigInt!]
  fMaintenanceMarginRateAlpha: BigInt
  fMaintenanceMarginRateAlpha_gt: BigInt
  fMaintenanceMarginRateAlpha_gte: BigInt
  fMaintenanceMarginRateAlpha_in: [BigInt!]
  fMaintenanceMarginRateAlpha_lt: BigInt
  fMaintenanceMarginRateAlpha_lte: BigInt
  fMaintenanceMarginRateAlpha_not: BigInt
  fMaintenanceMarginRateAlpha_not_in: [BigInt!]
  fMarginRateBeta: BigInt
  fMarginRateBeta_gt: BigInt
  fMarginRateBeta_gte: BigInt
  fMarginRateBeta_in: [BigInt!]
  fMarginRateBeta_lt: BigInt
  fMarginRateBeta_lte: BigInt
  fMarginRateBeta_not: BigInt
  fMarginRateBeta_not_in: [BigInt!]
  fMarkPriceEMALambda: BigInt
  fMarkPriceEMALambda_gt: BigInt
  fMarkPriceEMALambda_gte: BigInt
  fMarkPriceEMALambda_in: [BigInt!]
  fMarkPriceEMALambda_lt: BigInt
  fMarkPriceEMALambda_lte: BigInt
  fMarkPriceEMALambda_not: BigInt
  fMarkPriceEMALambda_not_in: [BigInt!]
  fMaximalTradeSizeBumpUp: BigInt
  fMaximalTradeSizeBumpUp_gt: BigInt
  fMaximalTradeSizeBumpUp_gte: BigInt
  fMaximalTradeSizeBumpUp_in: [BigInt!]
  fMaximalTradeSizeBumpUp_lt: BigInt
  fMaximalTradeSizeBumpUp_lte: BigInt
  fMaximalTradeSizeBumpUp_not: BigInt
  fMaximalTradeSizeBumpUp_not_in: [BigInt!]
  fMinimalAMMExposureEMA: BigInt
  fMinimalAMMExposureEMA_gt: BigInt
  fMinimalAMMExposureEMA_gte: BigInt
  fMinimalAMMExposureEMA_in: [BigInt!]
  fMinimalAMMExposureEMA_lt: BigInt
  fMinimalAMMExposureEMA_lte: BigInt
  fMinimalAMMExposureEMA_not: BigInt
  fMinimalAMMExposureEMA_not_in: [BigInt!]
  fMinimalSpread: BigInt
  fMinimalSpreadInStress: BigInt
  fMinimalSpreadInStress_gt: BigInt
  fMinimalSpreadInStress_gte: BigInt
  fMinimalSpreadInStress_in: [BigInt!]
  fMinimalSpreadInStress_lt: BigInt
  fMinimalSpreadInStress_lte: BigInt
  fMinimalSpreadInStress_not: BigInt
  fMinimalSpreadInStress_not_in: [BigInt!]
  fMinimalSpread_gt: BigInt
  fMinimalSpread_gte: BigInt
  fMinimalSpread_in: [BigInt!]
  fMinimalSpread_lt: BigInt
  fMinimalSpread_lte: BigInt
  fMinimalSpread_not: BigInt
  fMinimalSpread_not_in: [BigInt!]
  fMinimalTraderExposureEMA: BigInt
  fMinimalTraderExposureEMA_gt: BigInt
  fMinimalTraderExposureEMA_gte: BigInt
  fMinimalTraderExposureEMA_in: [BigInt!]
  fMinimalTraderExposureEMA_lt: BigInt
  fMinimalTraderExposureEMA_lte: BigInt
  fMinimalTraderExposureEMA_not: BigInt
  fMinimalTraderExposureEMA_not_in: [BigInt!]
  fPnLPartRate: BigInt
  fPnLPartRate_gt: BigInt
  fPnLPartRate_gte: BigInt
  fPnLPartRate_in: [BigInt!]
  fPnLPartRate_lt: BigInt
  fPnLPartRate_lte: BigInt
  fPnLPartRate_not: BigInt
  fPnLPartRate_not_in: [BigInt!]
  fReferralRebateCC: BigInt
  fReferralRebateCC_gt: BigInt
  fReferralRebateCC_gte: BigInt
  fReferralRebateCC_in: [BigInt!]
  fReferralRebateCC_lt: BigInt
  fReferralRebateCC_lte: BigInt
  fReferralRebateCC_not: BigInt
  fReferralRebateCC_not_in: [BigInt!]
  fRho23: BigInt
  fRho23_gt: BigInt
  fRho23_gte: BigInt
  fRho23_in: [BigInt!]
  fRho23_lt: BigInt
  fRho23_lte: BigInt
  fRho23_not: BigInt
  fRho23_not_in: [BigInt!]
  fSigma2: BigInt
  fSigma2_gt: BigInt
  fSigma2_gte: BigInt
  fSigma2_in: [BigInt!]
  fSigma2_lt: BigInt
  fSigma2_lte: BigInt
  fSigma2_not: BigInt
  fSigma2_not_in: [BigInt!]
  fSigma3: BigInt
  fSigma3_gt: BigInt
  fSigma3_gte: BigInt
  fSigma3_in: [BigInt!]
  fSigma3_lt: BigInt
  fSigma3_lte: BigInt
  fSigma3_not: BigInt
  fSigma3_not_in: [BigInt!]
  fSpotIndexPrice: BigInt
  fSpotIndexPrice_gt: BigInt
  fSpotIndexPrice_gte: BigInt
  fSpotIndexPrice_in: [BigInt!]
  fSpotIndexPrice_lt: BigInt
  fSpotIndexPrice_lte: BigInt
  fSpotIndexPrice_not: BigInt
  fSpotIndexPrice_not_in: [BigInt!]
  fStressReturnS2Negative: BigInt
  fStressReturnS2Negative_gt: BigInt
  fStressReturnS2Negative_gte: BigInt
  fStressReturnS2Negative_in: [BigInt!]
  fStressReturnS2Negative_lt: BigInt
  fStressReturnS2Negative_lte: BigInt
  fStressReturnS2Negative_not: BigInt
  fStressReturnS2Negative_not_in: [BigInt!]
  fStressReturnS2Positive: BigInt
  fStressReturnS2Positive_gt: BigInt
  fStressReturnS2Positive_gte: BigInt
  fStressReturnS2Positive_in: [BigInt!]
  fStressReturnS2Positive_lt: BigInt
  fStressReturnS2Positive_lte: BigInt
  fStressReturnS2Positive_not: BigInt
  fStressReturnS2Positive_not_in: [BigInt!]
  fStressReturnS3Negative: BigInt
  fStressReturnS3Negative_gt: BigInt
  fStressReturnS3Negative_gte: BigInt
  fStressReturnS3Negative_in: [BigInt!]
  fStressReturnS3Negative_lt: BigInt
  fStressReturnS3Negative_lte: BigInt
  fStressReturnS3Negative_not: BigInt
  fStressReturnS3Negative_not_in: [BigInt!]
  fStressReturnS3Positive: BigInt
  fStressReturnS3Positive_gt: BigInt
  fStressReturnS3Positive_gte: BigInt
  fStressReturnS3Positive_in: [BigInt!]
  fStressReturnS3Positive_lt: BigInt
  fStressReturnS3Positive_lte: BigInt
  fStressReturnS3Positive_not: BigInt
  fStressReturnS3Positive_not_in: [BigInt!]
  fTreasuryFeeRate: BigInt
  fTreasuryFeeRate_gt: BigInt
  fTreasuryFeeRate_gte: BigInt
  fTreasuryFeeRate_in: [BigInt!]
  fTreasuryFeeRate_lt: BigInt
  fTreasuryFeeRate_lte: BigInt
  fTreasuryFeeRate_not: BigInt
  fTreasuryFeeRate_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  lastTradedPrice: BigInt
  lastTradedPrice_gt: BigInt
  lastTradedPrice_gte: BigInt
  lastTradedPrice_in: [BigInt!]
  lastTradedPrice_lt: BigInt
  lastTradedPrice_lte: BigInt
  lastTradedPrice_not: BigInt
  lastTradedPrice_not_in: [BigInt!]
  liquidates_: Liquidate_filter
  markIndexPricePremium: BigInt
  markIndexPricePremium_gt: BigInt
  markIndexPricePremium_gte: BigInt
  markIndexPricePremium_in: [BigInt!]
  markIndexPricePremium_lt: BigInt
  markIndexPricePremium_lte: BigInt
  markIndexPricePremium_not: BigInt
  markIndexPricePremium_not_in: [BigInt!]
  openInterestBC: BigInt
  openInterestBC_gt: BigInt
  openInterestBC_gte: BigInt
  openInterestBC_in: [BigInt!]
  openInterestBC_lt: BigInt
  openInterestBC_lte: BigInt
  openInterestBC_not: BigInt
  openInterestBC_not_in: [BigInt!]
  oracleS2: String
  oracleS2_: SpotOracle_filter
  oracleS2_contains: String
  oracleS2_contains_nocase: String
  oracleS2_ends_with: String
  oracleS2_ends_with_nocase: String
  oracleS2_gt: String
  oracleS2_gte: String
  oracleS2_in: [String!]
  oracleS2_lt: String
  oracleS2_lte: String
  oracleS2_not: String
  oracleS2_not_contains: String
  oracleS2_not_contains_nocase: String
  oracleS2_not_ends_with: String
  oracleS2_not_ends_with_nocase: String
  oracleS2_not_in: [String!]
  oracleS2_not_starts_with: String
  oracleS2_not_starts_with_nocase: String
  oracleS2_starts_with: String
  oracleS2_starts_with_nocase: String
  oracleS3: String
  oracleS3_: SpotOracle_filter
  oracleS3_contains: String
  oracleS3_contains_nocase: String
  oracleS3_ends_with: String
  oracleS3_ends_with_nocase: String
  oracleS3_gt: String
  oracleS3_gte: String
  oracleS3_in: [String!]
  oracleS3_lt: String
  oracleS3_lte: String
  oracleS3_not: String
  oracleS3_not_contains: String
  oracleS3_not_contains_nocase: String
  oracleS3_not_ends_with: String
  oracleS3_not_ends_with_nocase: String
  oracleS3_not_in: [String!]
  oracleS3_not_starts_with: String
  oracleS3_not_starts_with_nocase: String
  oracleS3_starts_with: String
  oracleS3_starts_with_nocase: String
  pool: String
  pool_: LiquidityPool_filter
  pool_contains: String
  pool_contains_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_gt: String
  pool_gte: String
  pool_in: [String!]
  pool_lt: String
  pool_lte: String
  pool_not: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_not_in: [String!]
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  positionsTotalCount: Int
  positionsTotalCount_gt: Int
  positionsTotalCount_gte: Int
  positionsTotalCount_in: [Int!]
  positionsTotalCount_lt: Int
  positionsTotalCount_lte: Int
  positionsTotalCount_not: Int
  positionsTotalCount_not_in: [Int!]
  positions_: Position_filter
  state: PerpetualState
  state_in: [PerpetualState!]
  state_not: PerpetualState
  state_not_in: [PerpetualState!]
  totalAmountDeposited: BigInt
  totalAmountDeposited_gt: BigInt
  totalAmountDeposited_gte: BigInt
  totalAmountDeposited_in: [BigInt!]
  totalAmountDeposited_lt: BigInt
  totalAmountDeposited_lte: BigInt
  totalAmountDeposited_not: BigInt
  totalAmountDeposited_not_in: [BigInt!]
  totalAmountLiquidatedBC: BigInt
  totalAmountLiquidatedBC_gt: BigInt
  totalAmountLiquidatedBC_gte: BigInt
  totalAmountLiquidatedBC_in: [BigInt!]
  totalAmountLiquidatedBC_lt: BigInt
  totalAmountLiquidatedBC_lte: BigInt
  totalAmountLiquidatedBC_not: BigInt
  totalAmountLiquidatedBC_not_in: [BigInt!]
  totalAmountSettled: BigInt
  totalAmountSettled_gt: BigInt
  totalAmountSettled_gte: BigInt
  totalAmountSettled_in: [BigInt!]
  totalAmountSettled_lt: BigInt
  totalAmountSettled_lte: BigInt
  totalAmountSettled_not: BigInt
  totalAmountSettled_not_in: [BigInt!]
  totalTradingPnLCC: BigInt
  totalTradingPnLCC_gt: BigInt
  totalTradingPnLCC_gte: BigInt
  totalTradingPnLCC_in: [BigInt!]
  totalTradingPnLCC_lt: BigInt
  totalTradingPnLCC_lte: BigInt
  totalTradingPnLCC_not: BigInt
  totalTradingPnLCC_not_in: [BigInt!]
  traderStates_: TraderState_filter
  tradesTotalCount: Int
  tradesTotalCount_gt: Int
  tradesTotalCount_gte: Int
  tradesTotalCount_in: [Int!]
  tradesTotalCount_lt: Int
  tradesTotalCount_lte: Int
  tradesTotalCount_not: Int
  tradesTotalCount_not_in: [Int!]
  trades_: Trade_filter
  unitAccumulativeFunding: BigInt
  unitAccumulativeFunding_gt: BigInt
  unitAccumulativeFunding_gte: BigInt
  unitAccumulativeFunding_in: [BigInt!]
  unitAccumulativeFunding_lt: BigInt
  unitAccumulativeFunding_lte: BigInt
  unitAccumulativeFunding_not: BigInt
  unitAccumulativeFunding_not_in: [BigInt!]
  updatedAtTx: String
  updatedAtTx_: Transaction_filter
  updatedAtTx_contains: String
  updatedAtTx_contains_nocase: String
  updatedAtTx_ends_with: String
  updatedAtTx_ends_with_nocase: String
  updatedAtTx_gt: String
  updatedAtTx_gte: String
  updatedAtTx_in: [String!]
  updatedAtTx_lt: String
  updatedAtTx_lte: String
  updatedAtTx_not: String
  updatedAtTx_not_contains: String
  updatedAtTx_not_contains_nocase: String
  updatedAtTx_not_ends_with: String
  updatedAtTx_not_ends_with_nocase: String
  updatedAtTx_not_in: [String!]
  updatedAtTx_not_starts_with: String
  updatedAtTx_not_starts_with_nocase: String
  updatedAtTx_starts_with: String
  updatedAtTx_starts_with_nocase: String
}

enum Perpetual_orderBy {
  ammFund
  createdAtTx
  currentAMMExposureEMALong
  currentAMMExposureEMAShort
  currentTraderExposureEMA
  distributeFees
  eCollateralCurrency
  fAMMFundCashCC
  fAMMMinSizeCC
  fAMMTargetDDBaseline
  fAMMTargetDDStress
  fDFCoverNRate
  fFundingRate
  fFundingRateClamp
  fInitialMarginRateAlpha
  fInitialMarginRateCap
  fLiquidationPenaltyRate
  fLotSizeBC
  fMaintenanceMarginRateAlpha
  fMarginRateBeta
  fMarkPriceEMALambda
  fMaximalTradeSizeBumpUp
  fMinimalAMMExposureEMA
  fMinimalSpread
  fMinimalSpreadInStress
  fMinimalTraderExposureEMA
  fPnLPartRate
  fReferralRebateCC
  fRho23
  fSigma2
  fSigma3
  fSpotIndexPrice
  fStressReturnS2Negative
  fStressReturnS2Positive
  fStressReturnS3Negative
  fStressReturnS3Positive
  fTreasuryFeeRate
  id
  lastTradedPrice
  liquidates
  markIndexPricePremium
  openInterestBC
  oracleS2
  oracleS3
  pool
  positions
  positionsTotalCount
  state
  totalAmountDeposited
  totalAmountLiquidatedBC
  totalAmountSettled
  totalTradingPnLCC
  traderStates
  trades
  tradesTotalCount
  unitAccumulativeFunding
  updatedAtTx
}

type Position {
  currentPositionSizeBC: BigInt!
  endDate: BigInt
  highestSizeBC: BigInt!
  id: ID!
  isClosed: Boolean!
  lastChanged: BigInt!
  liquidations(
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Liquidate_filter
  ): [Liquidate!]
  lockedInValueQC: BigInt!
  lowestSizeBC: BigInt!
  perpetual: Perpetual!
  realizedPnLs(
    first: Int = 100
    orderBy: RealizedPnL_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: RealizedPnL_filter
  ): [RealizedPnL!]
  startDate: BigInt!
  startPositionSizeBC: BigInt!
  totalAmountLiquidatedBC: BigInt!
  totalPnLCC: BigInt!
  trader: Trader!
  traderState: TraderState!
  trades(
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Trade_filter
  ): [Trade!]
  tradesTotalCount: Int!
}

input Position_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  currentPositionSizeBC: BigInt
  currentPositionSizeBC_gt: BigInt
  currentPositionSizeBC_gte: BigInt
  currentPositionSizeBC_in: [BigInt!]
  currentPositionSizeBC_lt: BigInt
  currentPositionSizeBC_lte: BigInt
  currentPositionSizeBC_not: BigInt
  currentPositionSizeBC_not_in: [BigInt!]
  endDate: BigInt
  endDate_gt: BigInt
  endDate_gte: BigInt
  endDate_in: [BigInt!]
  endDate_lt: BigInt
  endDate_lte: BigInt
  endDate_not: BigInt
  endDate_not_in: [BigInt!]
  highestSizeBC: BigInt
  highestSizeBC_gt: BigInt
  highestSizeBC_gte: BigInt
  highestSizeBC_in: [BigInt!]
  highestSizeBC_lt: BigInt
  highestSizeBC_lte: BigInt
  highestSizeBC_not: BigInt
  highestSizeBC_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isClosed: Boolean
  isClosed_in: [Boolean!]
  isClosed_not: Boolean
  isClosed_not_in: [Boolean!]
  lastChanged: BigInt
  lastChanged_gt: BigInt
  lastChanged_gte: BigInt
  lastChanged_in: [BigInt!]
  lastChanged_lt: BigInt
  lastChanged_lte: BigInt
  lastChanged_not: BigInt
  lastChanged_not_in: [BigInt!]
  liquidations_: Liquidate_filter
  lockedInValueQC: BigInt
  lockedInValueQC_gt: BigInt
  lockedInValueQC_gte: BigInt
  lockedInValueQC_in: [BigInt!]
  lockedInValueQC_lt: BigInt
  lockedInValueQC_lte: BigInt
  lockedInValueQC_not: BigInt
  lockedInValueQC_not_in: [BigInt!]
  lowestSizeBC: BigInt
  lowestSizeBC_gt: BigInt
  lowestSizeBC_gte: BigInt
  lowestSizeBC_in: [BigInt!]
  lowestSizeBC_lt: BigInt
  lowestSizeBC_lte: BigInt
  lowestSizeBC_not: BigInt
  lowestSizeBC_not_in: [BigInt!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  realizedPnLs_: RealizedPnL_filter
  startDate: BigInt
  startDate_gt: BigInt
  startDate_gte: BigInt
  startDate_in: [BigInt!]
  startDate_lt: BigInt
  startDate_lte: BigInt
  startDate_not: BigInt
  startDate_not_in: [BigInt!]
  startPositionSizeBC: BigInt
  startPositionSizeBC_gt: BigInt
  startPositionSizeBC_gte: BigInt
  startPositionSizeBC_in: [BigInt!]
  startPositionSizeBC_lt: BigInt
  startPositionSizeBC_lte: BigInt
  startPositionSizeBC_not: BigInt
  startPositionSizeBC_not_in: [BigInt!]
  totalAmountLiquidatedBC: BigInt
  totalAmountLiquidatedBC_gt: BigInt
  totalAmountLiquidatedBC_gte: BigInt
  totalAmountLiquidatedBC_in: [BigInt!]
  totalAmountLiquidatedBC_lt: BigInt
  totalAmountLiquidatedBC_lte: BigInt
  totalAmountLiquidatedBC_not: BigInt
  totalAmountLiquidatedBC_not_in: [BigInt!]
  totalPnLCC: BigInt
  totalPnLCC_gt: BigInt
  totalPnLCC_gte: BigInt
  totalPnLCC_in: [BigInt!]
  totalPnLCC_lt: BigInt
  totalPnLCC_lte: BigInt
  totalPnLCC_not: BigInt
  totalPnLCC_not_in: [BigInt!]
  trader: String
  traderState: String
  traderState_: TraderState_filter
  traderState_contains: String
  traderState_contains_nocase: String
  traderState_ends_with: String
  traderState_ends_with_nocase: String
  traderState_gt: String
  traderState_gte: String
  traderState_in: [String!]
  traderState_lt: String
  traderState_lte: String
  traderState_not: String
  traderState_not_contains: String
  traderState_not_contains_nocase: String
  traderState_not_ends_with: String
  traderState_not_ends_with_nocase: String
  traderState_not_in: [String!]
  traderState_not_starts_with: String
  traderState_not_starts_with_nocase: String
  traderState_starts_with: String
  traderState_starts_with_nocase: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
  tradesTotalCount: Int
  tradesTotalCount_gt: Int
  tradesTotalCount_gte: Int
  tradesTotalCount_in: [Int!]
  tradesTotalCount_lt: Int
  tradesTotalCount_lte: Int
  tradesTotalCount_not: Int
  tradesTotalCount_not_in: [Int!]
  trades_: Trade_filter
}

enum Position_orderBy {
  currentPositionSizeBC
  endDate
  highestSizeBC
  id
  isClosed
  lastChanged
  liquidations
  lockedInValueQC
  lowestSizeBC
  perpetual
  realizedPnLs
  startDate
  startPositionSizeBC
  totalAmountLiquidatedBC
  totalPnLCC
  trader
  traderState
  trades
  tradesTotalCount
}

type ProxyOwnershipTransferred {
  _newOwner: Bytes!
  _oldOwner: Bytes!
  id: ID!
}

input ProxyOwnershipTransferred_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  _newOwner: Bytes
  _newOwner_contains: Bytes
  _newOwner_in: [Bytes!]
  _newOwner_not: Bytes
  _newOwner_not_contains: Bytes
  _newOwner_not_in: [Bytes!]
  _oldOwner: Bytes
  _oldOwner_contains: Bytes
  _oldOwner_in: [Bytes!]
  _oldOwner_not: Bytes
  _oldOwner_not_contains: Bytes
  _oldOwner_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
}

enum ProxyOwnershipTransferred_orderBy {
  _newOwner
  _oldOwner
  id
}

type Query {
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
  addAmmGovernanceAddress(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AddAmmGovernanceAddress
  addAmmGovernanceAddresses(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AddAmmGovernanceAddress_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AddAmmGovernanceAddress_filter
  ): [AddAmmGovernanceAddress!]!
  answerUpdated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AnswerUpdated
  answerUpdateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AnswerUpdated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AnswerUpdated_filter
  ): [AnswerUpdated!]!
  atomicYield(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AtomicYield
  atomicYields(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AtomicYield_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AtomicYield_filter
  ): [AtomicYield!]!
  candleSticksDay(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CandleSticksDay
  candleSticksDays(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CandleSticksDay_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CandleSticksDay_filter
  ): [CandleSticksDay!]!
  candleSticksFifteenMinute(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CandleSticksFifteenMinute
  candleSticksFifteenMinutes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CandleSticksFifteenMinute_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CandleSticksFifteenMinute_filter
  ): [CandleSticksFifteenMinute!]!
  candleSticksFourHour(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CandleSticksFourHour
  candleSticksFourHours(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CandleSticksFourHour_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CandleSticksFourHour_filter
  ): [CandleSticksFourHour!]!
  candleSticksHour(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CandleSticksHour
  candleSticksHours(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CandleSticksHour_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CandleSticksHour_filter
  ): [CandleSticksHour!]!
  candleSticksMinute(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CandleSticksMinute
  candleSticksMinutes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CandleSticksMinute_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CandleSticksMinute_filter
  ): [CandleSticksMinute!]!
  clear(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Clear
  clears(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Clear_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Clear_filter
  ): [Clear!]!
  distributeFee(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DistributeFee
  distributeFees(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DistributeFee_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DistributeFee_filter
  ): [DistributeFee!]!
  fund(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fund
  fundingPayment(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FundingPayment
  fundingPayments(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FundingPayment_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FundingPayment_filter
  ): [FundingPayment!]!
  fundingRate(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FundingRate
  fundingRates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FundingRate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FundingRate_filter
  ): [FundingRate!]!
  funds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Fund_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Fund_filter
  ): [Fund!]!
  implementationChanged(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ImplementationChanged
  implementationChangeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ImplementationChanged_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ImplementationChanged_filter
  ): [ImplementationChanged!]!
  limitOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LimitOrder
  limitOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LimitOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LimitOrder_filter
  ): [LimitOrder!]!
  liquidate(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidate
  liquidates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Liquidate_filter
  ): [Liquidate!]!
  liquidityAdded(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityAdded
  liquidityAddeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LiquidityAdded_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LiquidityAdded_filter
  ): [LiquidityAdded!]!
  liquidityPool(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPool
  liquidityPoolCreated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPoolCreated
  liquidityPoolCreateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LiquidityPoolCreated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LiquidityPoolCreated_filter
  ): [LiquidityPoolCreated!]!
  liquidityPools(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LiquidityPool_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LiquidityPool_filter
  ): [LiquidityPool!]!
  liquidityRemoved(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityRemoved
  liquidityRemoveds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LiquidityRemoved_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LiquidityRemoved_filter
  ): [LiquidityRemoved!]!
  ownershipTransferred(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnershipTransferred
  ownershipTransferreds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: OwnershipTransferred_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: OwnershipTransferred_filter
  ): [OwnershipTransferred!]!
  perpetual(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Perpetual
  perpetualCreated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PerpetualCreated
  perpetualCreateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PerpetualCreated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PerpetualCreated_filter
  ): [PerpetualCreated!]!
  perpetualLimitOrderBookDeployed(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PerpetualLimitOrderBookDeployed
  perpetualLimitOrderBookDeployeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PerpetualLimitOrderBookDeployed_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PerpetualLimitOrderBookDeployed_filter
  ): [PerpetualLimitOrderBookDeployed!]!
  perpetualLimitOrderCancelled(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PerpetualLimitOrderCancelled
  perpetualLimitOrderCancelleds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PerpetualLimitOrderCancelled_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PerpetualLimitOrderCancelled_filter
  ): [PerpetualLimitOrderCancelled!]!
  perpetualLimitOrderCreated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PerpetualLimitOrderCreated
  perpetualLimitOrderCreateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PerpetualLimitOrderCreated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PerpetualLimitOrderCreated_filter
  ): [PerpetualLimitOrderCreated!]!
  perpetuals(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Perpetual_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Perpetual_filter
  ): [Perpetual!]!
  position(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Position_filter
  ): [Position!]!
  proxyOwnershipTransferred(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProxyOwnershipTransferred
  proxyOwnershipTransferreds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ProxyOwnershipTransferred_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ProxyOwnershipTransferred_filter
  ): [ProxyOwnershipTransferred!]!
  realizedPnL(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RealizedPnL
  realizedPnLs(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RealizedPnL_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RealizedPnL_filter
  ): [RealizedPnL!]!
  removeAmmGovernanceAddress(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RemoveAmmGovernanceAddress
  removeAmmGovernanceAddresses(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RemoveAmmGovernanceAddress_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RemoveAmmGovernanceAddress_filter
  ): [RemoveAmmGovernanceAddress!]!
  runLiquidityPool(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RunLiquidityPool
  runLiquidityPools(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RunLiquidityPool_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RunLiquidityPool_filter
  ): [RunLiquidityPool!]!
  setClearedState(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetClearedState
  setClearedStates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetClearedState_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetClearedState_filter
  ): [SetClearedState!]!
  setEmergencyState(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetEmergencyState
  setEmergencyStates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetEmergencyState_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetEmergencyState_filter
  ): [SetEmergencyState!]!
  setNormalState(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetNormalState
  setNormalStates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetNormalState_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetNormalState_filter
  ): [SetNormalState!]!
  setOracles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetOracles_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetOracles_filter
  ): [SetOracles!]!
  setParameter(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetParameter
  setParameterPair(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetParameterPair
  setParameterPairs(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetParameterPair_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetParameterPair_filter
  ): [SetParameterPair!]!
  setParameters(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetParameter_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetParameter_filter
  ): [SetParameter!]!
  setPerpetualBaseParameters(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetPerpetualBaseParameters_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetPerpetualBaseParameters_filter
  ): [SetPerpetualBaseParameters!]!
  setPerpetualRiskParameters(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetPerpetualRiskParameters_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetPerpetualRiskParameters_filter
  ): [SetPerpetualRiskParameters!]!
  setTargetPoolSizeUpdateTime(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetTargetPoolSizeUpdateTime
  setTargetPoolSizeUpdateTimes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetTargetPoolSizeUpdateTime_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetTargetPoolSizeUpdateTime_filter
  ): [SetTargetPoolSizeUpdateTime!]!
  setWithdrawalLimit(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetWithdrawalLimit
  setWithdrawalLimits(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetWithdrawalLimit_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetWithdrawalLimit_filter
  ): [SetWithdrawalLimit!]!
  settle(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Settle
  settles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Settle_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Settle_filter
  ): [Settle!]!
  spotOracle(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SpotOracle
  spotOracles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SpotOracle_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SpotOracle_filter
  ): [SpotOracle!]!
  token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Token_filter
  ): [Token!]!
  tokensDeposited(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokensDeposited
  tokensDepositeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TokensDeposited_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TokensDeposited_filter
  ): [TokensDeposited!]!
  tokensWithdrawn(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokensWithdrawn
  tokensWithdrawns(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TokensWithdrawn_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TokensWithdrawn_filter
  ): [TokensWithdrawn!]!
  trade(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trade
  trader(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trader
  traderPool(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraderPool
  traderPools(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TraderPool_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TraderPool_filter
  ): [TraderPool!]!
  traderState(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraderState
  traderStates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TraderState_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TraderState_filter
  ): [TraderState!]!
  traders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Trader_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Trader_filter
  ): [Trader!]!
  trades(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Trade_filter
  ): [Trade!]!
  transaction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Transaction_filter
  ): [Transaction!]!
  transferEarningsToTreasuries(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TransferEarningsToTreasury_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TransferEarningsToTreasury_filter
  ): [TransferEarningsToTreasury!]!
  transferEarningsToTreasury(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferEarningsToTreasury
  transferFeeToReferrer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferFeeToReferrer
  transferFeeToReferrers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TransferFeeToReferrer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TransferFeeToReferrer_filter
  ): [TransferFeeToReferrer!]!
  transferTreasuryTo(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferTreasuryTo
  transferTreasuryTos(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TransferTreasuryTo_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TransferTreasuryTo_filter
  ): [TransferTreasuryTo!]!
  updateAMMFundCash(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateAMMFundCash
  updateAMMFundCashes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateAMMFundCash_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateAMMFundCash_filter
  ): [UpdateAMMFundCash!]!
  updateAMMFundTargetSize(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateAMMFundTargetSize
  updateAMMFundTargetSizes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateAMMFundTargetSize_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateAMMFundTargetSize_filter
  ): [UpdateAMMFundTargetSize!]!
  updateDefaultFundCash(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateDefaultFundCash
  updateDefaultFundCashes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateDefaultFundCash_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateDefaultFundCash_filter
  ): [UpdateDefaultFundCash!]!
  updateDefaultFundTargetSize(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateDefaultFundTargetSize
  updateDefaultFundTargetSizes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateDefaultFundTargetSize_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateDefaultFundTargetSize_filter
  ): [UpdateDefaultFundTargetSize!]!
  updateFundingRate(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateFundingRate
  updateFundingRates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateFundingRate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateFundingRate_filter
  ): [UpdateFundingRate!]!
  updateMarginAccount(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateMarginAccount
  updateMarginAccounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateMarginAccount_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateMarginAccount_filter
  ): [UpdateMarginAccount!]!
  updateMarkPrice(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateMarkPrice
  updateMarkPrices(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateMarkPrice_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateMarkPrice_filter
  ): [UpdateMarkPrice!]!
  updateParticipationFundCash(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateParticipationFundCash
  updateParticipationFundCashes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateParticipationFundCash_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateParticipationFundCash_filter
  ): [UpdateParticipationFundCash!]!
  updatePrice(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdatePrice
  updatePrices(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdatePrice_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdatePrice_filter
  ): [UpdatePrice!]!
  updateReprTradeSizes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateReprTradeSizes_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateReprTradeSizes_filter
  ): [UpdateReprTradeSizes!]!
  updateUnitAccumulatedFunding(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateUnitAccumulatedFunding
  updateUnitAccumulatedFundings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateUnitAccumulatedFunding_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateUnitAccumulatedFunding_filter
  ): [UpdateUnitAccumulatedFunding!]!
}

type RealizedPnL {
  blockTimestamp: BigInt!
  id: ID!
  perpetual: Perpetual!
  pnlCC: BigInt!
  position: Position!
  trader: Trader!
}

input RealizedPnL_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  pnlCC: BigInt
  pnlCC_gt: BigInt
  pnlCC_gte: BigInt
  pnlCC_in: [BigInt!]
  pnlCC_lt: BigInt
  pnlCC_lte: BigInt
  pnlCC_not: BigInt
  pnlCC_not_in: [BigInt!]
  position: String
  position_: Position_filter
  position_contains: String
  position_contains_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_gt: String
  position_gte: String
  position_in: [String!]
  position_lt: String
  position_lte: String
  position_not: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_not_in: [String!]
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
}

enum RealizedPnL_orderBy {
  blockTimestamp
  id
  perpetual
  pnlCC
  position
  trader
}

type RemoveAmmGovernanceAddress {
  gAddress: Bytes!
  id: ID!
}

input RemoveAmmGovernanceAddress_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  gAddress: Bytes
  gAddress_contains: Bytes
  gAddress_in: [Bytes!]
  gAddress_not: Bytes
  gAddress_not_contains: Bytes
  gAddress_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
}

enum RemoveAmmGovernanceAddress_orderBy {
  gAddress
  id
}

type RunLiquidityPool {
  _liqPoolID: Int!
  id: ID!
}

input RunLiquidityPool_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  _liqPoolID: Int
  _liqPoolID_gt: Int
  _liqPoolID_gte: Int
  _liqPoolID_in: [Int!]
  _liqPoolID_lt: Int
  _liqPoolID_lte: Int
  _liqPoolID_not: Int
  _liqPoolID_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
}

enum RunLiquidityPool_orderBy {
  _liqPoolID
  id
}

type SetClearedState {
  id: ID!
  perpetualId: Bytes!
}

input SetClearedState_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum SetClearedState_orderBy {
  id
  perpetualId
}

type SetEmergencyState {
  fSettlementMarkPremiumRate: BigInt!
  fSettlementS2Price: BigInt!
  fSettlementS3Price: BigInt!
  id: ID!
  perpetualId: Bytes!
}

input SetEmergencyState_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  fSettlementMarkPremiumRate: BigInt
  fSettlementMarkPremiumRate_gt: BigInt
  fSettlementMarkPremiumRate_gte: BigInt
  fSettlementMarkPremiumRate_in: [BigInt!]
  fSettlementMarkPremiumRate_lt: BigInt
  fSettlementMarkPremiumRate_lte: BigInt
  fSettlementMarkPremiumRate_not: BigInt
  fSettlementMarkPremiumRate_not_in: [BigInt!]
  fSettlementS2Price: BigInt
  fSettlementS2Price_gt: BigInt
  fSettlementS2Price_gte: BigInt
  fSettlementS2Price_in: [BigInt!]
  fSettlementS2Price_lt: BigInt
  fSettlementS2Price_lte: BigInt
  fSettlementS2Price_not: BigInt
  fSettlementS2Price_not_in: [BigInt!]
  fSettlementS3Price: BigInt
  fSettlementS3Price_gt: BigInt
  fSettlementS3Price_gte: BigInt
  fSettlementS3Price_in: [BigInt!]
  fSettlementS3Price_lt: BigInt
  fSettlementS3Price_lte: BigInt
  fSettlementS3Price_not: BigInt
  fSettlementS3Price_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum SetEmergencyState_orderBy {
  fSettlementMarkPremiumRate
  fSettlementS2Price
  fSettlementS3Price
  id
  perpetualId
}

type SetNormalState {
  id: ID!
  perpetualId: Bytes!
}

input SetNormalState_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum SetNormalState_orderBy {
  id
  perpetualId
}

type SetOracles {
  id: ID!
  perpetualId: Bytes!
}

input SetOracles_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum SetOracles_orderBy {
  id
  perpetualId
}

type SetParameter {
  id: ID!
  name: String!
  perpetual: Perpetual!
  value: BigInt!
}

type SetParameterPair {
  id: ID!
  name: String!
  perpetualId: Bytes!
  value1: BigInt!
  value2: BigInt!
}

input SetParameterPair_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
  value1: BigInt
  value1_gt: BigInt
  value1_gte: BigInt
  value1_in: [BigInt!]
  value1_lt: BigInt
  value1_lte: BigInt
  value1_not: BigInt
  value1_not_in: [BigInt!]
  value2: BigInt
  value2_gt: BigInt
  value2_gte: BigInt
  value2_in: [BigInt!]
  value2_lt: BigInt
  value2_lte: BigInt
  value2_not: BigInt
  value2_not_in: [BigInt!]
}

enum SetParameterPair_orderBy {
  id
  name
  perpetualId
  value1
  value2
}

input SetParameter_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  value: BigInt
  value_gt: BigInt
  value_gte: BigInt
  value_in: [BigInt!]
  value_lt: BigInt
  value_lte: BigInt
  value_not: BigInt
  value_not_in: [BigInt!]
}

enum SetParameter_orderBy {
  id
  name
  perpetual
  value
}

type SetPerpetualBaseParameters {
  id: ID!
  perpetualId: Bytes!
}

input SetPerpetualBaseParameters_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum SetPerpetualBaseParameters_orderBy {
  id
  perpetualId
}

type SetPerpetualRiskParameters {
  id: ID!
  perpetualId: Bytes!
}

input SetPerpetualRiskParameters_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum SetPerpetualRiskParameters_orderBy {
  id
  perpetualId
}

type SetTargetPoolSizeUpdateTime {
  id: ID!
  poolId: Int!
  targetPoolSizeUpdateTime: BigInt!
}

input SetTargetPoolSizeUpdateTime_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  poolId: Int
  poolId_gt: Int
  poolId_gte: Int
  poolId_in: [Int!]
  poolId_lt: Int
  poolId_lte: Int
  poolId_not: Int
  poolId_not_in: [Int!]
  targetPoolSizeUpdateTime: BigInt
  targetPoolSizeUpdateTime_gt: BigInt
  targetPoolSizeUpdateTime_gte: BigInt
  targetPoolSizeUpdateTime_in: [BigInt!]
  targetPoolSizeUpdateTime_lt: BigInt
  targetPoolSizeUpdateTime_lte: BigInt
  targetPoolSizeUpdateTime_not: BigInt
  targetPoolSizeUpdateTime_not_in: [BigInt!]
}

enum SetTargetPoolSizeUpdateTime_orderBy {
  id
  poolId
  targetPoolSizeUpdateTime
}

type SetWithdrawalLimit {
  PnLparticipantWithdrawalMinAmountLimit: BigInt!
  PnLparticipantWithdrawalPercentageLimit: BigInt!
  PnLparticipantWithdrawalPeriod: BigInt!
  id: ID!
  poolId: Int!
}

input SetWithdrawalLimit_filter {
  PnLparticipantWithdrawalMinAmountLimit: BigInt
  PnLparticipantWithdrawalMinAmountLimit_gt: BigInt
  PnLparticipantWithdrawalMinAmountLimit_gte: BigInt
  PnLparticipantWithdrawalMinAmountLimit_in: [BigInt!]
  PnLparticipantWithdrawalMinAmountLimit_lt: BigInt
  PnLparticipantWithdrawalMinAmountLimit_lte: BigInt
  PnLparticipantWithdrawalMinAmountLimit_not: BigInt
  PnLparticipantWithdrawalMinAmountLimit_not_in: [BigInt!]
  PnLparticipantWithdrawalPercentageLimit: BigInt
  PnLparticipantWithdrawalPercentageLimit_gt: BigInt
  PnLparticipantWithdrawalPercentageLimit_gte: BigInt
  PnLparticipantWithdrawalPercentageLimit_in: [BigInt!]
  PnLparticipantWithdrawalPercentageLimit_lt: BigInt
  PnLparticipantWithdrawalPercentageLimit_lte: BigInt
  PnLparticipantWithdrawalPercentageLimit_not: BigInt
  PnLparticipantWithdrawalPercentageLimit_not_in: [BigInt!]
  PnLparticipantWithdrawalPeriod: BigInt
  PnLparticipantWithdrawalPeriod_gt: BigInt
  PnLparticipantWithdrawalPeriod_gte: BigInt
  PnLparticipantWithdrawalPeriod_in: [BigInt!]
  PnLparticipantWithdrawalPeriod_lt: BigInt
  PnLparticipantWithdrawalPeriod_lte: BigInt
  PnLparticipantWithdrawalPeriod_not: BigInt
  PnLparticipantWithdrawalPeriod_not_in: [BigInt!]

  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  poolId: Int
  poolId_gt: Int
  poolId_gte: Int
  poolId_in: [Int!]
  poolId_lt: Int
  poolId_lte: Int
  poolId_not: Int
  poolId_not_in: [Int!]
}

enum SetWithdrawalLimit_orderBy {
  PnLparticipantWithdrawalMinAmountLimit
  PnLparticipantWithdrawalPercentageLimit
  PnLparticipantWithdrawalPeriod
  id
  poolId
}

type Settle {
  amount: BigInt!
  id: ID!
  perpetualId: Bytes!
  trader: Trader!
}

input Settle_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
}

enum Settle_orderBy {
  amount
  id
  perpetualId
  trader
}

type SpotOracle {
  answerUpdated: BigInt!
  answerUpdatedDecimals: Int!
  answerUpdatedTime: Int!
  baseCurrency: String!
  createdAtTimestamp: Int!

  "SpotOracle ID is the oracle address\n"
  id: ID!
  perpetuals(
    first: Int = 100
    orderBy: Perpetual_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Perpetual_filter
  ): [Perpetual!]!
  priceFeed: Bytes!
  quoteCurrency: String!
  spotPrice: BigInt!
  timePrice: Int!
  updatedAtTimestamp: Int!
}

input SpotOracle_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  answerUpdated: BigInt
  answerUpdatedDecimals: Int
  answerUpdatedDecimals_gt: Int
  answerUpdatedDecimals_gte: Int
  answerUpdatedDecimals_in: [Int!]
  answerUpdatedDecimals_lt: Int
  answerUpdatedDecimals_lte: Int
  answerUpdatedDecimals_not: Int
  answerUpdatedDecimals_not_in: [Int!]
  answerUpdatedTime: Int
  answerUpdatedTime_gt: Int
  answerUpdatedTime_gte: Int
  answerUpdatedTime_in: [Int!]
  answerUpdatedTime_lt: Int
  answerUpdatedTime_lte: Int
  answerUpdatedTime_not: Int
  answerUpdatedTime_not_in: [Int!]
  answerUpdated_gt: BigInt
  answerUpdated_gte: BigInt
  answerUpdated_in: [BigInt!]
  answerUpdated_lt: BigInt
  answerUpdated_lte: BigInt
  answerUpdated_not: BigInt
  answerUpdated_not_in: [BigInt!]
  baseCurrency: String
  baseCurrency_contains: String
  baseCurrency_contains_nocase: String
  baseCurrency_ends_with: String
  baseCurrency_ends_with_nocase: String
  baseCurrency_gt: String
  baseCurrency_gte: String
  baseCurrency_in: [String!]
  baseCurrency_lt: String
  baseCurrency_lte: String
  baseCurrency_not: String
  baseCurrency_not_contains: String
  baseCurrency_not_contains_nocase: String
  baseCurrency_not_ends_with: String
  baseCurrency_not_ends_with_nocase: String
  baseCurrency_not_in: [String!]
  baseCurrency_not_starts_with: String
  baseCurrency_not_starts_with_nocase: String
  baseCurrency_starts_with: String
  baseCurrency_starts_with_nocase: String
  createdAtTimestamp: Int
  createdAtTimestamp_gt: Int
  createdAtTimestamp_gte: Int
  createdAtTimestamp_in: [Int!]
  createdAtTimestamp_lt: Int
  createdAtTimestamp_lte: Int
  createdAtTimestamp_not: Int
  createdAtTimestamp_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetuals: [String!]
  perpetuals_: Perpetual_filter
  perpetuals_contains: [String!]
  perpetuals_contains_nocase: [String!]
  perpetuals_not: [String!]
  perpetuals_not_contains: [String!]
  perpetuals_not_contains_nocase: [String!]
  priceFeed: Bytes
  priceFeed_contains: Bytes
  priceFeed_in: [Bytes!]
  priceFeed_not: Bytes
  priceFeed_not_contains: Bytes
  priceFeed_not_in: [Bytes!]
  quoteCurrency: String
  quoteCurrency_contains: String
  quoteCurrency_contains_nocase: String
  quoteCurrency_ends_with: String
  quoteCurrency_ends_with_nocase: String
  quoteCurrency_gt: String
  quoteCurrency_gte: String
  quoteCurrency_in: [String!]
  quoteCurrency_lt: String
  quoteCurrency_lte: String
  quoteCurrency_not: String
  quoteCurrency_not_contains: String
  quoteCurrency_not_contains_nocase: String
  quoteCurrency_not_ends_with: String
  quoteCurrency_not_ends_with_nocase: String
  quoteCurrency_not_in: [String!]
  quoteCurrency_not_starts_with: String
  quoteCurrency_not_starts_with_nocase: String
  quoteCurrency_starts_with: String
  quoteCurrency_starts_with_nocase: String
  spotPrice: BigInt
  spotPrice_gt: BigInt
  spotPrice_gte: BigInt
  spotPrice_in: [BigInt!]
  spotPrice_lt: BigInt
  spotPrice_lte: BigInt
  spotPrice_not: BigInt
  spotPrice_not_in: [BigInt!]
  timePrice: Int
  timePrice_gt: Int
  timePrice_gte: Int
  timePrice_in: [Int!]
  timePrice_lt: Int
  timePrice_lte: Int
  timePrice_not: Int
  timePrice_not_in: [Int!]
  updatedAtTimestamp: Int
  updatedAtTimestamp_gt: Int
  updatedAtTimestamp_gte: Int
  updatedAtTimestamp_in: [Int!]
  updatedAtTimestamp_lt: Int
  updatedAtTimestamp_lte: Int
  updatedAtTimestamp_not: Int
  updatedAtTimestamp_not_in: [Int!]
}

enum SpotOracle_orderBy {
  answerUpdated
  answerUpdatedDecimals
  answerUpdatedTime
  baseCurrency
  createdAtTimestamp
  id
  perpetuals
  priceFeed
  quoteCurrency
  spotPrice
  timePrice
  updatedAtTimestamp
}

type Subscription {
  """
  Access to subgraph metadata
  """
  _meta(block: Block_height): _Meta_
  addAmmGovernanceAddress(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AddAmmGovernanceAddress
  addAmmGovernanceAddresses(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AddAmmGovernanceAddress_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AddAmmGovernanceAddress_filter
  ): [AddAmmGovernanceAddress!]!
  answerUpdated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AnswerUpdated
  answerUpdateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AnswerUpdated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AnswerUpdated_filter
  ): [AnswerUpdated!]!
  atomicYield(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AtomicYield
  atomicYields(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AtomicYield_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AtomicYield_filter
  ): [AtomicYield!]!
  candleSticksDay(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CandleSticksDay
  candleSticksDays(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CandleSticksDay_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CandleSticksDay_filter
  ): [CandleSticksDay!]!
  candleSticksFifteenMinute(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CandleSticksFifteenMinute
  candleSticksFifteenMinutes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CandleSticksFifteenMinute_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CandleSticksFifteenMinute_filter
  ): [CandleSticksFifteenMinute!]!
  candleSticksFourHour(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CandleSticksFourHour
  candleSticksFourHours(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CandleSticksFourHour_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CandleSticksFourHour_filter
  ): [CandleSticksFourHour!]!
  candleSticksHour(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CandleSticksHour
  candleSticksHours(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CandleSticksHour_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CandleSticksHour_filter
  ): [CandleSticksHour!]!
  candleSticksMinute(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CandleSticksMinute
  candleSticksMinutes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: CandleSticksMinute_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: CandleSticksMinute_filter
  ): [CandleSticksMinute!]!
  clear(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Clear
  clears(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Clear_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Clear_filter
  ): [Clear!]!
  distributeFee(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DistributeFee
  distributeFees(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DistributeFee_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DistributeFee_filter
  ): [DistributeFee!]!
  fund(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Fund
  fundingPayment(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FundingPayment
  fundingPayments(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FundingPayment_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FundingPayment_filter
  ): [FundingPayment!]!
  fundingRate(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FundingRate
  fundingRates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FundingRate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FundingRate_filter
  ): [FundingRate!]!
  funds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Fund_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Fund_filter
  ): [Fund!]!
  implementationChanged(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ImplementationChanged
  implementationChangeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ImplementationChanged_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ImplementationChanged_filter
  ): [ImplementationChanged!]!
  limitOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LimitOrder
  limitOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LimitOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LimitOrder_filter
  ): [LimitOrder!]!
  liquidate(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidate
  liquidates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Liquidate_filter
  ): [Liquidate!]!
  liquidityAdded(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityAdded
  liquidityAddeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LiquidityAdded_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LiquidityAdded_filter
  ): [LiquidityAdded!]!
  liquidityPool(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPool
  liquidityPoolCreated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityPoolCreated
  liquidityPoolCreateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LiquidityPoolCreated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LiquidityPoolCreated_filter
  ): [LiquidityPoolCreated!]!
  liquidityPools(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LiquidityPool_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LiquidityPool_filter
  ): [LiquidityPool!]!
  liquidityRemoved(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityRemoved
  liquidityRemoveds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: LiquidityRemoved_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: LiquidityRemoved_filter
  ): [LiquidityRemoved!]!
  ownershipTransferred(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnershipTransferred
  ownershipTransferreds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: OwnershipTransferred_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: OwnershipTransferred_filter
  ): [OwnershipTransferred!]!
  perpetual(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Perpetual
  perpetualCreated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PerpetualCreated
  perpetualCreateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PerpetualCreated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PerpetualCreated_filter
  ): [PerpetualCreated!]!
  perpetualLimitOrderBookDeployed(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PerpetualLimitOrderBookDeployed
  perpetualLimitOrderBookDeployeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PerpetualLimitOrderBookDeployed_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PerpetualLimitOrderBookDeployed_filter
  ): [PerpetualLimitOrderBookDeployed!]!
  perpetualLimitOrderCancelled(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PerpetualLimitOrderCancelled
  perpetualLimitOrderCancelleds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PerpetualLimitOrderCancelled_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PerpetualLimitOrderCancelled_filter
  ): [PerpetualLimitOrderCancelled!]!
  perpetualLimitOrderCreated(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PerpetualLimitOrderCreated
  perpetualLimitOrderCreateds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PerpetualLimitOrderCreated_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PerpetualLimitOrderCreated_filter
  ): [PerpetualLimitOrderCreated!]!
  perpetuals(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Perpetual_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Perpetual_filter
  ): [Perpetual!]!
  position(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Position
  positions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Position_filter
  ): [Position!]!
  proxyOwnershipTransferred(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ProxyOwnershipTransferred
  proxyOwnershipTransferreds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ProxyOwnershipTransferred_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ProxyOwnershipTransferred_filter
  ): [ProxyOwnershipTransferred!]!
  realizedPnL(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RealizedPnL
  realizedPnLs(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RealizedPnL_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RealizedPnL_filter
  ): [RealizedPnL!]!
  removeAmmGovernanceAddress(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RemoveAmmGovernanceAddress
  removeAmmGovernanceAddresses(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RemoveAmmGovernanceAddress_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RemoveAmmGovernanceAddress_filter
  ): [RemoveAmmGovernanceAddress!]!
  runLiquidityPool(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RunLiquidityPool
  runLiquidityPools(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RunLiquidityPool_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RunLiquidityPool_filter
  ): [RunLiquidityPool!]!
  setClearedState(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetClearedState
  setClearedStates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetClearedState_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetClearedState_filter
  ): [SetClearedState!]!
  setEmergencyState(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetEmergencyState
  setEmergencyStates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetEmergencyState_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetEmergencyState_filter
  ): [SetEmergencyState!]!
  setNormalState(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetNormalState
  setNormalStates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetNormalState_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetNormalState_filter
  ): [SetNormalState!]!
  setOracles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetOracles_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetOracles_filter
  ): [SetOracles!]!
  setParameter(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetParameter
  setParameterPair(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetParameterPair
  setParameterPairs(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetParameterPair_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetParameterPair_filter
  ): [SetParameterPair!]!
  setParameters(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetParameter_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetParameter_filter
  ): [SetParameter!]!
  setPerpetualBaseParameters(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetPerpetualBaseParameters_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetPerpetualBaseParameters_filter
  ): [SetPerpetualBaseParameters!]!
  setPerpetualRiskParameters(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetPerpetualRiskParameters_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetPerpetualRiskParameters_filter
  ): [SetPerpetualRiskParameters!]!
  setTargetPoolSizeUpdateTime(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetTargetPoolSizeUpdateTime
  setTargetPoolSizeUpdateTimes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetTargetPoolSizeUpdateTime_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetTargetPoolSizeUpdateTime_filter
  ): [SetTargetPoolSizeUpdateTime!]!
  setWithdrawalLimit(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetWithdrawalLimit
  setWithdrawalLimits(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SetWithdrawalLimit_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SetWithdrawalLimit_filter
  ): [SetWithdrawalLimit!]!
  settle(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Settle
  settles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Settle_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Settle_filter
  ): [Settle!]!
  spotOracle(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SpotOracle
  spotOracles(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SpotOracle_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SpotOracle_filter
  ): [SpotOracle!]!
  token(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Token_filter
  ): [Token!]!
  tokensDeposited(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokensDeposited
  tokensDepositeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TokensDeposited_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TokensDeposited_filter
  ): [TokensDeposited!]!
  tokensWithdrawn(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokensWithdrawn
  tokensWithdrawns(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TokensWithdrawn_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TokensWithdrawn_filter
  ): [TokensWithdrawn!]!
  trade(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trade
  trader(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Trader
  traderPool(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraderPool
  traderPools(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TraderPool_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TraderPool_filter
  ): [TraderPool!]!
  traderState(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TraderState
  traderStates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TraderState_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TraderState_filter
  ): [TraderState!]!
  traders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Trader_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Trader_filter
  ): [Trader!]!
  trades(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Trade_filter
  ): [Trade!]!
  transaction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Transaction_filter
  ): [Transaction!]!
  transferEarningsToTreasuries(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TransferEarningsToTreasury_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TransferEarningsToTreasury_filter
  ): [TransferEarningsToTreasury!]!
  transferEarningsToTreasury(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferEarningsToTreasury
  transferFeeToReferrer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferFeeToReferrer
  transferFeeToReferrers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TransferFeeToReferrer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TransferFeeToReferrer_filter
  ): [TransferFeeToReferrer!]!
  transferTreasuryTo(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferTreasuryTo
  transferTreasuryTos(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TransferTreasuryTo_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TransferTreasuryTo_filter
  ): [TransferTreasuryTo!]!
  updateAMMFundCash(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateAMMFundCash
  updateAMMFundCashes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateAMMFundCash_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateAMMFundCash_filter
  ): [UpdateAMMFundCash!]!
  updateAMMFundTargetSize(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateAMMFundTargetSize
  updateAMMFundTargetSizes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateAMMFundTargetSize_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateAMMFundTargetSize_filter
  ): [UpdateAMMFundTargetSize!]!
  updateDefaultFundCash(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateDefaultFundCash
  updateDefaultFundCashes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateDefaultFundCash_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateDefaultFundCash_filter
  ): [UpdateDefaultFundCash!]!
  updateDefaultFundTargetSize(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateDefaultFundTargetSize
  updateDefaultFundTargetSizes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateDefaultFundTargetSize_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateDefaultFundTargetSize_filter
  ): [UpdateDefaultFundTargetSize!]!
  updateFundingRate(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateFundingRate
  updateFundingRates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateFundingRate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateFundingRate_filter
  ): [UpdateFundingRate!]!
  updateMarginAccount(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateMarginAccount
  updateMarginAccounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateMarginAccount_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateMarginAccount_filter
  ): [UpdateMarginAccount!]!
  updateMarkPrice(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateMarkPrice
  updateMarkPrices(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateMarkPrice_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateMarkPrice_filter
  ): [UpdateMarkPrice!]!
  updateParticipationFundCash(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateParticipationFundCash
  updateParticipationFundCashes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateParticipationFundCash_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateParticipationFundCash_filter
  ): [UpdateParticipationFundCash!]!
  updatePrice(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdatePrice
  updatePrices(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdatePrice_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdatePrice_filter
  ): [UpdatePrice!]!
  updateReprTradeSizes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateReprTradeSizes_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateReprTradeSizes_filter
  ): [UpdateReprTradeSizes!]!
  updateUnitAccumulatedFunding(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateUnitAccumulatedFunding
  updateUnitAccumulatedFundings(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: UpdateUnitAccumulatedFunding_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: UpdateUnitAccumulatedFunding_filter
  ): [UpdateUnitAccumulatedFunding!]!
}

type Token {
  decimals: Int!
  id: ID!
  name: String!
  symbol: String!
  totalSupply: BigInt!
}

input Token_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  decimals: Int
  decimals_gt: Int
  decimals_gte: Int
  decimals_in: [Int!]
  decimals_lt: Int
  decimals_lte: Int
  decimals_not: Int
  decimals_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  symbol: String
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_gt: String
  symbol_gte: String
  symbol_in: [String!]
  symbol_lt: String
  symbol_lte: String
  symbol_not: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  symbol_not_in: [String!]
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  totalSupply: BigInt
  totalSupply_gt: BigInt
  totalSupply_gte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_lt: BigInt
  totalSupply_lte: BigInt
  totalSupply_not: BigInt
  totalSupply_not_in: [BigInt!]
}

enum Token_orderBy {
  decimals
  id
  name
  symbol
  totalSupply
}

type TokensDeposited {
  amount: BigInt!
  blockTimestamp: BigInt!
  id: ID!
  perpetualId: Bytes!
  trader: Trader!
  transaction: Transaction!
}

input TokensDeposited_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum TokensDeposited_orderBy {
  amount
  blockTimestamp
  id
  perpetualId
  trader
  transaction
}

type TokensWithdrawn {
  amount: BigInt!
  blockTimestamp: BigInt!
  id: ID!
  perpetualId: Bytes!
  trader: Trader!
  transaction: Transaction!
}

input TokensWithdrawn_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  amount: BigInt
  amount_gt: BigInt
  amount_gte: BigInt
  amount_in: [BigInt!]
  amount_lt: BigInt
  amount_lte: BigInt
  amount_not: BigInt
  amount_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum TokensWithdrawn_orderBy {
  amount
  blockTimestamp
  id
  perpetualId
  trader
  transaction
}

type Trade {
  blockTimestamp: BigInt!
  id: ID!
  isClose: Boolean!
  limitPrice: BigInt!
  newPositionSizeBC: BigInt!
  orderDigest: Bytes!
  orderFlags: BigInt!
  perpetual: Perpetual!
  position: Position!
  price: BigInt!
  tradeAmountBC: BigInt!
  trader: Trader!
  traderState: TraderState!
  transaction: Transaction!
}

input Trade_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  isClose: Boolean
  isClose_in: [Boolean!]
  isClose_not: Boolean
  isClose_not_in: [Boolean!]
  limitPrice: BigInt
  limitPrice_gt: BigInt
  limitPrice_gte: BigInt
  limitPrice_in: [BigInt!]
  limitPrice_lt: BigInt
  limitPrice_lte: BigInt
  limitPrice_not: BigInt
  limitPrice_not_in: [BigInt!]
  newPositionSizeBC: BigInt
  newPositionSizeBC_gt: BigInt
  newPositionSizeBC_gte: BigInt
  newPositionSizeBC_in: [BigInt!]
  newPositionSizeBC_lt: BigInt
  newPositionSizeBC_lte: BigInt
  newPositionSizeBC_not: BigInt
  newPositionSizeBC_not_in: [BigInt!]
  orderDigest: Bytes
  orderDigest_contains: Bytes
  orderDigest_in: [Bytes!]
  orderDigest_not: Bytes
  orderDigest_not_contains: Bytes
  orderDigest_not_in: [Bytes!]
  orderFlags: BigInt
  orderFlags_gt: BigInt
  orderFlags_gte: BigInt
  orderFlags_in: [BigInt!]
  orderFlags_lt: BigInt
  orderFlags_lte: BigInt
  orderFlags_not: BigInt
  orderFlags_not_in: [BigInt!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  position: String
  position_: Position_filter
  position_contains: String
  position_contains_nocase: String
  position_ends_with: String
  position_ends_with_nocase: String
  position_gt: String
  position_gte: String
  position_in: [String!]
  position_lt: String
  position_lte: String
  position_not: String
  position_not_contains: String
  position_not_contains_nocase: String
  position_not_ends_with: String
  position_not_ends_with_nocase: String
  position_not_in: [String!]
  position_not_starts_with: String
  position_not_starts_with_nocase: String
  position_starts_with: String
  position_starts_with_nocase: String
  price: BigInt
  price_gt: BigInt
  price_gte: BigInt
  price_in: [BigInt!]
  price_lt: BigInt
  price_lte: BigInt
  price_not: BigInt
  price_not_in: [BigInt!]
  tradeAmountBC: BigInt
  tradeAmountBC_gt: BigInt
  tradeAmountBC_gte: BigInt
  tradeAmountBC_in: [BigInt!]
  tradeAmountBC_lt: BigInt
  tradeAmountBC_lte: BigInt
  tradeAmountBC_not: BigInt
  tradeAmountBC_not_in: [BigInt!]
  trader: String
  traderState: String
  traderState_: TraderState_filter
  traderState_contains: String
  traderState_contains_nocase: String
  traderState_ends_with: String
  traderState_ends_with_nocase: String
  traderState_gt: String
  traderState_gte: String
  traderState_in: [String!]
  traderState_lt: String
  traderState_lte: String
  traderState_not: String
  traderState_not_contains: String
  traderState_not_contains_nocase: String
  traderState_not_ends_with: String
  traderState_not_ends_with_nocase: String
  traderState_not_in: [String!]
  traderState_not_starts_with: String
  traderState_not_starts_with_nocase: String
  traderState_starts_with: String
  traderState_starts_with_nocase: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum Trade_orderBy {
  blockTimestamp
  id
  isClose
  limitPrice
  newPositionSizeBC
  orderDigest
  orderFlags
  perpetual
  position
  price
  tradeAmountBC
  trader
  traderState
  transaction
}

type Trader {
  distributeFees(
    first: Int = 100
    orderBy: DistributeFee_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: DistributeFee_filter
  ): [DistributeFee!]
  fundingPayments(
    first: Int = 100
    orderBy: FundingPayment_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: FundingPayment_filter
  ): [FundingPayment!]
  fundingRates(
    first: Int = 100
    orderBy: FundingRate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: FundingRate_filter
  ): [FundingRate!]
  fundingRatesTotalCount: Int
  id: ID!
  limitOrders(
    first: Int = 100
    orderBy: LimitOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: LimitOrder_filter
  ): [LimitOrder!]
  liquidates(
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Liquidate_filter
  ): [Liquidate!]
  liquidator(
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Liquidate_filter
  ): [Liquidate!]
  liquidityAdded(
    first: Int = 100
    orderBy: LiquidityAdded_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: LiquidityAdded_filter
  ): [LiquidityAdded!]
  liquidityRemoved(
    first: Int = 100
    orderBy: LiquidityRemoved_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: LiquidityRemoved_filter
  ): [LiquidityRemoved!]
  positions(
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Position_filter
  ): [Position!]
  positionsTotalCount: Int
  realizedPnLs(
    first: Int = 100
    orderBy: RealizedPnL_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: RealizedPnL_filter
  ): [RealizedPnL!]
  settles(
    first: Int = 100
    orderBy: Settle_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Settle_filter
  ): [Settle!]
  tokensDeposits(
    first: Int = 100
    orderBy: TokensDeposited_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: TokensDeposited_filter
  ): [TokensDeposited!]
  tokensWithdraws(
    first: Int = 100
    orderBy: TokensWithdrawn_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: TokensWithdrawn_filter
  ): [TokensWithdrawn!]
  totalFundingPaymentCC: BigInt!
  traderPool(
    first: Int = 100
    orderBy: TraderPool_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: TraderPool_filter
  ): [TraderPool!]
  traderStates(
    first: Int = 100
    orderBy: TraderState_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: TraderState_filter
  ): [TraderState!]
  trades(
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Trade_filter
  ): [Trade!]
  tradesTotalCount: Int
  updateMarginAccount(
    first: Int = 100
    orderBy: UpdateMarginAccount_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: UpdateMarginAccount_filter
  ): [UpdateMarginAccount!]
}

type TraderPool {
  id: ID!
  liquidityPool: LiquidityPool!
  totalLiquidityAddedAmountCC: BigInt!
  totalShareAddedAmountCC: BigInt!
  trader: Trader!
}

input TraderPool_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  liquidityPool: String
  liquidityPool_: LiquidityPool_filter
  liquidityPool_contains: String
  liquidityPool_contains_nocase: String
  liquidityPool_ends_with: String
  liquidityPool_ends_with_nocase: String
  liquidityPool_gt: String
  liquidityPool_gte: String
  liquidityPool_in: [String!]
  liquidityPool_lt: String
  liquidityPool_lte: String
  liquidityPool_not: String
  liquidityPool_not_contains: String
  liquidityPool_not_contains_nocase: String
  liquidityPool_not_ends_with: String
  liquidityPool_not_ends_with_nocase: String
  liquidityPool_not_in: [String!]
  liquidityPool_not_starts_with: String
  liquidityPool_not_starts_with_nocase: String
  liquidityPool_starts_with: String
  liquidityPool_starts_with_nocase: String
  totalLiquidityAddedAmountCC: BigInt
  totalLiquidityAddedAmountCC_gt: BigInt
  totalLiquidityAddedAmountCC_gte: BigInt
  totalLiquidityAddedAmountCC_in: [BigInt!]
  totalLiquidityAddedAmountCC_lt: BigInt
  totalLiquidityAddedAmountCC_lte: BigInt
  totalLiquidityAddedAmountCC_not: BigInt
  totalLiquidityAddedAmountCC_not_in: [BigInt!]
  totalShareAddedAmountCC: BigInt
  totalShareAddedAmountCC_gt: BigInt
  totalShareAddedAmountCC_gte: BigInt
  totalShareAddedAmountCC_in: [BigInt!]
  totalShareAddedAmountCC_lt: BigInt
  totalShareAddedAmountCC_lte: BigInt
  totalShareAddedAmountCC_not: BigInt
  totalShareAddedAmountCC_not_in: [BigInt!]
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
}

enum TraderPool_orderBy {
  id
  liquidityPool
  totalLiquidityAddedAmountCC
  totalShareAddedAmountCC
  trader
}

type TraderState {
  amountSettled: BigInt!
  availableCashCC: BigInt!
  availableMarginCC: BigInt!
  balance: BigInt!
  blockTimestamp: BigInt!
  capitalUsed: BigInt!
  fUnitAccumulatedFundingStart: BigInt!
  fundingRatesTotalCount: Int!
  id: ID!
  liquidatorTotalAmount: BigInt!
  marginAccountCashCC: BigInt!
  marginAccountLockedInValueQC: BigInt!
  marginAccountPositionBC: BigInt!
  marginBalanceCC: BigInt!
  perpetual: Perpetual!
  positions(
    first: Int = 100
    orderBy: Position_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Position_filter
  ): [Position!]!
  positionsTotalCount: Int!
  state: String!
  totalAmountLiquidated: BigInt!
  totalAmountTraded: BigInt!
  totalFees: BigInt!
  totalPnLCC: BigInt!
  trader: Trader!
  trades(
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Trade_filter
  ): [Trade!]
  tradesTotalCount: Int!
}

input TraderState_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  amountSettled: BigInt
  amountSettled_gt: BigInt
  amountSettled_gte: BigInt
  amountSettled_in: [BigInt!]
  amountSettled_lt: BigInt
  amountSettled_lte: BigInt
  amountSettled_not: BigInt
  amountSettled_not_in: [BigInt!]
  availableCashCC: BigInt
  availableCashCC_gt: BigInt
  availableCashCC_gte: BigInt
  availableCashCC_in: [BigInt!]
  availableCashCC_lt: BigInt
  availableCashCC_lte: BigInt
  availableCashCC_not: BigInt
  availableCashCC_not_in: [BigInt!]
  availableMarginCC: BigInt
  availableMarginCC_gt: BigInt
  availableMarginCC_gte: BigInt
  availableMarginCC_in: [BigInt!]
  availableMarginCC_lt: BigInt
  availableMarginCC_lte: BigInt
  availableMarginCC_not: BigInt
  availableMarginCC_not_in: [BigInt!]
  balance: BigInt
  balance_gt: BigInt
  balance_gte: BigInt
  balance_in: [BigInt!]
  balance_lt: BigInt
  balance_lte: BigInt
  balance_not: BigInt
  balance_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  capitalUsed: BigInt
  capitalUsed_gt: BigInt
  capitalUsed_gte: BigInt
  capitalUsed_in: [BigInt!]
  capitalUsed_lt: BigInt
  capitalUsed_lte: BigInt
  capitalUsed_not: BigInt
  capitalUsed_not_in: [BigInt!]
  fUnitAccumulatedFundingStart: BigInt
  fUnitAccumulatedFundingStart_gt: BigInt
  fUnitAccumulatedFundingStart_gte: BigInt
  fUnitAccumulatedFundingStart_in: [BigInt!]
  fUnitAccumulatedFundingStart_lt: BigInt
  fUnitAccumulatedFundingStart_lte: BigInt
  fUnitAccumulatedFundingStart_not: BigInt
  fUnitAccumulatedFundingStart_not_in: [BigInt!]
  fundingRatesTotalCount: Int
  fundingRatesTotalCount_gt: Int
  fundingRatesTotalCount_gte: Int
  fundingRatesTotalCount_in: [Int!]
  fundingRatesTotalCount_lt: Int
  fundingRatesTotalCount_lte: Int
  fundingRatesTotalCount_not: Int
  fundingRatesTotalCount_not_in: [Int!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  liquidatorTotalAmount: BigInt
  liquidatorTotalAmount_gt: BigInt
  liquidatorTotalAmount_gte: BigInt
  liquidatorTotalAmount_in: [BigInt!]
  liquidatorTotalAmount_lt: BigInt
  liquidatorTotalAmount_lte: BigInt
  liquidatorTotalAmount_not: BigInt
  liquidatorTotalAmount_not_in: [BigInt!]
  marginAccountCashCC: BigInt
  marginAccountCashCC_gt: BigInt
  marginAccountCashCC_gte: BigInt
  marginAccountCashCC_in: [BigInt!]
  marginAccountCashCC_lt: BigInt
  marginAccountCashCC_lte: BigInt
  marginAccountCashCC_not: BigInt
  marginAccountCashCC_not_in: [BigInt!]
  marginAccountLockedInValueQC: BigInt
  marginAccountLockedInValueQC_gt: BigInt
  marginAccountLockedInValueQC_gte: BigInt
  marginAccountLockedInValueQC_in: [BigInt!]
  marginAccountLockedInValueQC_lt: BigInt
  marginAccountLockedInValueQC_lte: BigInt
  marginAccountLockedInValueQC_not: BigInt
  marginAccountLockedInValueQC_not_in: [BigInt!]
  marginAccountPositionBC: BigInt
  marginAccountPositionBC_gt: BigInt
  marginAccountPositionBC_gte: BigInt
  marginAccountPositionBC_in: [BigInt!]
  marginAccountPositionBC_lt: BigInt
  marginAccountPositionBC_lte: BigInt
  marginAccountPositionBC_not: BigInt
  marginAccountPositionBC_not_in: [BigInt!]
  marginBalanceCC: BigInt
  marginBalanceCC_gt: BigInt
  marginBalanceCC_gte: BigInt
  marginBalanceCC_in: [BigInt!]
  marginBalanceCC_lt: BigInt
  marginBalanceCC_lte: BigInt
  marginBalanceCC_not: BigInt
  marginBalanceCC_not_in: [BigInt!]
  perpetual: String
  perpetual_: Perpetual_filter
  perpetual_contains: String
  perpetual_contains_nocase: String
  perpetual_ends_with: String
  perpetual_ends_with_nocase: String
  perpetual_gt: String
  perpetual_gte: String
  perpetual_in: [String!]
  perpetual_lt: String
  perpetual_lte: String
  perpetual_not: String
  perpetual_not_contains: String
  perpetual_not_contains_nocase: String
  perpetual_not_ends_with: String
  perpetual_not_ends_with_nocase: String
  perpetual_not_in: [String!]
  perpetual_not_starts_with: String
  perpetual_not_starts_with_nocase: String
  perpetual_starts_with: String
  perpetual_starts_with_nocase: String
  positionsTotalCount: Int
  positionsTotalCount_gt: Int
  positionsTotalCount_gte: Int
  positionsTotalCount_in: [Int!]
  positionsTotalCount_lt: Int
  positionsTotalCount_lte: Int
  positionsTotalCount_not: Int
  positionsTotalCount_not_in: [Int!]
  positions_: Position_filter
  state: String
  state_contains: String
  state_contains_nocase: String
  state_ends_with: String
  state_ends_with_nocase: String
  state_gt: String
  state_gte: String
  state_in: [String!]
  state_lt: String
  state_lte: String
  state_not: String
  state_not_contains: String
  state_not_contains_nocase: String
  state_not_ends_with: String
  state_not_ends_with_nocase: String
  state_not_in: [String!]
  state_not_starts_with: String
  state_not_starts_with_nocase: String
  state_starts_with: String
  state_starts_with_nocase: String
  totalAmountLiquidated: BigInt
  totalAmountLiquidated_gt: BigInt
  totalAmountLiquidated_gte: BigInt
  totalAmountLiquidated_in: [BigInt!]
  totalAmountLiquidated_lt: BigInt
  totalAmountLiquidated_lte: BigInt
  totalAmountLiquidated_not: BigInt
  totalAmountLiquidated_not_in: [BigInt!]
  totalAmountTraded: BigInt
  totalAmountTraded_gt: BigInt
  totalAmountTraded_gte: BigInt
  totalAmountTraded_in: [BigInt!]
  totalAmountTraded_lt: BigInt
  totalAmountTraded_lte: BigInt
  totalAmountTraded_not: BigInt
  totalAmountTraded_not_in: [BigInt!]
  totalFees: BigInt
  totalFees_gt: BigInt
  totalFees_gte: BigInt
  totalFees_in: [BigInt!]
  totalFees_lt: BigInt
  totalFees_lte: BigInt
  totalFees_not: BigInt
  totalFees_not_in: [BigInt!]
  totalPnLCC: BigInt
  totalPnLCC_gt: BigInt
  totalPnLCC_gte: BigInt
  totalPnLCC_in: [BigInt!]
  totalPnLCC_lt: BigInt
  totalPnLCC_lte: BigInt
  totalPnLCC_not: BigInt
  totalPnLCC_not_in: [BigInt!]
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
  tradesTotalCount: Int
  tradesTotalCount_gt: Int
  tradesTotalCount_gte: Int
  tradesTotalCount_in: [Int!]
  tradesTotalCount_lt: Int
  tradesTotalCount_lte: Int
  tradesTotalCount_not: Int
  tradesTotalCount_not_in: [Int!]
  trades_: Trade_filter
}

enum TraderState_orderBy {
  amountSettled
  availableCashCC
  availableMarginCC
  balance
  blockTimestamp
  capitalUsed
  fUnitAccumulatedFundingStart
  fundingRatesTotalCount
  id
  liquidatorTotalAmount
  marginAccountCashCC
  marginAccountLockedInValueQC
  marginAccountPositionBC
  marginBalanceCC
  perpetual
  positions
  positionsTotalCount
  state
  totalAmountLiquidated
  totalAmountTraded
  totalFees
  totalPnLCC
  trader
  trades
  tradesTotalCount
}

input Trader_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  distributeFees_: DistributeFee_filter
  fundingPayments_: FundingPayment_filter
  fundingRatesTotalCount: Int
  fundingRatesTotalCount_gt: Int
  fundingRatesTotalCount_gte: Int
  fundingRatesTotalCount_in: [Int!]
  fundingRatesTotalCount_lt: Int
  fundingRatesTotalCount_lte: Int
  fundingRatesTotalCount_not: Int
  fundingRatesTotalCount_not_in: [Int!]
  fundingRates_: FundingRate_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  limitOrders_: LimitOrder_filter
  liquidates_: Liquidate_filter
  liquidator_: Liquidate_filter
  liquidityAdded_: LiquidityAdded_filter
  liquidityRemoved_: LiquidityRemoved_filter
  positionsTotalCount: Int
  positionsTotalCount_gt: Int
  positionsTotalCount_gte: Int
  positionsTotalCount_in: [Int!]
  positionsTotalCount_lt: Int
  positionsTotalCount_lte: Int
  positionsTotalCount_not: Int
  positionsTotalCount_not_in: [Int!]
  positions_: Position_filter
  realizedPnLs_: RealizedPnL_filter
  settles_: Settle_filter
  tokensDeposits_: TokensDeposited_filter
  tokensWithdraws_: TokensWithdrawn_filter
  totalFundingPaymentCC: BigInt
  totalFundingPaymentCC_gt: BigInt
  totalFundingPaymentCC_gte: BigInt
  totalFundingPaymentCC_in: [BigInt!]
  totalFundingPaymentCC_lt: BigInt
  totalFundingPaymentCC_lte: BigInt
  totalFundingPaymentCC_not: BigInt
  totalFundingPaymentCC_not_in: [BigInt!]
  traderPool_: TraderPool_filter
  traderStates_: TraderState_filter
  tradesTotalCount: Int
  tradesTotalCount_gt: Int
  tradesTotalCount_gte: Int
  tradesTotalCount_in: [Int!]
  tradesTotalCount_lt: Int
  tradesTotalCount_lte: Int
  tradesTotalCount_not: Int
  tradesTotalCount_not_in: [Int!]
  trades_: Trade_filter
  updateMarginAccount_: UpdateMarginAccount_filter
}

enum Trader_orderBy {
  distributeFees
  fundingPayments
  fundingRates
  fundingRatesTotalCount
  id
  limitOrders
  liquidates
  liquidator
  liquidityAdded
  liquidityRemoved
  positions
  positionsTotalCount
  realizedPnLs
  settles
  tokensDeposits
  tokensWithdraws
  totalFundingPaymentCC
  traderPool
  traderStates
  trades
  tradesTotalCount
  updateMarginAccount
}

type Transaction {
  atomicYields(
    first: Int = 100
    orderBy: AtomicYield_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: AtomicYield_filter
  ): [AtomicYield!]
  blockNumber: BigInt!
  from: Bytes!
  gasLimit: BigInt!
  gasPrice: BigInt!
  id: ID!
  index: BigInt!
  liquidates(
    first: Int = 100
    orderBy: Liquidate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Liquidate_filter
  ): [Liquidate!]
  timestamp: BigInt!
  to: Bytes
  tokensDeposits(
    first: Int = 100
    orderBy: TokensDeposited_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: TokensDeposited_filter
  ): [TokensDeposited!]
  tokensWithdraws(
    first: Int = 100
    orderBy: TokensWithdrawn_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: TokensWithdrawn_filter
  ): [TokensWithdrawn!]
  trades(
    first: Int = 100
    orderBy: Trade_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    where: Trade_filter
  ): [Trade!]
  value: BigInt!
}

input Transaction_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  atomicYields_: AtomicYield_filter
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  from: Bytes
  from_contains: Bytes
  from_in: [Bytes!]
  from_not: Bytes
  from_not_contains: Bytes
  from_not_in: [Bytes!]
  gasLimit: BigInt
  gasLimit_gt: BigInt
  gasLimit_gte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_lt: BigInt
  gasLimit_lte: BigInt
  gasLimit_not: BigInt
  gasLimit_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_gt: BigInt
  gasPrice_gte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_lt: BigInt
  gasPrice_lte: BigInt
  gasPrice_not: BigInt
  gasPrice_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  liquidates_: Liquidate_filter
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  to: Bytes
  to_contains: Bytes
  to_in: [Bytes!]
  to_not: Bytes
  to_not_contains: Bytes
  to_not_in: [Bytes!]
  tokensDeposits_: TokensDeposited_filter
  tokensWithdraws_: TokensWithdrawn_filter
  trades_: Trade_filter
  value: BigInt
  value_gt: BigInt
  value_gte: BigInt
  value_in: [BigInt!]
  value_lt: BigInt
  value_lte: BigInt
  value_not: BigInt
  value_not_in: [BigInt!]
}

enum Transaction_orderBy {
  atomicYields
  blockNumber
  from
  gasLimit
  gasPrice
  id
  index
  liquidates
  timestamp
  to
  tokensDeposits
  tokensWithdraws
  trades
  value
}

type TransferEarningsToTreasury {
  _poolId: Int!
  blockTimestamp: BigInt!
  fEarnings: BigInt!
  id: ID!
  newDefaultFundSize: BigInt!
}

input TransferEarningsToTreasury_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  _poolId: Int
  _poolId_gt: Int
  _poolId_gte: Int
  _poolId_in: [Int!]
  _poolId_lt: Int
  _poolId_lte: Int
  _poolId_not: Int
  _poolId_not_in: [Int!]
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  fEarnings: BigInt
  fEarnings_gt: BigInt
  fEarnings_gte: BigInt
  fEarnings_in: [BigInt!]
  fEarnings_lt: BigInt
  fEarnings_lte: BigInt
  fEarnings_not: BigInt
  fEarnings_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  newDefaultFundSize: BigInt
  newDefaultFundSize_gt: BigInt
  newDefaultFundSize_gte: BigInt
  newDefaultFundSize_in: [BigInt!]
  newDefaultFundSize_lt: BigInt
  newDefaultFundSize_lte: BigInt
  newDefaultFundSize_not: BigInt
  newDefaultFundSize_not_in: [BigInt!]
}

enum TransferEarningsToTreasury_orderBy {
  _poolId
  blockTimestamp
  fEarnings
  id
  newDefaultFundSize
}

type TransferFeeToReferrer {
  id: ID!
  perpetualId: Bytes!
  referralRebate: BigInt!
  referrer: Bytes!
  trader: Bytes!
}

input TransferFeeToReferrer_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
  referralRebate: BigInt
  referralRebate_gt: BigInt
  referralRebate_gte: BigInt
  referralRebate_in: [BigInt!]
  referralRebate_lt: BigInt
  referralRebate_lte: BigInt
  referralRebate_not: BigInt
  referralRebate_not_in: [BigInt!]
  referrer: Bytes
  referrer_contains: Bytes
  referrer_in: [Bytes!]
  referrer_not: Bytes
  referrer_not_contains: Bytes
  referrer_not_in: [Bytes!]
  trader: Bytes
  trader_contains: Bytes
  trader_in: [Bytes!]
  trader_not: Bytes
  trader_not_contains: Bytes
  trader_not_in: [Bytes!]
}

enum TransferFeeToReferrer_orderBy {
  id
  perpetualId
  referralRebate
  referrer
  trader
}

type TransferTreasuryTo {
  id: ID!
  newTreasury: Bytes!
  oldTreasury: Bytes!
  poolId: BigInt!
}

input TransferTreasuryTo_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  newTreasury: Bytes
  newTreasury_contains: Bytes
  newTreasury_in: [Bytes!]
  newTreasury_not: Bytes
  newTreasury_not_contains: Bytes
  newTreasury_not_in: [Bytes!]
  oldTreasury: Bytes
  oldTreasury_contains: Bytes
  oldTreasury_in: [Bytes!]
  oldTreasury_not: Bytes
  oldTreasury_not_contains: Bytes
  oldTreasury_not_in: [Bytes!]
  poolId: BigInt
  poolId_gt: BigInt
  poolId_gte: BigInt
  poolId_in: [BigInt!]
  poolId_lt: BigInt
  poolId_lte: BigInt
  poolId_not: BigInt
  poolId_not_in: [BigInt!]
}

enum TransferTreasuryTo_orderBy {
  id
  newTreasury
  oldTreasury
  poolId
}

type UpdateAMMFundCash {
  blockTimestamp: BigInt!
  fNewAMMFundCash: BigInt!
  fNewLiqPoolTotalAMMFundsCash: BigInt!
  id: ID!
  perpetualId: Bytes!
}

input UpdateAMMFundCash_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  fNewAMMFundCash: BigInt
  fNewAMMFundCash_gt: BigInt
  fNewAMMFundCash_gte: BigInt
  fNewAMMFundCash_in: [BigInt!]
  fNewAMMFundCash_lt: BigInt
  fNewAMMFundCash_lte: BigInt
  fNewAMMFundCash_not: BigInt
  fNewAMMFundCash_not_in: [BigInt!]
  fNewLiqPoolTotalAMMFundsCash: BigInt
  fNewLiqPoolTotalAMMFundsCash_gt: BigInt
  fNewLiqPoolTotalAMMFundsCash_gte: BigInt
  fNewLiqPoolTotalAMMFundsCash_in: [BigInt!]
  fNewLiqPoolTotalAMMFundsCash_lt: BigInt
  fNewLiqPoolTotalAMMFundsCash_lte: BigInt
  fNewLiqPoolTotalAMMFundsCash_not: BigInt
  fNewLiqPoolTotalAMMFundsCash_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum UpdateAMMFundCash_orderBy {
  blockTimestamp
  fNewAMMFundCash
  fNewLiqPoolTotalAMMFundsCash
  id
  perpetualId
}

type UpdateAMMFundTargetSize {
  blockTimestamp: BigInt!
  fAMMFundCashCCInPerpetual: BigInt!
  fAMMFundCashCCInPool: BigInt!
  fTargetAMMFundSizeInPerpetual: BigInt!
  fTargetAMMFundSizeInPool: BigInt!
  id: ID!
  liquidityPoolId: Int!
  perpetualId: Bytes!
}

input UpdateAMMFundTargetSize_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  fAMMFundCashCCInPerpetual: BigInt
  fAMMFundCashCCInPerpetual_gt: BigInt
  fAMMFundCashCCInPerpetual_gte: BigInt
  fAMMFundCashCCInPerpetual_in: [BigInt!]
  fAMMFundCashCCInPerpetual_lt: BigInt
  fAMMFundCashCCInPerpetual_lte: BigInt
  fAMMFundCashCCInPerpetual_not: BigInt
  fAMMFundCashCCInPerpetual_not_in: [BigInt!]
  fAMMFundCashCCInPool: BigInt
  fAMMFundCashCCInPool_gt: BigInt
  fAMMFundCashCCInPool_gte: BigInt
  fAMMFundCashCCInPool_in: [BigInt!]
  fAMMFundCashCCInPool_lt: BigInt
  fAMMFundCashCCInPool_lte: BigInt
  fAMMFundCashCCInPool_not: BigInt
  fAMMFundCashCCInPool_not_in: [BigInt!]
  fTargetAMMFundSizeInPerpetual: BigInt
  fTargetAMMFundSizeInPerpetual_gt: BigInt
  fTargetAMMFundSizeInPerpetual_gte: BigInt
  fTargetAMMFundSizeInPerpetual_in: [BigInt!]
  fTargetAMMFundSizeInPerpetual_lt: BigInt
  fTargetAMMFundSizeInPerpetual_lte: BigInt
  fTargetAMMFundSizeInPerpetual_not: BigInt
  fTargetAMMFundSizeInPerpetual_not_in: [BigInt!]
  fTargetAMMFundSizeInPool: BigInt
  fTargetAMMFundSizeInPool_gt: BigInt
  fTargetAMMFundSizeInPool_gte: BigInt
  fTargetAMMFundSizeInPool_in: [BigInt!]
  fTargetAMMFundSizeInPool_lt: BigInt
  fTargetAMMFundSizeInPool_lte: BigInt
  fTargetAMMFundSizeInPool_not: BigInt
  fTargetAMMFundSizeInPool_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  liquidityPoolId: Int
  liquidityPoolId_gt: Int
  liquidityPoolId_gte: Int
  liquidityPoolId_in: [Int!]
  liquidityPoolId_lt: Int
  liquidityPoolId_lte: Int
  liquidityPoolId_not: Int
  liquidityPoolId_not_in: [Int!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum UpdateAMMFundTargetSize_orderBy {
  blockTimestamp
  fAMMFundCashCCInPerpetual
  fAMMFundCashCCInPool
  fTargetAMMFundSizeInPerpetual
  fTargetAMMFundSizeInPool
  id
  liquidityPoolId
  perpetualId
}

type UpdateDefaultFundCash {
  fDeltaAmountCC: BigInt!
  fNewFundCash: BigInt!
  id: ID!
  poolId: Int!
}

input UpdateDefaultFundCash_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  fDeltaAmountCC: BigInt
  fDeltaAmountCC_gt: BigInt
  fDeltaAmountCC_gte: BigInt
  fDeltaAmountCC_in: [BigInt!]
  fDeltaAmountCC_lt: BigInt
  fDeltaAmountCC_lte: BigInt
  fDeltaAmountCC_not: BigInt
  fDeltaAmountCC_not_in: [BigInt!]
  fNewFundCash: BigInt
  fNewFundCash_gt: BigInt
  fNewFundCash_gte: BigInt
  fNewFundCash_in: [BigInt!]
  fNewFundCash_lt: BigInt
  fNewFundCash_lte: BigInt
  fNewFundCash_not: BigInt
  fNewFundCash_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  poolId: Int
  poolId_gt: Int
  poolId_gte: Int
  poolId_in: [Int!]
  poolId_lt: Int
  poolId_lte: Int
  poolId_not: Int
  poolId_not_in: [Int!]
}

enum UpdateDefaultFundCash_orderBy {
  fDeltaAmountCC
  fNewFundCash
  id
  poolId
}

type UpdateDefaultFundTargetSize {
  blockTimestamp: BigInt!
  fDefaultFundCashCC: BigInt!
  fTargetDFSize: BigInt!
  id: ID!
  liquidityPoolId: Int!
}

input UpdateDefaultFundTargetSize_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  fDefaultFundCashCC: BigInt
  fDefaultFundCashCC_gt: BigInt
  fDefaultFundCashCC_gte: BigInt
  fDefaultFundCashCC_in: [BigInt!]
  fDefaultFundCashCC_lt: BigInt
  fDefaultFundCashCC_lte: BigInt
  fDefaultFundCashCC_not: BigInt
  fDefaultFundCashCC_not_in: [BigInt!]
  fTargetDFSize: BigInt
  fTargetDFSize_gt: BigInt
  fTargetDFSize_gte: BigInt
  fTargetDFSize_in: [BigInt!]
  fTargetDFSize_lt: BigInt
  fTargetDFSize_lte: BigInt
  fTargetDFSize_not: BigInt
  fTargetDFSize_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  liquidityPoolId: Int
  liquidityPoolId_gt: Int
  liquidityPoolId_gte: Int
  liquidityPoolId_in: [Int!]
  liquidityPoolId_lt: Int
  liquidityPoolId_lte: Int
  liquidityPoolId_not: Int
  liquidityPoolId_not_in: [Int!]
}

enum UpdateDefaultFundTargetSize_orderBy {
  blockTimestamp
  fDefaultFundCashCC
  fTargetDFSize
  id
  liquidityPoolId
}

type UpdateFundingRate {
  blockTimestamp: BigInt!
  fFundingRate: BigInt!
  id: ID!
  perpetualId: Bytes!
}

input UpdateFundingRate_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  fFundingRate: BigInt
  fFundingRate_gt: BigInt
  fFundingRate_gte: BigInt
  fFundingRate_in: [BigInt!]
  fFundingRate_lt: BigInt
  fFundingRate_lte: BigInt
  fFundingRate_not: BigInt
  fFundingRate_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum UpdateFundingRate_orderBy {
  blockTimestamp
  fFundingRate
  id
  perpetualId
}

type UpdateMarginAccount {
  blockTimestamp: BigInt!
  fCashCC: BigInt!
  fFundingPaymentCC: BigInt!
  fLockedInValueQC: BigInt!
  fOpenInterestBC: BigInt!
  fPositionBC: BigInt!
  id: ID!
  perpetualId: Bytes!
  positionId: Bytes!
  trader: Trader
}

input UpdateMarginAccount_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  fCashCC: BigInt
  fCashCC_gt: BigInt
  fCashCC_gte: BigInt
  fCashCC_in: [BigInt!]
  fCashCC_lt: BigInt
  fCashCC_lte: BigInt
  fCashCC_not: BigInt
  fCashCC_not_in: [BigInt!]
  fFundingPaymentCC: BigInt
  fFundingPaymentCC_gt: BigInt
  fFundingPaymentCC_gte: BigInt
  fFundingPaymentCC_in: [BigInt!]
  fFundingPaymentCC_lt: BigInt
  fFundingPaymentCC_lte: BigInt
  fFundingPaymentCC_not: BigInt
  fFundingPaymentCC_not_in: [BigInt!]
  fLockedInValueQC: BigInt
  fLockedInValueQC_gt: BigInt
  fLockedInValueQC_gte: BigInt
  fLockedInValueQC_in: [BigInt!]
  fLockedInValueQC_lt: BigInt
  fLockedInValueQC_lte: BigInt
  fLockedInValueQC_not: BigInt
  fLockedInValueQC_not_in: [BigInt!]
  fOpenInterestBC: BigInt
  fOpenInterestBC_gt: BigInt
  fOpenInterestBC_gte: BigInt
  fOpenInterestBC_in: [BigInt!]
  fOpenInterestBC_lt: BigInt
  fOpenInterestBC_lte: BigInt
  fOpenInterestBC_not: BigInt
  fOpenInterestBC_not_in: [BigInt!]
  fPositionBC: BigInt
  fPositionBC_gt: BigInt
  fPositionBC_gte: BigInt
  fPositionBC_in: [BigInt!]
  fPositionBC_lt: BigInt
  fPositionBC_lte: BigInt
  fPositionBC_not: BigInt
  fPositionBC_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
  positionId: Bytes
  positionId_contains: Bytes
  positionId_in: [Bytes!]
  positionId_not: Bytes
  positionId_not_contains: Bytes
  positionId_not_in: [Bytes!]
  trader: String
  trader_: Trader_filter
  trader_contains: String
  trader_contains_nocase: String
  trader_ends_with: String
  trader_ends_with_nocase: String
  trader_gt: String
  trader_gte: String
  trader_in: [String!]
  trader_lt: String
  trader_lte: String
  trader_not: String
  trader_not_contains: String
  trader_not_contains_nocase: String
  trader_not_ends_with: String
  trader_not_ends_with_nocase: String
  trader_not_in: [String!]
  trader_not_starts_with: String
  trader_not_starts_with_nocase: String
  trader_starts_with: String
  trader_starts_with_nocase: String
}

enum UpdateMarginAccount_orderBy {
  blockTimestamp
  fCashCC
  fFundingPaymentCC
  fLockedInValueQC
  fOpenInterestBC
  fPositionBC
  id
  perpetualId
  positionId
  trader
}

type UpdateMarkPrice {
  blockTimestamp: BigInt!
  fMarkPricePremium: BigInt!
  fSpotIndexPrice: BigInt!
  id: ID!
  perpetualId: Bytes!
}

input UpdateMarkPrice_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  fMarkPricePremium: BigInt
  fMarkPricePremium_gt: BigInt
  fMarkPricePremium_gte: BigInt
  fMarkPricePremium_in: [BigInt!]
  fMarkPricePremium_lt: BigInt
  fMarkPricePremium_lte: BigInt
  fMarkPricePremium_not: BigInt
  fMarkPricePremium_not_in: [BigInt!]
  fSpotIndexPrice: BigInt
  fSpotIndexPrice_gt: BigInt
  fSpotIndexPrice_gte: BigInt
  fSpotIndexPrice_in: [BigInt!]
  fSpotIndexPrice_lt: BigInt
  fSpotIndexPrice_lte: BigInt
  fSpotIndexPrice_not: BigInt
  fSpotIndexPrice_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum UpdateMarkPrice_orderBy {
  blockTimestamp
  fMarkPricePremium
  fSpotIndexPrice
  id
  perpetualId
}

type UpdateParticipationFundCash {
  blockTimestamp: BigInt!
  fDeltaAmountCC: BigInt!
  fNewFundCash: BigInt!
  id: ID!
  poolId: Int!
}

input UpdateParticipationFundCash_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  fDeltaAmountCC: BigInt
  fDeltaAmountCC_gt: BigInt
  fDeltaAmountCC_gte: BigInt
  fDeltaAmountCC_in: [BigInt!]
  fDeltaAmountCC_lt: BigInt
  fDeltaAmountCC_lte: BigInt
  fDeltaAmountCC_not: BigInt
  fDeltaAmountCC_not_in: [BigInt!]
  fNewFundCash: BigInt
  fNewFundCash_gt: BigInt
  fNewFundCash_gte: BigInt
  fNewFundCash_in: [BigInt!]
  fNewFundCash_lt: BigInt
  fNewFundCash_lte: BigInt
  fNewFundCash_not: BigInt
  fNewFundCash_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  poolId: Int
  poolId_gt: Int
  poolId_gte: Int
  poolId_in: [Int!]
  poolId_lt: Int
  poolId_lte: Int
  poolId_not: Int
  poolId_not_in: [Int!]
}

enum UpdateParticipationFundCash_orderBy {
  blockTimestamp
  fDeltaAmountCC
  fNewFundCash
  id
  poolId
}

type UpdatePrice {
  id: ID!
  oracleS2Addr: Bytes!
  oracleS3Addr: Bytes!
  perpetualId: Bytes!
  spotPriceS2: BigInt!
  spotPriceS3: BigInt!
  timePriceS2: BigInt!
  timePriceS3: BigInt!
}

input UpdatePrice_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  oracleS2Addr: Bytes
  oracleS2Addr_contains: Bytes
  oracleS2Addr_in: [Bytes!]
  oracleS2Addr_not: Bytes
  oracleS2Addr_not_contains: Bytes
  oracleS2Addr_not_in: [Bytes!]
  oracleS3Addr: Bytes
  oracleS3Addr_contains: Bytes
  oracleS3Addr_in: [Bytes!]
  oracleS3Addr_not: Bytes
  oracleS3Addr_not_contains: Bytes
  oracleS3Addr_not_in: [Bytes!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
  spotPriceS2: BigInt
  spotPriceS2_gt: BigInt
  spotPriceS2_gte: BigInt
  spotPriceS2_in: [BigInt!]
  spotPriceS2_lt: BigInt
  spotPriceS2_lte: BigInt
  spotPriceS2_not: BigInt
  spotPriceS2_not_in: [BigInt!]
  spotPriceS3: BigInt
  spotPriceS3_gt: BigInt
  spotPriceS3_gte: BigInt
  spotPriceS3_in: [BigInt!]
  spotPriceS3_lt: BigInt
  spotPriceS3_lte: BigInt
  spotPriceS3_not: BigInt
  spotPriceS3_not_in: [BigInt!]
  timePriceS2: BigInt
  timePriceS2_gt: BigInt
  timePriceS2_gte: BigInt
  timePriceS2_in: [BigInt!]
  timePriceS2_lt: BigInt
  timePriceS2_lte: BigInt
  timePriceS2_not: BigInt
  timePriceS2_not_in: [BigInt!]
  timePriceS3: BigInt
  timePriceS3_gt: BigInt
  timePriceS3_gte: BigInt
  timePriceS3_in: [BigInt!]
  timePriceS3_lt: BigInt
  timePriceS3_lte: BigInt
  timePriceS3_not: BigInt
  timePriceS3_not_in: [BigInt!]
}

enum UpdatePrice_orderBy {
  id
  oracleS2Addr
  oracleS3Addr
  perpetualId
  spotPriceS2
  spotPriceS3
  timePriceS2
  timePriceS3
}

type UpdateReprTradeSizes {
  blockTimestamp: BigInt!
  fCurrentAMMExposureEMALong: BigInt!
  fCurrentAMMExposureEMAShort: BigInt!
  fCurrentTraderExposureEMA: BigInt!
  id: ID!
  perpetualId: Bytes!
}

input UpdateReprTradeSizes_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  blockTimestamp: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_lt: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_not_in: [BigInt!]
  fCurrentAMMExposureEMALong: BigInt
  fCurrentAMMExposureEMALong_gt: BigInt
  fCurrentAMMExposureEMALong_gte: BigInt
  fCurrentAMMExposureEMALong_in: [BigInt!]
  fCurrentAMMExposureEMALong_lt: BigInt
  fCurrentAMMExposureEMALong_lte: BigInt
  fCurrentAMMExposureEMALong_not: BigInt
  fCurrentAMMExposureEMALong_not_in: [BigInt!]
  fCurrentAMMExposureEMAShort: BigInt
  fCurrentAMMExposureEMAShort_gt: BigInt
  fCurrentAMMExposureEMAShort_gte: BigInt
  fCurrentAMMExposureEMAShort_in: [BigInt!]
  fCurrentAMMExposureEMAShort_lt: BigInt
  fCurrentAMMExposureEMAShort_lte: BigInt
  fCurrentAMMExposureEMAShort_not: BigInt
  fCurrentAMMExposureEMAShort_not_in: [BigInt!]
  fCurrentTraderExposureEMA: BigInt
  fCurrentTraderExposureEMA_gt: BigInt
  fCurrentTraderExposureEMA_gte: BigInt
  fCurrentTraderExposureEMA_in: [BigInt!]
  fCurrentTraderExposureEMA_lt: BigInt
  fCurrentTraderExposureEMA_lte: BigInt
  fCurrentTraderExposureEMA_not: BigInt
  fCurrentTraderExposureEMA_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
}

enum UpdateReprTradeSizes_orderBy {
  blockTimestamp
  fCurrentAMMExposureEMALong
  fCurrentAMMExposureEMAShort
  fCurrentTraderExposureEMA
  id
  perpetualId
}

type UpdateUnitAccumulatedFunding {
  id: ID!
  perpetualId: Bytes!
  unitAccumulativeFunding: BigInt!
}

input UpdateUnitAccumulatedFunding_filter {
  """
  Filter for the block changed event.
  """
  _change_block: BlockChangedFilter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  perpetualId: Bytes
  perpetualId_contains: Bytes
  perpetualId_in: [Bytes!]
  perpetualId_not: Bytes
  perpetualId_not_contains: Bytes
  perpetualId_not_in: [Bytes!]
  unitAccumulativeFunding: BigInt
  unitAccumulativeFunding_gt: BigInt
  unitAccumulativeFunding_gte: BigInt
  unitAccumulativeFunding_in: [BigInt!]
  unitAccumulativeFunding_lt: BigInt
  unitAccumulativeFunding_lte: BigInt
  unitAccumulativeFunding_not: BigInt
  unitAccumulativeFunding_not_in: [BigInt!]
}

enum UpdateUnitAccumulatedFunding_orderBy {
  id
  perpetualId
  unitAccumulativeFunding
}

type _Block_ {
  """
  The hash of the block
  """
  hash: Bytes

  """
  The block number
  """
  number: Int!

  """
  Integer representation of the timestamp stored in blocks for the chain
  """
  timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
  "Information about a specific subgraph block. The hash of the block\nwill be null if the _meta field has a block constraint that asks for\na block number. It will be filled if the _meta field has no block constraint\nand therefore asks for the latest  block\n"
  block: _Block_!

  """
  The deployment ID
  """
  deployment: String!

  """
  If `true`, the subgraph encountered indexing errors at some past block
  """
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """
  Data will be returned even if the subgraph has indexing errors
  """
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
